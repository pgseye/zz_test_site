annotate(geom = "text", x = 0.8, y = 5.26, label = "5.00", color="red", size = 8) +
theme_bw(base_size = 20)
p2 <- ggplot(df, aes(x, y = log(y))) +
geom_line(linewidth = 1, colour = "deepskyblue") +
geom_segment(aes(x = 5, y = 0, xend = 5, yend = 3.46), linewidth = 0.5, color = "red", linetype = "dashed") +
geom_segment(aes(x = 0, y = 3.46, xend = 5, yend = 3.46), linewidth = 0.5, color = "red", linetype = "dashed") +
scale_x_continuous(limits = c(0, 10), breaks = seq(0, 10, by = 1)) +
annotate(geom = "text", x = 0.8, y = 3.65, label = "3.46", color="red", size = 8) +
theme_bw(base_size = 20)
p3 <- ggplot(df, aes(x, y = log10(y))) +
geom_line(linewidth = 1, colour = "deepskyblue") +
geom_segment(aes(x = 5, y = 0, xend = 5, yend = 1.51), linewidth = 0.5, color = "red", linetype = "dashed") +
geom_segment(aes(x = 0, y = 1.51, xend = 5, yend = 1.51), linewidth = 0.5, color = "red", linetype = "dashed") +
scale_x_continuous(limits = c(0, 10), breaks = seq(0, 10, by = 1)) +
annotate(geom = "text", x = 0.8, y = 1.6, label = "1.51", color="red", size = 8) +
theme_bw(base_size = 20)
cowplot::plot_grid(p1, p2, p3, labels = c('Base(2) log', 'Natural log', 'Base(10) log'), hjust = c(-0.9,-0.7,-0.6), vjust = 4, ncol = 3, label_size = 20)
lm(y ~ x, data = df) |>
tbl_regression()
lm(y ~ x, data = df) |>
tbl_regression(intercept = T)
ggplot(df, aes(x, y)) +
geom_line(linewidth = 1, colour = "deepskyblue") +
geom_smooth(method = "lm")+
scale_x_continuous(limits = c(0, 10), breaks = seq(0, 10, by = 1)) +
scale_y_continuous(limits = c(1, 1050), breaks = c(1,100,200,300,400,500,600,700,800,900,1000)) +
theme_bw(base_size = 30)
ggplot(df, aes(x, y)) +
geom_line(linewidth = 1, colour = "deepskyblue") +
geom_smooth(method = "lm", se = F) +
scale_x_continuous(limits = c(0, 10), breaks = seq(0, 10, by = 1)) +
scale_y_continuous(limits = c(1, 1050), breaks = c(1,100,200,300,400,500,600,700,800,900,1000)) +
theme_bw(base_size = 30)
ggplot(df, aes(x, y)) +
geom_line(linewidth = 1, colour = "deepskyblue") +
geom_smooth(method = "lm", se = F, colour = "black") +
scale_x_continuous(limits = c(0, 10), breaks = seq(0, 10, by = 1)) +
scale_y_continuous(limits = c(1, 1050), breaks = c(1,100,200,300,400,500,600,700,800,900,1000)) +
theme_bw(base_size = 30)
#| message: false
library(tidyverse)
library(kableExtra)
library(gtsummary)
library(emmeans)
x <- c(0:10)
y <- 2^(0:10)
y2 <- c(paste0("1 = 2\U2070"),
paste0("2 = 2\U00B9"),
paste0("2x2 = 2\U00B2"),
paste0("2x2x2 = 2\U00B3"),
paste0("2x2x2x2 = 2\U2074"),
paste0("2x2x2x2x2 = 2\U2075"),
paste0("2x2x2x2x2x2 = 2\U2076"),
paste0("2x2x2x2x2x2x2 = 2\U2077"),
paste0("2x2x2x2x2x2x2x2 = 2\U2078"),
paste0("2x2x2x2x2x2x2x2x2 = 2\U2079"),
paste0("2x2x2x2x2x2x2x2x2x2 = 2\U00B9\U2070"))
df <- data.frame(cbind(x = x, y = y, `y_in_exponential_form` = y2))
df$x <- as.numeric(df$x); df$y <- as.numeric(df$y)
df |>
kable(align = "c", digits = 2)
#| code-fold: false
median(df$y)
#| code-fold: false
mean(df$y)
# nth root method - manual
(1*2*4*8*16*32*64*128*256*512*1024)^(1/11)
# logs method - manual
exp((log(1)+log(2)+log(4)+log(8)+log(16)+log(32)+log(64)+log(128)+log(256)+log(512)+log(1024))/11)
# logs method - quick and easy
exp(mean(log(df$y)))
ggplot(df, aes(x, y)) +
geom_line(linewidth = 1, colour = "deepskyblue") +
scale_x_continuous(limits = c(0, 10), breaks = seq(0, 10, by = 1)) +
scale_y_continuous(limits = c(1, 1050), breaks = c(1,100,200,300,400,500,600,700,800,900,1000)) +
theme_bw(base_size = 30)
ggplot(df, aes(x, y)) +
geom_line(linewidth = 1, colour = "deepskyblue") +
scale_x_continuous(limits = c(0, 10), breaks = seq(0, 10, by = 1)) +
scale_y_continuous(limits = c(1, 1050), breaks = c(1,2,4,8,16,32,64,128,256,512,1024)) +
geom_segment(aes(x = 0, y = 64, xend = 6, yend = 64), linewidth = 0.5, color = "red", linetype = "dashed") +
geom_segment(aes(x = 6, y = 1, xend = 6, yend = 64), linewidth = 0.5, color = "red", linetype = "dashed") +
geom_segment(aes(x = 0, y = 128, xend = 7, yend = 128), linewidth = 0.5, color = "red", linetype = "dashed") +
geom_segment(aes(x = 7, y = 1, xend = 7, yend = 128), linewidth = 0.5, color = "red", linetype = "dashed") +
geom_rect(aes(xmin = 0, xmax = 7, ymin = 64, ymax = 128), fill = "red", alpha = 0.02) +
geom_rect(aes(xmin = 6, xmax = 7, ymin = 1, ymax = 64), fill = "red", alpha = 0.02) +
geom_segment(aes(x = 0, y = 256, xend = 8, yend = 256), linewidth = 0.5, color = "red", linetype = "dashed") +
geom_segment(aes(x = 8, y = 1, xend = 8, yend = 256), linewidth = 0.5, color = "red", linetype = "dashed") +
geom_segment(aes(x = 0, y = 512, xend = 9, yend = 512), linewidth = 0.5, color = "red", linetype = "dashed") +
geom_segment(aes(x = 9, y = 1, xend = 9, yend = 512), linewidth = 0.5, color = "red", linetype = "dashed") +
geom_rect(aes(xmin = 0, xmax = 9, ymin = 256, ymax = 512), fill = "red", alpha = 0.02) +
geom_rect(aes(xmin = 8, xmax = 9, ymin = 1, ymax = 256), fill = "red", alpha = 0.02) +
theme_bw(base_size = 30)
#| message: false
library(scales)
ggplot(df, aes(x, y)) +
geom_line(linewidth = 1, colour = "deepskyblue") +
scale_x_continuous(limits = c(0, 10), breaks = seq(0, 10, by = 1)) +
scale_y_continuous(trans = "log2", breaks = c(1,2,4,8,16,32,64,128,256,512,1024)) +
geom_segment(aes(x = 0, y = 64, xend = 6, yend = 64), linewidth = 0.5, color = "red", linetype = "dashed") +
geom_segment(aes(x = 6, y = 1, xend = 6, yend = 64), linewidth = 0.5, color = "red", linetype = "dashed") +
geom_segment(aes(x = 0, y = 128, xend = 7, yend = 128), linewidth = 0.5, color = "red", linetype = "dashed") +
geom_segment(aes(x = 7, y = 1, xend = 7, yend = 128), linewidth = 0.5, color = "red", linetype = "dashed") +
geom_rect(aes(xmin = 0, xmax = 7, ymin = 64, ymax = 128), fill = "red", alpha = 0.02) +
geom_rect(aes(xmin = 6, xmax = 7, ymin = 1, ymax = 64), fill = "red", alpha = 0.02) +
geom_segment(aes(x = 0, y = 256, xend = 8, yend = 256), linewidth = 0.5, color = "red", linetype = "dashed") +
geom_segment(aes(x = 8, y = 1, xend = 8, yend = 256), linewidth = 0.5, color = "red", linetype = "dashed") +
geom_segment(aes(x = 0, y = 512, xend = 9, yend = 512), linewidth = 0.5, color = "red", linetype = "dashed") +
geom_segment(aes(x = 9, y = 1, xend = 9, yend = 512), linewidth = 0.5, color = "red", linetype = "dashed") +
geom_rect(aes(xmin = 0, xmax = 9, ymin = 256, ymax = 512), fill = "red", alpha = 0.02) +
geom_rect(aes(xmin = 8, xmax = 9, ymin = 1, ymax = 256), fill = "red", alpha = 0.02) +
theme_bw(base_size = 30)
ggplot(df, aes(x, y)) +
geom_line(linewidth = 1, colour = "deepskyblue") +
scale_x_continuous(limits = c(0, 10), breaks = seq(0, 10, by = 1)) +
scale_y_continuous(trans = log2_trans(),
breaks = c(1,2,4,8,16,32,64,128,256,512,1024),
labels = trans_format("log2", math_format(2^.x))) +
geom_segment(aes(x = 0, y = 64, xend = 6, yend = 64), linewidth = 0.5, color = "red", linetype = "dashed") +
geom_segment(aes(x = 6, y = 1, xend = 6, yend = 64), linewidth = 0.5, color = "red", linetype = "dashed") +
geom_segment(aes(x = 0, y = 128, xend = 7, yend = 128), linewidth = 0.5, color = "red", linetype = "dashed") +
geom_segment(aes(x = 7, y = 1, xend = 7, yend = 128), linewidth = 0.5, color = "red", linetype = "dashed") +
geom_rect(aes(xmin = 0, xmax = 7, ymin = 64, ymax = 128), fill = "red", alpha = 0.02) +
geom_rect(aes(xmin = 6, xmax = 7, ymin = 1, ymax = 64), fill = "red", alpha = 0.02) +
geom_segment(aes(x = 0, y = 256, xend = 8, yend = 256), linewidth = 0.5, color = "red", linetype = "dashed") +
geom_segment(aes(x = 8, y = 1, xend = 8, yend = 256), linewidth = 0.5, color = "red", linetype = "dashed") +
geom_segment(aes(x = 0, y = 512, xend = 9, yend = 512), linewidth = 0.5, color = "red", linetype = "dashed") +
geom_segment(aes(x = 9, y = 1, xend = 9, yend = 512), linewidth = 0.5, color = "red", linetype = "dashed") +
geom_rect(aes(xmin = 0, xmax = 9, ymin = 256, ymax = 512), fill = "red", alpha = 0.02) +
geom_rect(aes(xmin = 8, xmax = 9, ymin = 1, ymax = 256), fill = "red", alpha = 0.02) +
theme_bw(base_size = 30)
# Here I have performed the log-transformation of Y on-the-fly, within the ggplot call, but you can also do this by explicitly creating a new log-transformed variable in the dataset
p1 <- ggplot(df, aes(x, y = log2(y))) +
geom_line(linewidth = 1, colour = "deepskyblue") +
geom_segment(aes(x = 5, y = 0, xend = 5, yend = 5), linewidth = 0.5, color = "red", linetype = "dashed") +
geom_segment(aes(x = 0, y = 5, xend = 5, yend = 5), linewidth = 0.5, color = "red", linetype = "dashed") +
scale_x_continuous(limits = c(0, 10), breaks = seq(0, 10, by = 1)) +
scale_y_continuous(limits = c(0, 10), breaks = c(0,2,4,6,8,10)) +
annotate(geom = "text", x = 0.8, y = 5.26, label = "5.00", color="red", size = 8) +
theme_bw(base_size = 20)
p2 <- ggplot(df, aes(x, y = log(y))) +
geom_line(linewidth = 1, colour = "deepskyblue") +
geom_segment(aes(x = 5, y = 0, xend = 5, yend = 3.46), linewidth = 0.5, color = "red", linetype = "dashed") +
geom_segment(aes(x = 0, y = 3.46, xend = 5, yend = 3.46), linewidth = 0.5, color = "red", linetype = "dashed") +
scale_x_continuous(limits = c(0, 10), breaks = seq(0, 10, by = 1)) +
annotate(geom = "text", x = 0.8, y = 3.65, label = "3.46", color="red", size = 8) +
theme_bw(base_size = 20)
p3 <- ggplot(df, aes(x, y = log10(y))) +
geom_line(linewidth = 1, colour = "deepskyblue") +
geom_segment(aes(x = 5, y = 0, xend = 5, yend = 1.51), linewidth = 0.5, color = "red", linetype = "dashed") +
geom_segment(aes(x = 0, y = 1.51, xend = 5, yend = 1.51), linewidth = 0.5, color = "red", linetype = "dashed") +
scale_x_continuous(limits = c(0, 10), breaks = seq(0, 10, by = 1)) +
annotate(geom = "text", x = 0.8, y = 1.6, label = "1.51", color="red", size = 8) +
theme_bw(base_size = 20)
cowplot::plot_grid(p1, p2, p3, labels = c('Base(2) log', 'Natural log', 'Base(10) log'), hjust = c(-0.9,-0.7,-0.6), vjust = 4, ncol = 3, label_size = 20)
#| warning: false
mod_linear <- lm(y ~ x, data = df) |>
tbl_regression(intercept = T)
ggplot(df, aes(x, y)) +
geom_line(linewidth = 1, colour = "deepskyblue") +
geom_smooth(method = "lm", se = F, colour = "black") +
scale_x_continuous(limits = c(0, 10), breaks = seq(0, 10, by = 1)) +
scale_y_continuous(limits = c(1, 1050), breaks = c(1,100,200,300,400,500,600,700,800,900,1000)) +
theme_bw(base_size = 30)
emmeans(mod_linear, ~ X, at(list(X = 5)))
#| warning: false
mod_linear <- lm(y ~ x, data = df)
mod_linear |>
tbl_regression(intercept = T)
ggplot(df, aes(x, y)) +
geom_line(linewidth = 1, colour = "deepskyblue") +
geom_smooth(method = "lm", se = F, colour = "black") +
scale_x_continuous(limits = c(0, 10), breaks = seq(0, 10, by = 1)) +
scale_y_continuous(limits = c(1, 1050), breaks = c(1,100,200,300,400,500,600,700,800,900,1000)) +
theme_bw(base_size = 30)
emmeans(mod_linear, ~ X, at(list(X = 5)))
emmeans(mod_linear, ~ X, at = (list(X = 5)))
emmeans(mod_linear, ~ x, at = (list(x = 5)))
emmeans(mod_linear, ~ x, at = (list(x = 5))) |>
tbl_summary()
emmeans(mod_linear, ~ x, at = (list(x = 5))) |>
kable()
emmeans(mod_linear, ~ x, at = (list(x = 5))) |>
kable(align = "c", digits = 2)
mod_trans <- lm(log2(y) ~ x, data = df)
mod_trans |>
tbl_regression(intercept = T, exponentiate = T)
mod_trans <- lm(log2(y) ~ x, data = df)
mod_trans |>
tbl_regression(intercept = T)
mod_trans <- lm(log(y) ~ x, data = df)
mod_trans |>
tbl_regression(intercept = T)
mod_trans <- lm(log(y) ~ x, data = df)
mod_trans |>
tbl_regression(intercept = T, exponentiate = T)
mod_trans <- lm(log(y) ~ x, data = df)
mod_trans |>
tbl_regression(intercept = T, exponentiate = T)
mod_trans <- lm(log(y) ~ x, data = df)
# mod_trans |>
#   tbl_regression(intercept = T, exponentiate = T)
tbl <- mod_trans |>
tbl_regression()
tbl |>
# remove character version of 95% CI
modify_column_hide(ci) |>
# exponentiate the regression estimates
modify_table_body(
\(x) x |> mutate(across(c(estimate, conf.low, conf.high), exp))
) |>
# merge numeric LB and UB together to display in table
modify_column_merge(pattern = "{conf.low}, {conf.high}", rows = !is.na(estimate)) |>
modify_header(conf.low = "**95% CI**") |>
as_kable() # convert to kable to display on stackoverflow
#| warning: false
mod_trans <- lm(log2(y) ~ x, data = df)
tbl <- mod_trans |>
tbl_regression() # need work around for log transformed response for tbl_regression
tbl |>
# remove character version of 95% CI
modify_column_hide(ci) |>
# exponentiate the regression estimates
modify_table_body(
\(x) x |> mutate(across(c(estimate, conf.low, conf.high), exp))
) |>
# merge numeric LB and UB together to display in table
modify_column_merge(pattern = "{conf.low}, {conf.high}", rows = !is.na(estimate)) |>
modify_header(conf.low = "**95% CI**") |>
as_kable() # convert to kable to display on stackoverflow
#| warning: false
mod_trans <- lm(log(y) ~ x, data = df)
tbl <- mod_trans |>
tbl_regression() # need work around for log transformed response for tbl_regression
tbl |>
# remove character version of 95% CI
modify_column_hide(ci) |>
# exponentiate the regression estimates
modify_table_body(
\(x) x |> mutate(across(c(estimate, conf.low, conf.high), exp))
) |>
# merge numeric LB and UB together to display in table
modify_column_merge(pattern = "{conf.low}, {conf.high}", rows = !is.na(estimate)) |>
modify_header(conf.low = "**95% CI**") |>
as_kable()
emmeans(mod_linear, ~ x, at = (list(x = 5)), type = "response") |>
kable(align = "c", digits = 2)
emmeans(mod_trans, ~ x, at = (list(x = 5)), type = "response") |>
kable(align = "c", digits = 2)
#| warning: false
mod_trans <- lm(log2(y) ~ x, data = df)
tbl <- mod_trans |>
tbl_regression() # need work around for log transformed response for tbl_regression
tbl |>
# remove character version of 95% CI
modify_column_hide(ci) |>
# exponentiate the regression estimates
modify_table_body(
\(x) x |> mutate(across(c(estimate, conf.low, conf.high), exp))
) |>
# merge numeric LB and UB together to display in table
modify_column_merge(pattern = "{conf.low}, {conf.high}", rows = !is.na(estimate)) |>
modify_header(conf.low = "**95% CI**") |>
as_kable()
emmeans(mod_trans, ~ x, at = (list(x = 5)), type = "response") |>
kable(align = "c", digits = 2)
#| warning: false
mod_trans <- lm(log10(y) ~ x, data = df)
tbl <- mod_trans |>
tbl_regression() # need work around for log transformed response for tbl_regression
tbl |>
# remove character version of 95% CI
modify_column_hide(ci) |>
# exponentiate the regression estimates
modify_table_body(
\(x) x |> mutate(across(c(estimate, conf.low, conf.high), exp))
) |>
# merge numeric LB and UB together to display in table
modify_column_merge(pattern = "{conf.low}, {conf.high}", rows = !is.na(estimate)) |>
modify_header(conf.low = "**95% CI**") |>
as_kable()
emmeans(mod_trans, ~ x, at = (list(x = 5)), type = "response") |>
kable(align = "c", digits = 2)
library(simstudy)
library(tidyverse)
library(ggplot2)
library(plotly)
library(lme4)
library(nlme)
library(lmerTest)
library(emmeans)
library(paletteer)
#++++++++++++++++++++++++++++++
# This script looks at 3 items and uses simulated data:
# 1. Compare ANCOVA at the first time point vs a mixed model at all time points. The group difference at the first time point is the same in both models if you include a baseline * time interaction term in the mixed model.
# 2. Compare lmer to nle for exchangeable vs unstructured covariance matrix.
# 3. Plot LS Means when you use a change score as the outcome
# Aside from that, it differs from the first script on this topic in that it only considers change as an outcome.
#++++++++++++++++++++++++++++++
# Generate data and Descriptives ----
# Uses simstudy to generate longitudinal data
# https://cran.r-project.org/web/packages/simstudy/vignettes/longitudinal.html
# Simulate longitudinal data
var <- 5.5^2
tdef <- defData(varname = "group", dist = "binary", formula = 0.5)
tdef <- defData(tdef, varname = "Y0", dist = "normal", formula = 30, variance = 5.5^2)
tdef <- defData(tdef, varname = "Y1", dist = "normal", formula = "Y0 - 5 - 5 * group", variance = var) # decrease both groups by 5 from baseline and a further 5 for group = 1
tdef <- defData(tdef, varname = "Y2", dist = "normal", formula = "Y0 - 10 - 7.5 * group", variance = var) # decrease both groups by 10 from baseline and a further 7.5 for group = 1
tdef <- defData(tdef, varname = "Y3", dist = "normal", formula = "Y0 - 15 - 10 * group", variance = var) # decrease both groups by 15 from baseline and a further 10 for group = 1
# Generate for desired n
# set.seed(85748477)
dtTrial <- genData(60, tdef)
head(dtTrial)
dtTrial <- addPeriods(dtTrial, nPeriods = 4, idvars = "id", timevars = c("Y0", "Y1", "Y2", "Y3"), timevarName = "Y")
dtTrial <- dtTrial |>
arrange(id)
head(dtTrial, 20)
# Means at each time point
dtTrial |>
group_by(group, period) |>
summarise(mean(Y), sd(Y))
# Pull out baseline
dtTime <- dtTrial |>
rename(time = period)
dtTime$time <- factor(dtTime$time)
dtTime$timeID <- NULL
dtTime <- dtTime |>
group_by(id) |>
mutate(base = first(Y))
dtTime <- dtTime |>
filter(time != 0)
head(dtTime, 20)
# Calculate change scores
dtTime$change <- dtTime$Y - dtTime$base
head(dtTime, 20)
# Means at each time point
dtTime |>
group_by(group, time) |>
summarise(mean(change), sd(change))
dtTime$group <- factor(dtTime$group)
# Mean Profile Plot
ggplot(data = dtTrial, aes(x = period, y = Y, group = group)) +
geom_point(aes(color = factor(group)), size = 3, position = position_jitter(w = 0.2)) +
stat_summary(aes(group = group), color = "black", geom = "point", fun = mean, size = 5) +
stat_summary(aes(group = group, color = factor(group)), geom = "line", fun = mean, size = 1) +
stat_summary(fun = mean, geom = "label", position = position_jitter(w = 0.1), size = 5, aes(group = group, fill = factor(group), label = round(..y.., 1))) +
theme_bw(base_size = 30) +
xlab("Time") + ylab("HAM D-17") +
guides(color = guide_legend(title = "Group")) +
guides(fill = F) +
scale_y_continuous(breaks = seq(0,50,5), limits = c(0,50)) # Because I have put this limit on the y axis as values shouldn't be lower than 0, the mean that summary_stat calculates for the treatment group at the final time point is higher then it should be because it only calculates it on the values within the limits. The difference at the final time point should be 10 and it's lower. I didn't realise this, so just keep in mind...
# Individual Boxplots
# I want to be able to label these with individual id's within each boxplot but haven't yet found a way...
ggplot(dtTrial, aes(y = Y, group = id, color = factor(group))) +
geom_boxplot(aes(fill = factor(group)), color = "black") +
facet_wrap(~ group)
# Individual Trajectories
ggplot(dtTrial, aes(x = period, y = Y, color = factor(group))) +
geom_point(shape = 19) +
facet_wrap(~id, dir = 'h', ncol = 4) +
geom_line() +
theme_bw(base_size = 15) +
ggtitle("Individual Trajectories") +
theme(plot.title = element_text(size = 25))
#++++++++++++++++++++++++++++++
# 1. Compare ANCOVA at the first time point vs a mixed model at all time points ----
# Look at the group1 effect - it is the same in the first and third models but not the second
# ANCOVA of the first time point
summary(lm(change ~ group + base, data = subset(dtTime, time == 1)))
# Mixed model of all time points - effect of baseline same at all time points
summary(lmer(change ~ group*time + base + (1|id), data = dtTime))
# Mixed model of all time points - effect of baseline allowed to vary at different time points
summary(lmer(change ~ group*time + base*time + (1|id), data = dtTime))
#++++++++++++++++++++++++++++++
# 2. Compare lmer to nle for exchangeable vs unstructured covariance matrix ----
# 17/10/2023 - The new mmrm package might even be better. It is more flexible than nlme as it allows an unstructured covariance matrix to be fitted separately by group
# https://thestatsgeek.com/2022/10/31/mixed-models-repeated-measures-mmrm-package-for-r/
# Good source of info for nlme:
# http://staff.pubhealth.ku.dk/~jufo/courses/rm2018/nlmePackage.pdf
# lmer
m1 <- lmer(change ~ group*time + base + (1|id), data = dtTime)
summary(m1)
# nlme exchangeable cov mat (same as lmer)
library(nlme)
m2 <- gls(change ~ group*time + base, correlation = corCompSymm(form =~ 1|id), data = dtTime)
summary(m2)
# Extract the residual variance-covariance matrix for the first individual
Sigma <- getVarCov(m2, individual = 1)
Sigma
# Rescale it into a correlation matrix
cov2cor(Sigma)
# Estimated correlation parameter
summary(m2$modelStruct$corStruct)
# nlme unstructured cov mat
m3 <- gls(change ~ group*time + base, correlation = corSymm(form =~ as.numeric(time)|id), weights = varIdent(form =~ 1|time), data = dtTime)
summary(m3)
# Extract the residual variance-covariance matrix for the first individual
Sigma <- getVarCov(m3, individual = 1)
Sigma
# Rescale it into a correlation matrix
cov2cor(Sigma)
# Estimated correlation parameter
summary(m3$modelStruct$corStruct)
# mmrm
library(mmrm)
dtTime$id <- factor(dtTime$id) # it looks like id, group and time need to be factors
m4 <- mmrm(change ~ group*time + base + us(time|id), data = dtTime)
summary(m4)
#++++++++++++++++++++++++++++++
# 3. Plot LS Means when you use a change score as the outcome ----
# lmer
m1_emm <- emmeans(m1, ~ group + time)
emmip(m1, group ~ time)
# nlme
m3_emm <- emmeans(m3, ~ group + time)
emmip(m3, group ~ time)
# mmrm
m4_emm <- emmeans(m4, ~ group + time)
emmip(m4, group ~ time)
m3_emm <- m3_emm |>
data.frame() |>
select(group, time, emmean, lower.CL, upper.CL)
# Create two additional rows for emmeans change = 0 at baseline
m3_emm <- rbind(expand.grid(group = c(0,1), time = 0, emmean = 0, lower.CL = 0, upper.CL = 0),
m3_emm)
m3_emm
emmip(m4_emm)
emmip(m4, group ~ time)
emmip(m4, group ~ time)
emmip(m3, group ~ time)
emmeans(m4, ~ group + time)
# Basically we want a plot that includes the baseline score and for a change outcome, the baseline will be 0. So, instead of using emmip, construct the plot using ggplot.
m3_emm <- m3_emm |>
data.frame() |>
select(group, time, emmean, lower.CL, upper.CL)
# Create two additional rows for emmeans change = 0 at baseline
m3_emm <- rbind(expand.grid(group = c(0,1), time = 0, emmean = 0, lower.CL = 0, upper.CL = 0),
m3_emm)
m3_emm$group <- factor(m3_emm$group)
m3_emm$time <- as.numeric(m3_emm$time)
# Plot
ggplot(m3_emm, aes(time, emmean)) +
geom_point(aes(color = group), size = 3) +
geom_line(aes(color = group), linewidth = 0.8) +
geom_errorbar(aes(ymax = upper.CL, ymin = lower.CL, color = group), width = 0.1) +
scale_color_paletteer_d("ggsci::category20_d3") +
labs(x = "Time", y = "Emmean") +
scale_y_continuous(limits = c(-30,0), breaks = seq(-30,0, by = 5)) +
theme_classic(base_size = 20)
View(dtTime)
m4_emm <- emmeans(m4, ~ group + time + base)
emmip(m4, group ~ time + base)
m4_emm <- emmeans(m4, ~ group + time)
emmip(m4, group ~ time)
(m4_emm <- emmeans(m4, ~ group + time))
emmip(m4, group ~ time)
(m4_emm <- emmeans(m4, ~ group + time + base))
emmip(m4, group ~ time + base)
m4 <- lmer(change ~ group*time + base + (1|id), data = dtTime)
summary(m4)
str(dtTime)
emmeans(m4, ~ group + time + base))
m4 <- lmer(change ~ group*time + base + (1|id), data = dtTime)
summary(m4)
(m4_emm <- emmeans(m4, ~ group + time + base))
emmip(m4, group ~ time + base)
m1 <- lmer(change ~ group*time + base + (1|id), data = dtTime)
summary(m1)
(m1_emm <- emmeans(m1, ~ group + time))
emmip(m1, group ~ time)
(m1_emm <- emmeans(m1, ~ group + time + base))
m1 <- lmer(change ~ group*time + group*base + (1|id), data = dtTime)
summary(m1)
(m1_emm <- emmeans(m1, ~ group + time + base))
(m1_emm <- emmeans(m1, ~ group * time + base))
(m1_emm <- emmeans(m1, ~ group * time * base))
(m1_emm <- emmeans(m1, ~ group + time | base))
m1 <- lmer(change ~ group*time + time*base + (1|id), data = dtTime)
summary(m1)
(m1_emm <- emmeans(m1, ~ group + time | base))
(m1_emm <- emmeans(m1, ~ group | time + base))
View(dtTime)
m1 <- lmer(Y ~ group*time  + (1|id), data = dtTime)
summary(m1)
(m1_emm <- emmeans(m1, ~ group + time))
emmip(m1, group ~ time)
m1 <- lmer(Y ~ group*time  + base + (1|id), data = dtTime)
summary(m1)
m1 <- lmer(change ~ group*time  + base + (1|id), data = dtTime)
summary(m1)
-0.916+1
str(dtTime)
(m1_emm <- emmeans(m1, ~ group + time))
emmip(m1, group ~ time)
(m1_emm <- emmeans(m1, ~ group + time + base))
emmip(m1, group ~ time + base)
m1 <- lm(change ~ group*time  + base, data = dtTime)
summary(m1)
(m1_emm <- emmeans(m1, ~ group + time + base))
emmip(m1, group ~ time + base)
#| message: false
library(nycflights13)
library(tidyverse)
dat <- flights |>
select(year:day, hour, origin, dest, tailnum, carrier) |>
mutate(month = if_else(nchar(month) == 1, paste0("0",month), as.character(month)),
day = if_else(nchar(day) == 1, paste0("0",day), as.character(day))) |>
unite("date", year:day, sep = "/", remove = T) |>
mutate(date = lubridate::ymd(date)) |>
filter(hour >= 8) |>
anti_join(planes, by = "tailnum") |>
count(tailnum, sort = TRUE)
