#| label: tmerge
# Create subset of data selecting relevant variables
jasa_subset <- jasa |>
select(id, transplant, wait.time, futime, fustat)
#| label: load data
#| message: false
#| warning: false
library(survival)
library(survminer)
library(gtsummary)
library(dplyr)
data(heart, package = "survival")
head(jasa)
#| label: survival trajectories
# Create 'id' variable
jasa$id <- seq(1:dim(jasa)[1])
# Replace wait.time with futime if didn't undergo transplant
jasa$wait.time[is.na(jasa$wait.time)] <- jasa$futime[is.na(jasa$wait.time)]
# Plot
jasa |>
ggplot(aes(x = id, y = futime)) +
geom_linerange(aes(ymin = 0, ymax = wait.time), color = "#E7B800", linewidth = 1) +
geom_linerange(aes(ymin = wait.time, ymax = futime), color = "#2E9FDF", linewidth = 1) +
geom_point(aes(shape = factor(fustat)), stroke = 1, cex = 1, color = "black") +
scale_shape_manual(values = c(1, 3), labels = c("Censored", "Died"), name = "Outcome") +
annotate("text", x = 95, y = 1400, label = "Observation time = yellow - untransplanted", size = 5, color = "#E7B800") +
annotate("text", x = 92, y = 1380, label = "Observation time = blue - post-transplant", size = 5, color = "#2E9FDF") +
ggtitle("Survival Trajectories for Heart Transplant Patients") +
ylab("Time (days)") +
xlab("Patient Number") +
coord_flip() +
theme_bw(base_size = 20) +
theme(axis.text.y = element_text(size = 15))
#| label: naive KM curve
fit_naive <- survfit(Surv(futime, fustat) ~ transplant, data = jasa)
ggsurvplot(fit_naive,
risk.table = TRUE,
risk.table.col = "strata",
linetype = "strata",
surv.median.line = "hv",
ggtheme = theme_bw(base_size = 20),
palette = c("#E7B800", "#2E9FDF"))
#| label: naive Cox
mod_naive <- coxph(Surv(futime, fustat) ~ transplant, data = jasa)
tbl_regression(mod_naive, exp = T)
#| label: tmerge
# Create subset of data selecting relevant variables
jasa_subset <- jasa |>
select(id, transplant, wait.time, futime, fustat)
jasa_cp <- tmerge(data1 = jasa_subset |> select(id, futime, fustat),
data2 = jasa_subset |> select(id, futime, fustat, wait.time, transplant),
id = id,
death = event(futime, fustat),
transplant = tdc(transplant))
#| label: tmerge
# Create subset of data selecting relevant variables
jasa_subset <- jasa |>
select(id, transplant, wait.time, futime, fustat)
jasa_cp <- tmerge(data1 = jasa_subset |> select(id, futime, fustat),
data2 = jasa_subset |> select(id, futime, fustat, wait.time, transplant),
id = id,
death = event(futime, fustat),
a = tdc(transplant))
View(jasa)
jasa_subset$futime[jasa_subset$futime == 0] <- 0.5
jasa_cp <- tmerge(data1 = jasa_subset |> select(id, futime, fustat),
data2 = jasa_subset |> select(id, futime, fustat, wait.time, transplant),
id = id,
death = event(futime, fustat),
transplant = tdc(transplant))
View(jasa_cp)
#| label: tmerge
# Create subset of data selecting relevant variables
jasa_subset <- jasa |>
select(id, transplant, wait.time, futime, fustat)
jasa_subset$futime[jasa_subset$futime == 0] <- 0.5
jasa_cp <- tmerge(data1 = jasa_subset |> select(id, futime, fustat),
data2 = jasa_subset |> select(id, futime, fustat, wait.time, transplant),
a = id,
death = event(futime, fustat),
b = tdc(transplant))
#| label: load data
#| message: false
#| warning: false
library(survival)
library(survminer)
library(gtsummary)
library(dplyr)
data(heart, package = "survival")
head(jasa)
#| label: survival trajectories
# Create 'id' variable
jasa$id <- seq(1:dim(jasa)[1])
# Replace wait.time with futime if didn't undergo transplant
jasa$wait.time[is.na(jasa$wait.time)] <- jasa$futime[is.na(jasa$wait.time)]
# Plot
jasa |>
ggplot(aes(x = id, y = futime)) +
geom_linerange(aes(ymin = 0, ymax = wait.time), color = "#E7B800", linewidth = 1) +
geom_linerange(aes(ymin = wait.time, ymax = futime), color = "#2E9FDF", linewidth = 1) +
geom_point(aes(shape = factor(fustat)), stroke = 1, cex = 1, color = "black") +
scale_shape_manual(values = c(1, 3), labels = c("Censored", "Died"), name = "Outcome") +
annotate("text", x = 95, y = 1400, label = "Observation time = yellow - untransplanted", size = 5, color = "#E7B800") +
annotate("text", x = 92, y = 1380, label = "Observation time = blue - post-transplant", size = 5, color = "#2E9FDF") +
ggtitle("Survival Trajectories for Heart Transplant Patients") +
ylab("Time (days)") +
xlab("Patient Number") +
coord_flip() +
theme_bw(base_size = 20) +
theme(axis.text.y = element_text(size = 15))
#| label: naive KM curve
fit_naive <- survfit(Surv(futime, fustat) ~ transplant, data = jasa)
ggsurvplot(fit_naive,
risk.table = TRUE,
risk.table.col = "strata",
linetype = "strata",
surv.median.line = "hv",
ggtheme = theme_bw(base_size = 20),
palette = c("#E7B800", "#2E9FDF"))
#| label: naive Cox
mod_naive <- coxph(Surv(futime, fustat) ~ transplant, data = jasa)
tbl_regression(mod_naive, exp = T)
#| label: tmerge
# Create subset of data selecting relevant variables
jasa_subset <- jasa |>
select(id, transplant, wait.time, futime, fustat)
jasa_subset$futime[jasa_subset$futime == 0] <- 0.5
jasa_cp <- tmerge(data1 = jasa_subset |> select(id, futime, fustat),
data2 = jasa_subset |> select(id, futime, fustat, wait.time, transplant),
a = id,
death = event(futime, fustat),
b = tdc(transplant))
#| label: tmerge
# Create subset of data selecting relevant variables
jasa_subset <- jasa |>
select(id, transplant, wait.time, futime, fustat)
jasa_subset$futime[jasa_subset$futime == 0] <- 0.5
jasa_cp <- tmerge(data1 = jasa_subset |> select(id, futime, fustat),
data2 = jasa_subset |> select(id, futime, fustat, wait.time, transplant),
id = id,
death = event(futime, fustat),
transplant = tdc(transplant))
View(jasa_cp)
View(jasa)
View(jasa_subset)
str(jasa_subset
)
#| label: tmerge
# Create subset of data selecting relevant variables
jasa_subset <- jasa |>
select(id, transplant, wait.time, futime, fustat)
jasa_subset$futime[jasa_subset$futime == 0] <- 0.5
jasa_cp <- tmerge(data1 = jasa_subset |> select(id, futime, fustat),
data2 = jasa_subset |> select(id, wait.time, transplant),
id = id,
death = event(futime, fustat),
transplant = tdc(transplant))
#| label: tmerge
# Create subset of data selecting relevant variables
jasa_subset <- jasa |>
select(id, transplant, wait.time, futime, fustat)
jasa_subset$futime[jasa_subset$futime == 0] <- 0.5
jasa_cp <- tmerge(data1 = jasa_subset |> select(id, futime, fustat),
data2 = jasa_subset |> select(id, futime, wait.time, transplant),
id = id,
death = event(futime, fustat),
transplant = tdc(transplant))
#| label: tmerge
# Create subset of data selecting relevant variables
jasa_subset <- jasa |>
select(id, transplant, wait.time, futime, fustat)
jasa_subset$futime[jasa_subset$futime == 0] <- 0.5
jasa_cp <- tmerge(data1 = jasa_subset |> select(id, futime, fustat),
data2 = jasa_subset |> select(id, futime, fustat, wait.time, transplant),
id = id,
death = event(futime, fustat),
transplant = tdc(transplant))
View(jasa1)
#| label: tmerge
# Create subset of data selecting relevant variables
jasa_subset <- jasa |>
select(id, transplant, wait.time, futime, fustat)
jasa_subset$futime[jasa_subset$futime == 0] <- 0.5
jasa_cp <- tmerge(data1 = jasa_subset |> select(id, futime, fustat),
data2 = jasa_subset |> select(id, futime, fustat, wait.time, transplant),
id = id,
death = event(futime, fustat),
transplant = tdc(wait.time))
#| label: tmerge
# Create subset of data selecting relevant variables
jasa_subset <- jasa |>
select(id, transplant, wait.time, futime, fustat)
jasa_subset$futime[jasa_subset$futime == 0] <- 0.5
jasa_cp <- tmerge(data1 = jasa_subset |> select(id, futime, fustat),
data2 = jasa_subset |> select(id, futime, fustat, wait.time, transplant),
id = id,
death = event(futime, fustat),
transplant = tdc(wait.time)) |>
select(-c(futime, fustat))
View(jasa1)
#| label: correct Cox
mod_correct <- coxph(Surv(start, stop, event) ~ transplant, data = jasa1)
tbl_regression(mod_correct, exp = T)
mod_correct2 <- coxph(Surv(tstart, tstop, death) ~ transplant, data = jasa_cp)
tbl_regression(mod_correct2, exp = T)
#| label: correct KM curve
fit_correct <- survfit(Surv(tstart, tstop, death) ~ transplant, data = jasa_cp)
#| label: load data
#| message: false
#| warning: false
library(survival)
library(survminer)
library(gtsummary)
library(dplyr)
data(heart, package = "survival")
head(jasa)
#| label: survival trajectories
# Create 'id' variable
jasa$id <- seq(1:dim(jasa)[1])
# Replace wait.time with futime if didn't undergo transplant
jasa$wait.time[is.na(jasa$wait.time)] <- jasa$futime[is.na(jasa$wait.time)]
# Plot
jasa |>
ggplot(aes(x = id, y = futime)) +
geom_linerange(aes(ymin = 0, ymax = wait.time), color = "#E7B800", linewidth = 1) +
geom_linerange(aes(ymin = wait.time, ymax = futime), color = "#2E9FDF", linewidth = 1) +
geom_point(aes(shape = factor(fustat)), stroke = 1, cex = 1, color = "black") +
scale_shape_manual(values = c(1, 3), labels = c("Censored", "Died"), name = "Outcome") +
annotate("text", x = 95, y = 1400, label = "Observation time = yellow - untransplanted", size = 5, color = "#E7B800") +
annotate("text", x = 92, y = 1380, label = "Observation time = blue - post-transplant", size = 5, color = "#2E9FDF") +
ggtitle("Survival Trajectories for Heart Transplant Patients") +
ylab("Time (days)") +
xlab("Patient Number") +
coord_flip() +
theme_bw(base_size = 20) +
theme(axis.text.y = element_text(size = 15))
#| label: naive KM curve
fit_naive <- survfit(Surv(futime, fustat) ~ transplant, data = jasa)
ggsurvplot(fit_naive,
risk.table = TRUE,
risk.table.col = "strata",
linetype = "strata",
surv.median.line = "hv",
ggtheme = theme_bw(base_size = 20),
palette = c("#E7B800", "#2E9FDF"))
#| label: naive Cox
mod_naive <- coxph(Surv(futime, fustat) ~ transplant, data = jasa)
tbl_regression(mod_naive, exp = T)
#| label: tmerge
# Create subset of data selecting relevant variables
jasa_subset <- jasa |>
select(id, wait.time, futime, fustat, transplant)
# Can't have an end time of 0 (one obs) - change this to 0.5
jasa_subset$futime[jasa_subset$futime == 0] <- 0.5
# Create dataframe in counting process format
jasa_cp <- tmerge(data1 = jasa_subset |> select(id, futime, fustat),
data2 = jasa_subset |> select(id, futime, fustat, wait.time, transplant),
id = id,
death = event(futime, fustat),
transplant = tdc(wait.time)) |>
select(-c(futime, fustat))
#| label: view original
head(jasa_subset)
#| label: view cp
head(jasa_cp, 8)
#| label: correct KM curve
fit_correct <- survfit(Surv(tstart, tstop, death) ~ transplant, data = jasa_cp)
ggsurvplot(fit_correct,
risk.table = TRUE,
risk.table.col = "strata",
linetype = "strata",
surv.median.line = "hv",
ggtheme = theme_bw(base_size = 20),
palette = c("#E7B800", "#2E9FDF"))
View(jasa)
View(jasa_subset)
library(simstudy)
library(tidyverse)
library(ggplot2)
library(plotly)
library(lme4)
library(lmerTest)
# Uses simstudy to generate longitudinal data
# https://cran.r-project.org/web/packages/simstudy/vignettes/longitudinal.html
# Simulate longitudinal data
var <- 5.5^2
tdef <- defData(varname = "group", dist = "binary", formula = 0.5)
tdef <- defData(tdef, varname = "Y0", dist = "normal", formula = 30, variance = 5.5^2)
tdef <- defData(tdef, varname = "Y1", dist = "normal", formula = "Y0 - 5 - 5 * group", variance = var) # decrease both groups by 5 from baseline and a further 5 for group = 1
tdef <- defData(tdef, varname = "Y2", dist = "normal", formula = "Y0 - 10 - 7.5 * group", variance = var) # decrease both groups by 10 from baseline and a further 7.5 for group = 1
tdef <- defData(tdef, varname = "Y3", dist = "normal", formula = "Y0 - 15 - 10 * group", variance = var) # decrease both groups by 15 from baseline and a further 10 for group = 1
# Generate for desired n
# set.seed(85748477)
dtTrial <- genData(60, tdef)
head(dtTrial)
dtTrial <- addPeriods(dtTrial, nPeriods = 4, idvars = "id", timevars = c("Y0", "Y1", "Y2", "Y3"), timevarName = "Y")
dtTrial <- dtTrial |>
arrange(id)
head(dtTrial, 20)
# Means at each time point
dtTrial |>
group_by(group, period) |>
summarise(mean(Y), sd(Y))
# Pull out baseline
dtTime <- dtTrial |>
rename(time = period)
dtTime$time <- factor(dtTime$time)
dtTime$timeID <- NULL
dtTime <- dtTime |>
group_by(id) |>
mutate(base = first(Y))
dtTime <- dtTime |>
filter(time != 0)
head(dtTime, 20)
# Calculate change scores
dtTime$change <- dtTime$Y - dtTime$base
head(dtTime, 20)
# Means at each time point
dtTime |>
group_by(group, time) |>
summarise(mean(change), sd(change))
dtTime$group <- factor(dtTime$group)
# ANCOVA of the first time point
summary(lm(change ~ group + base, data = subset(dtTime, time == 1)))
# Mixed model of all time points - effect of baseline same at all time points
summary(lmer(change ~ group*time + base + (1|id), data = dtTime))
# Mixed model of all time points - effect of baseline allowed to vary at different time points
summary(lmer(change ~ group*time + base*time + (1|id), data = dtTime))
# Mean Profile Plot
ggplot(data = dtTrial, aes(x = period, y = Y, group = group)) +
geom_point(aes(color = factor(group)), size = 3, position = position_jitter(w = 0.2)) +
stat_summary(aes(group = group), color = "black", geom = "point", fun = mean, size = 5) +
stat_summary(aes(group = group, color = factor(group)), geom = "line", fun = mean, size = 1) +
stat_summary(fun = mean, geom = "label", position = position_jitter(w = 0.1), size = 5, aes(group = group, fill = factor(group), label = round(..y.., 1))) +
theme_bw(base_size = 30) +
xlab("Time") + ylab("HAM D-17") +
guides(color = guide_legend(title = "Group")) +
guides(fill = F) +
scale_y_continuous(breaks = seq(0,50,5), limits = c(0,50)) # Because I have put this limit on the y axis as values shouldn't be lower than 0, the mean that summary_stat calculates for the treatment group at the final time point is higher then it should be because it only calculates it on the values within the limits. The difference at the final time point should be 10 and it's lower. I didn't realise this, so just keep in mind...
# Individual Boxplots
# I want to be able to lable these with individual id's within each boxplot but haven't yet found a way...
ggplot(dtTrial, aes(y = Y, group = id, color = factor(group))) +
geom_boxplot(aes(fill = factor(group)), color = "black") +
facet_wrap(~ group)
# Individual Trajectories
ggplot(dtTrial, aes(x = period, y = Y, color = factor(group))) +
geom_point(shape = 19) +
facet_wrap(~id, dir = 'h', ncol = 4) +
geom_line() +
theme_bw(base_size = 15) +
ggtitle("Individual Trajectories") +
theme(plot.title = element_text(size = 25))
# Mean Profile Plot
(p1 <- ggplot(data = dtTrial, aes(x = period, y = Y, group = group)) +
geom_point(aes(color = factor(group)), size = 3, position = position_jitter(w = 0.2)) +
stat_summary(aes(group = group), color = "black", geom = "point", fun = mean, size = 5) +
stat_summary(aes(group = group, color = factor(group)), geom = "line", fun = mean, size = 1) +
stat_summary(fun = mean, geom = "label", position = position_jitter(w = 0.1), size = 5, aes(group = group, fill = factor(group), label = round(..y.., 1))) +
theme_bw(base_size = 30) +
xlab("Time") + ylab("HAM D-17") +
guides(color = guide_legend(title = "Group")) +
guides(fill = F) +
scale_y_continuous(breaks = seq(0,50,5), limits = c(0,50))) # Because I have put this limit on the y axis as values shouldn't be lower than 0, the mean that summary_stat calculates for the treatment group at the final time point is higher then it should be because it only calculates it on the values within the limits. The difference at the final time point should be 10 and it's lower. I didn't realise this, so just keep in mind...
plotly::ggplotly(p1)
(p2 <- ggplot(dtTrial, aes(y = Y, group = id, color = factor(group))) +
geom_boxplot(aes(fill = factor(group)), color = "black") +
facet_wrap(~ group))
plotly::ggplotly(p2)
# Individual Boxplots
# I want to be able to lable these with individual id's within each boxplot but haven't yet found a way...
(p2 <- ggplot(dtTrial, aes(y = Y, group = id, color = factor(group))) +
geom_boxplot(aes(fill = factor(group)), color = "black") +
facet_wrap(~ group))
plotly::ggplotly(p2)
#|: plotly
library(lme4)
library(ggplot2)
library(plotly)
# Load data
data("sleepstudy")
# Model
mod <- lmer(Reaction ~ Days + (Days | Subject), data = sleepstudy)
View(sleepstudy)
library(lme4)
library(ggplot2)
library(plotly)
# Load data
data("sleepstudy")
# Model
mod <- lmer(Reaction ~ Days + (Days | Subject), data = sleepstudy)
# Predict
sleepstudy$mod_pred_fix <- predict(mod, re.form = NA) # predict fixed effects
sleepstudy$mod_pred_ran <- predict(mod) # predict random effects
# Plot
p <- sleepstudy |>
ggplot(aes(x = Days, y = Reaction)) +
geom_line(aes(x = Days, y = mod_pred_ran, group = Subject, color = factor(Subject))) +
geom_line(aes(x = Days, y = mod_pred_fix), linewidth = 2, color = "blue") +
geom_point(alpha = 0.5) +
xlab("Time (days)") + ylab("Reaction Time (ms)") +
theme_bw(base_size = 15)
# Model
mod <- lmer(Reaction ~ Days + (Days | Subject), data = sleepstudy)
# Predict
sleepstudy$mod_pred_fix <- predict(mod, re.form = NA) # predict fixed effects
sleepstudy$mod_pred_ran <- predict(mod) # predict random effects
# Plot
p <- sleepstudy |>
ggplot(aes(x = Days, y = Reaction)) +
geom_line(aes(x = Days, y = mod_pred_ran, group = Subject, color = factor(Subject))) +
geom_line(aes(x = Days, y = mod_pred_fix), linewidth = 2, color = "blue") +
geom_point(alpha = 0.5) +
xlab("Time (days)") + ylab("Reaction Time (ms)") +
theme_bw(base_size = 15)
p
# Plot
p <- sleepstudy |>
ggplot(aes(x = Days, y = Reaction)) +
geom_line(aes(x = Days, y = mod_pred_ran, group = Subject, color = factor(Subject))) +
geom_line(aes(x = Days, y = mod_pred_fix), linewidth = 2, color = "blue") +
geom_point(alpha = 0.5) +
xlab("Time (days)") + ylab("Reaction Time (ms)") +
theme_bw(base_size = 15)
# Plot
p <- sleepstudy |>
ggplot(aes(x = Days, y = Reaction)) +
geom_line(aes(x = Days, y = mod_pred_ran, group = Subject, color = factor(Subject))) +
geom_line(aes(x = Days, y = mod_pred_fix), linewidth = 2, color = "blue") +
geom_point(alpha = 0.5) +
xlab("Time (days)") + ylab("Reaction Time (ms)") +
guides(color = "none") +
theme_bw(base_size = 15)
p
ggplotly(p)
# Plot
p <- sleepstudy |>
ggplot(aes(x = Days, y = Reaction)) +
geom_line(aes(x = Days, y = mod_pred_ran, group = Subject, color = factor(Subject))) +
geom_line(aes(x = Days, y = mod_pred_fix), linewidth = 2, color = "blue") +
geom_point(aes(group = Subject), alpha = 0.5) +
xlab("Time (days)") + ylab("Reaction Time (ms)") +
guides(color = "none") +
theme_bw(base_size = 15)
ggplotly(p)
# Plot
p <- sleepstudy |>
ggplot(aes(x = Days, y = Reaction)) +
geom_line(aes(x = Days, y = mod_pred_ran, group = Subject, color = factor(Subject))) +
geom_line(aes(x = Days, y = mod_pred_fix), linewidth = 2, color = "blue") +
geom_point(aes(group = Subject, color = factor(Subject)), alpha = 0.5) +
xlab("Time (days)") + ylab("Reaction Time (ms)") +
guides(color = "none") +
theme_bw(base_size = 15)
ggplotly(p)
#| label: setup
#| message: false
library(lme4)
library(ggplot2)
library(plotly)
# Load data
data("sleepstudy")
# Model
mod <- lmer(Reaction ~ Days + (Days | Subject), data = sleepstudy)
# Predict
sleepstudy$mod_pred_fix <- predict(mod, re.form = NA) # predict fixed effects
sleepstudy$mod_pred_ran <- predict(mod) # predict random effects
# View data
head(sleepstudy, 10)
#| label: plotly
# Plot
p <- sleepstudy |>
ggplot(aes(x = Days, y = Reaction)) +
geom_line(aes(x = Days, y = mod_pred_ran, group = Subject, color = factor(Subject))) +
geom_line(aes(x = Days, y = mod_pred_fix), linewidth = 2, color = "blue") +
geom_point(aes(group = Subject, color = factor(Subject)), alpha = 0.5) +
xlab("Time (days)") + ylab("Reaction Time (ms)") +
guides(color = "none") +
theme_bw(base_size = 15)
ggplotly(p)
#| label: plotly
# Plot
p <- sleepstudy |>
ggplot(aes(x = Days, y = Reaction, color = factor(Subject))) +
geom_line(aes(x = Days, y = mod_pred_ran, group = Subject)) +
geom_line(aes(x = Days, y = mod_pred_fix), linewidth = 2, color = "blue") +
geom_point(aes(group = Subject), alpha = 0.5) +
xlab("Time (days)") + ylab("Reaction Time (ms)") +
guides(color = "none") +
theme_bw(base_size = 15)
ggplotly(p)
#| label: plotly
# Plot
p <- sleepstudy |>
ggplot(aes(x = Days, y = Reaction, color = factor(Subject))) +
geom_line(aes(x = Days, y = mod_pred_ran)) +
geom_line(aes(x = Days, y = mod_pred_fix), linewidth = 2, color = "blue") +
geom_point(aes(group = Subject), alpha = 0.5) +
xlab("Time (days)") + ylab("Reaction Time (ms)") +
guides(color = "none") +
theme_bw(base_size = 15)
ggplotly(p)
#| label: plotly
# Plot
p <- sleepstudy |>
ggplot(aes(x = Days, y = Reaction, color = factor(Subject))) +
geom_line(aes(x = Days, y = mod_pred_ran)) +
geom_line(aes(x = Days, y = mod_pred_fix), linewidth = 2, color = "blue") +
geom_point(alpha = 0.5) +
xlab("Time (days)") + ylab("Reaction Time (ms)") +
guides(color = "none") +
theme_bw(base_size = 15)
ggplotly(p)
