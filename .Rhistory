vfit2 <- coxph(Surv(tstart, time, status) ~ trt + trt:nsk(time, df = 3), vdata2)
summary(vfit2)
# Create newdat df
tdata <- expand.grid(trt = 1, time = seq(1, 1000, length = 100))
# Predict HR and plot
yhat <- predict(vfit2, newdata = tdata, se.fit = TRUE, type = "lp", reference = "zero")
tdata$fit <-  yhat$fit
ggplot(tdata, aes(x = time, y = fit)) +
geom_line(col = 'blue') +
#scale_y_continuous(trans = scales::log_trans()) +
#scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, by = 50)) +
#scale_y_continuous(limits = c(0, 2), breaks = seq(0, 2, by = 0.25)) +
xlab("Observation Time") + ylab("HR") + ggtitle("Cox Model - Spline trt:time interaction") +
theme_bw(base_size = 15)
library(survival)
library(tidyverse)
# Load veteran data from survival package
vdata1 <-  veteran
# Make treatment variable
vdata1$trt <-  as.numeric(vdata1$trt) - 1
vdata1$id <-  seq(1:dim(vdata1)[1])
vdata1 <-  vdata1 |>
select(id, everything())
# Fit basic model with treatment as only predictor
vfit1 <- coxph(Surv(time, status) ~ trt, vdata1)
summary(vfit1)
# Now refit model with trt:time interaction
# Split time at every event and create vector of unique event times
event_times <- sort(unique(with(vdata1, time[status == 1])))
# Create new df in CP form with splits at every event time
vdata2 <- survSplit(Surv(time, status) ~., vdata1, cut = event_times)
# Model
vfit2 <- coxph(Surv(tstart, time, status) ~ trt + trt:nsk(time, df = 3), vdata2)
summary(vfit2)
# Create newdat df
tdata <- expand.grid(trt = 1, time = seq(1, 1000, length = 100))
# Predict HR and plot
yhat <- predict(vfit2, newdata = tdata, se.fit = TRUE, type = "lp", reference = "zero")
tdata$fit <-  yhat$fit
ggplot(tdata, aes(x = time, y = fit)) +
geom_line(col = 'blue') +
scale_y_continuous(trans = scales::log_trans()) +
#scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, by = 50)) +
#scale_y_continuous(limits = c(0, 2), breaks = seq(0, 2, by = 0.25)) +
xlab("Observation Time") + ylab("HR") + ggtitle("Cox Model - Spline trt:time interaction") +
theme_bw(base_size = 15)
library(survival)
library(tidyverse)
# Load veteran data from survival package
vdata1 <-  veteran
# Make treatment variable
vdata1$trt <-  as.numeric(vdata1$trt) - 1
vdata1$id <-  seq(1:dim(vdata1)[1])
vdata1 <-  vdata1 |>
select(id, everything())
# Fit basic model with treatment as only predictor
vfit1 <- coxph(Surv(time, status) ~ trt, vdata1)
summary(vfit1)
# Now refit model with trt:time interaction
# Split time at every event and create vector of unique event times
event_times <- sort(unique(with(vdata1, time[status == 1])))
# Create new df in CP form with splits at every event time
vdata2 <- survSplit(Surv(time, status) ~., vdata1, cut = event_times)
# Model
vfit2 <- coxph(Surv(tstart, time, status) ~ trt + trt:nsk(time, df = 3), vdata2)
summary(vfit2)
# Create newdat df
tdata <- expand.grid(trt = 1, time = seq(1, 1000, length = 100))
# Predict HR and plot
yhat <- predict(vfit2, newdata = tdata, se.fit = TRUE, type = "risk", reference = "zero")
tdata$fit <-  yhat$fit
ggplot(tdata, aes(x = time, y = fit)) +
geom_line(col = 'blue') +
scale_y_continuous(trans = scales::log_trans()) +
#scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, by = 50)) +
#scale_y_continuous(limits = c(0, 2), breaks = seq(0, 2, by = 0.25)) +
xlab("Observation Time") + ylab("HR") + ggtitle("Cox Model - Spline trt:time interaction") +
theme_bw(base_size = 15)
library(survival)
library(tidyverse)
# Load veteran data from survival package
vdata1 <-  veteran
# Make treatment variable
vdata1$trt <-  as.numeric(vdata1$trt) - 1
vdata1$id <-  seq(1:dim(vdata1)[1])
vdata1 <-  vdata1 |>
select(id, everything())
# Fit basic model with treatment as only predictor
vfit1 <- coxph(Surv(time, status) ~ trt, vdata1)
summary(vfit1)
# Now refit model with trt:time interaction
# Split time at every event and create vector of unique event times
event_times <- sort(unique(with(vdata1, time[status == 1])))
# Create new df in CP form with splits at every event time
vdata2 <- survSplit(Surv(time, status) ~., vdata1, cut = event_times)
# Model
vfit2 <- coxph(Surv(tstart, time, status) ~ trt + trt:nsk(time, df = 3), vdata2)
summary(vfit2)
# Create newdat df
tdata <- expand.grid(trt = 1, time = seq(1, 1000, length = 100))
# Predict HR and plot
yhat <- predict(vfit2, newdata = tdata, se.fit = TRUE, type = "risk", reference = "zero")
tdata$fit <-  yhat$fit
ggplot(tdata, aes(x = time, y = fit)) +
geom_line(col = 'blue') +
#scale_y_continuous(trans = scales::log_trans()) +
scale_y_continuous(trans="log", breaks=c(0,.2,.4,.6)) +
#scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, by = 50)) +
#scale_y_continuous(limits = c(0, 2), breaks = seq(0, 2, by = 0.25)) +
xlab("Observation Time") + ylab("HR") + ggtitle("Cox Model - Spline trt:time interaction") +
theme_bw(base_size = 15)
ggplot(tdata, aes(x = time, y = fit)) +
geom_line(col = 'blue') +
#scale_y_continuous(trans = scales::log_trans()) +
scale_y_continuous(trans="log", breaks = c(0.25, 0.5, 0.75)) +
#scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, by = 50)) +
#scale_y_continuous(limits = c(0, 2), breaks = seq(0, 2, by = 0.25)) +
xlab("Observation Time") + ylab("HR") + ggtitle("Cox Model - Spline trt:time interaction") +
theme_bw(base_size = 15)
ggplot(tdata, aes(x = time, y = fit)) +
geom_line(col = 'blue') +
#scale_y_continuous(trans = scales::log_trans()) +
scale_y_continuous(trans="log", breaks = c(0, 0.25, 0.5, 0.75, 1)) +
#scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, by = 50)) +
#scale_y_continuous(limits = c(0, 2), breaks = seq(0, 2, by = 0.25)) +
xlab("Observation Time") + ylab("HR") + ggtitle("Cox Model - Spline trt:time interaction") +
theme_bw(base_size = 15)
ggplot(tdata, aes(x = time, y = fit)) +
geom_line(col = 'blue') +
#scale_y_continuous(trans = scales::log_trans()) +
scale_y_continuous(trans="log", breaks = c(0, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2)) +
#scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, by = 50)) +
#scale_y_continuous(limits = c(0, 2), breaks = seq(0, 2, by = 0.25)) +
xlab("Observation Time") + ylab("HR") + ggtitle("Cox Model - Spline trt:time interaction") +
theme_bw(base_size = 15)
yhat <- predict(vfit2, newdata = tdata, se.fit = TRUE, type = "risk", reference = "zero")
tdata$fit <-  yhat$fit
ggplot(tdata, aes(x = time, y = fit)) +
geom_line(col = 'blue') +scale_y_continuous(limits = c(0, 2), breaks = seq(0, 2, by = 0.25)) +
xlab("Observation Time") + ylab("HR") + ggtitle("Cox Model - Spline trt:time interaction") +
theme_bw(base_size = 15)
library(survival)
library(tidyverse)
# Load veteran data from survival package
vdata1 <-  veteran
# Make treatment variable equal to 0,1 instead of 1,2 (not necessary, but I just like to work with the former)
vdata1$trt <-  as.numeric(vdata1$trt) - 1
# Create id variable and organise columns
vdata1$id <-  seq(1:dim(vdata1)[1])
vdata1 <-  vdata1 |>
select(id, everything())
library(survival)
library(tidyverse)
# Load veteran data from survival package
vdata1 <-  veteran
# Make treatment variable equal to 0,1 instead of 1,2 (not necessary, but I just like to work with the former)
vdata1$trt <-  as.numeric(vdata1$trt) - 1
# Create id variable and organise columns
vdata1$id <-  seq(1:dim(vdata1)[1])
vdata1 <-  vdata1 |>
select(id, everything())
# Fit basic model with treatment and karno as the only predictors
vfit1 <- coxph(Surv(time, status) ~ trt + karno, vdata1)
summary(vfit1)
zph <- cox.zph(vfit1)
zph
plot(zph, hr = T)
# Now refit model with trt:time interaction
# Split time at every event and create vector of unique event times
event_times <- sort(unique(with(vdata1, time[status == 1])))
# Create new df in CP form with splits at every event time
vdata2 <- survSplit(Surv(time, status) ~., vdata1, cut = event_times)
# Model
vfit2 <- coxph(Surv(tstart, time, status) ~ trt + trt:nsk(time, df = 3), vdata2)
summary(vfit2)
# Create newdat df
tdata <- expand.grid(trt = 1, time = seq(1, 1000, length = 100))
# Predict HR and plot
yhat <- predict(vfit2, newdata = tdata, se.fit = TRUE, type = "risk", reference = "zero")
tdata$fit <-  yhat$fit
ggplot(tdata, aes(x = time, y = fit)) +
geom_line(col = 'blue') +
#scale_y_continuous(trans = scales::log_trans()) +
scale_y_continuous(trans="log", breaks = c(0, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2)) +
#scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, by = 50)) +
#scale_y_continuous(limits = c(0, 2), breaks = seq(0, 2, by = 0.25)) +
xlab("Observation Time") + ylab("HR") + ggtitle("Cox Model - Spline trt:time interaction") +
theme_bw(base_size = 15)
library(survival)
library(tidyverse)
# Load veteran data from survival package
vdata1 <-  veteran
# Make treatment variable equal to 0,1 instead of 1,2 (not necessary, but I just like to work with the former)
vdata1$trt <-  as.numeric(vdata1$trt) - 1
# Create id variable and organise columns
vdata1$id <-  seq(1:dim(vdata1)[1])
vdata1 <-  vdata1 |>
select(id, everything())
# Fit basic model with treatment and karno as the only predictors
vfit1 <- coxph(Surv(time, status) ~ trt, vdata1)
summary(vfit1)
zph <- cox.zph(vfit1)
zph
plot(zph, hr = T)
vfit1 <- coxph(Surv(time, status) ~ trt + age + karno, vdata1)
summary(vfit1)
zph <- cox.zph(vfit1)
zph
plot(zph, hr = T)
library(survival)
library(tidyverse)
# Load veteran data from survival package
vdata1 <-  veteran
# Make treatment variable equal to 0,1 instead of 1,2 (not necessary, but I just like to work with the former)
vdata1$trt <-  as.numeric(vdata1$trt) - 1
# Create id variable and organise columns
vdata1$id <-  seq(1:dim(vdata1)[1])
vdata1 <-  vdata1 |>
select(id, everything())
# Fit basic model with treatment and karno as the only predictors
vfit1 <- coxph(Surv(time, status) ~ trt + age, vdata1)
summary(vfit1)
zph <- cox.zph(vfit1)
zph
plot(zph, hr = T)
library(survival)
library(tidyverse)
# Load veteran data from survival package
vdata1 <-  veteran
# Make treatment variable equal to 0,1 instead of 1,2 (not necessary, but I just like to work with the former)
vdata1$trt <-  as.numeric(vdata1$trt) - 1
# Create id variable and organise columns
vdata1$id <-  seq(1:dim(vdata1)[1])
vdata1 <-  vdata1 |>
select(id, everything())
# Fit basic model with treatment and karno as the only predictors
vfit1 <- coxph(Surv(time, status) ~ trt + age, vdata1)
summary(vfit1)
zph <- cox.zph(vfit1)
zph
plot(zph, hr = T)
library(survival)
library(tidyverse)
# Load veteran data from survival package
vdata1 <-  veteran
# Make treatment variable equal to 0,1 instead of 1,2 (not necessary, but I just like to work with the former)
vdata1$trt <-  as.numeric(vdata1$trt) - 1
# Create id variable and organise columns
vdata1$id <-  seq(1:dim(vdata1)[1])
vdata1 <-  vdata1 |>
select(id, everything())
# Fit basic model with treatment and karno as the only predictors
vfit1 <- coxph(Surv(time, status) ~ trt + celltype, vdata1)
summary(vfit1)
zph <- cox.zph(vfit1)
zph
plot(zph, hr = T)
library(survival)
library(tidyverse)
# Load veteran data from survival package
vdata1 <-  veteran
# Make treatment variable equal to 0,1 instead of 1,2 (not necessary, but I just like to work with the former)
vdata1$trt <-  as.numeric(vdata1$trt) - 1
# Create id variable and organise columns
vdata1$id <-  seq(1:dim(vdata1)[1])
vdata1 <-  vdata1 |>
select(id, everything())
# Fit basic model with treatment and karno as the only predictors
vfit1 <- coxph(Surv(time, status) ~ trt + age, vdata1)
summary(vfit1)
zph <- cox.zph(vfit1)
zph
plot(zph, hr = T)
# Split time at every event and create vector of unique event times
event_times <- sort(unique(with(vdata1, time[status == 1])))
# Create new df in CP form with splits at every event time
vdata2 <- survSplit(Surv(time, status) ~., vdata1, cut = event_times)
View(vdata2)
vfit2 <- coxph(Surv(tstart, time, status) ~ trt + trt:time, vdata2)
summary(vfit2)
vfit2 <- coxph(Surv(tstart, time, status) ~ trt + age + trt:time, vdata2)
summary(vfit2)
vfit2 <- coxph(Surv(tstart, time, status) ~ trt + trt:nsk(time, df = 3), vdata2)
summary(vfit2)
vfit2 <- coxph(Surv(tstart, time, status) ~ trt + age + trt:time, vdata2)
summary(vfit2)
vfit2 <- coxph(Surv(tstart, time, status) ~ trt + age + tt(trt), tt = function(x,t,...) x*t, vdata2)
summary(vfit2)
# Method 2 - clog, log
gehansurv = Surv(vdata1$time, vdata1$status)
plot(survfit(gehansurv ~ vdata1$trt), col=c("black", "red"), fun="cloglog")
# Fit basic model with treatment and karno as the only predictors
vfit1 <- coxph(Surv(time, status) ~ trt, vdata1)
summary(vfit1)
# Method 1 - GOF
zph <- cox.zph(vfit1)
zph
plot(zph, hr = T)
vfit1 <- coxph(Surv(time, status) ~ trt + age, vdata1)
summary(vfit1)
# Method 1 - GOF
zph <- cox.zph(vfit1)
zph
plot(zph, hr = T)
# Fit basic model with treatment and karno as the only predictors
vfit1 <- coxph(Surv(time, status) ~ trt + karno, vdata1)
summary(vfit1)
# Method 1 - GOF
zph <- cox.zph(vfit1)
zph
plot(zph, hr = T)
plot(survfit(gehansurv ~ vdata1$trt), col=c("black", "red"), fun="cloglog")
survfit(Surv(vdata1$time, vdata1$status) ~ vdata1$trt), col = c("black", "red"), fun="cloglog")
plot(survfit(Surv(vdata1$time, vdata1$status) ~ vdata1$trt), col = c("black", "red"), fun="cloglog"))
plot(survfit(Surv(vdata1$time, vdata1$status) ~ vdata1$trt), col = c("black", "red"), fun = "cloglog")
survfit(Surv(vdata1$time, vdata1$status) ~ vdata1$trt)
plot(survfit(Surv(vdata1$time, vdata1$status) ~ vdata1$trt), col = c("black", "red"), fun = "cloglog", xlab = "Time (in days) using log",
ylab = "log-log survival")
plot(survfit(Surv(vdata1$time, vdata1$status) ~ vdata1$trt), col = c("black", "red"), fun = "cloglog", xlab = "log time", ylab = "log-log survival")
View(vdata1)
library(survival)
library(tidyverse)
# Load veteran data from survival package
vdata1 <-  veteran
# Make treatment variable equal to 0,1 instead of 1,2 (not necessary, but I just like to work with the former)
vdata1$trt <-  as.numeric(vdata1$trt) - 1
# Create id variable and organise columns
vdata1$id <-  seq(1:dim(vdata1)[1])
vdata1 <-  vdata1 |>
select(id, everything())
# Kaplan -Meier plot
km_trt_fit <- survfit(Surv(time, status) ~ trt, data = veteran)
autoplot(km_trt_fit)
install.packages("ggfortify")
library(survival)
library(tidyverse)
library(ggfortify)
# Load veteran data from survival package
vdata1 <-  veteran
# Make treatment variable equal to 0,1 instead of 1,2 (not necessary, but I just like to work with the former)
vdata1$trt <-  as.numeric(vdata1$trt) - 1
# Create id variable and organise columns
vdata1$id <-  seq(1:dim(vdata1)[1])
vdata1 <-  vdata1 |>
select(id, everything())
# Kaplan -Meier plot
km_trt_fit <- survfit(Surv(time, status) ~ trt, data = veteran)
autoplot(km_trt_fit)
library(survival)
library(tidyverse)
library(survminer)
# Load veteran data from survival package
vdata1 <-  veteran
# Make treatment variable equal to 0,1 instead of 1,2 (not necessary, but I just like to work with the former)
vdata1$trt <-  as.numeric(vdata1$trt) - 1
# Create id variable and organise columns
vdata1$id <-  seq(1:dim(vdata1)[1])
vdata1 <-  vdata1 |>
select(id, everything())
# Kaplan-Meier plot
km_trt_fit <- survfit(Surv(time, status) ~ trt, data = veteran)
ggsurvplot(km_trt_fit, data = veteran, size = 1, palette = c("#E7B800", "#2E9FDF"), conf.int = F, legend.labs = c("standard", "test"), ggtheme = theme_bw())
# Fit basic model with treatment and karno as the only predictors
vfit1 <- coxph(Surv(time, status) ~ trt + age, vdata1)
summary(vfit1)
# Method 1 - GOF
zph <- cox.zph(vfit1)
zph
plot(zph, hr = T)
#| message: false
#| warning: false
library(survival)
library(tidyverse)
library(survminer)
library(gtsummary)
library(kableExtra)
# Load veteran data from survival package
vdata1 <-  veteran
# Make treatment variable equal to 0,1 instead of 1,2 (not necessary, but I just like to work with the former)
vdata1$trt <-  as.numeric(vdata1$trt) - 1
# Create id variable and organise columns
vdata1$id <-  seq(1:dim(vdata1)[1])
vdata1 <-  vdata1 |>
select(id, time, status, trt, age)
head(vdata1, 10) |>
kable(align = "c", digits = 2)
# Kaplan-Meier plot
km_trt_fit <- survfit(Surv(time, status) ~ trt, data = veteran)
ggsurvplot(km_trt_fit, data = veteran, size = 1, palette = c("#E7B800", "#2E9FDF"), conf.int = F,
legend.labs = c("standard", "test"), ggtheme = theme_bw(base_size = 20))
# Fit basic model with treatment and age as the only predictors
vfit1 <- coxph(Surv(time, status) ~ trt + age, vdata1)
tbl_regression(vfit1, exp = T)
(sch_res <-  cox.zph(vfit1))
plot(sch_res, hr = T)
abline(h = 1, lty = 3, colour = "red")
(sch_res <-  cox.zph(vfit1))
plot(sch_res, hr = T)
abline(h = 1, lty = 3, color = "red")
abline(h = 1, lty = 3, col = "red")
#| message: false
#| warning: false
library(survival)
library(tidyverse)
library(survminer)
library(gtsummary)
library(kableExtra)
# Load veteran data from survival package
vdata1 <-  veteran
# Make treatment variable equal to 0,1 instead of 1,2 (not necessary, but I just like to work with the former)
vdata1$trt <-  as.numeric(vdata1$trt) - 1
# Create id variable and organise columns
vdata1$id <-  seq(1:dim(vdata1)[1])
vdata1 <-  vdata1 |>
select(id, time, status, trt, age)
head(vdata1, 10) |>
kable(align = "c", digits = 2)
# Kaplan-Meier plot
km_trt_fit <- survfit(Surv(time, status) ~ trt, data = veteran)
ggsurvplot(km_trt_fit, data = veteran, size = 1, palette = c("#E7B800", "#2E9FDF"), conf.int = F,
legend.labs = c("standard", "test"), ggtheme = theme_bw(base_size = 20))
# Fit basic model with treatment and age as the only predictors
vfit1 <- coxph(Surv(time, status) ~ trt + age, vdata1)
tbl_regression(vfit1, exp = T)
(sch_res <-  cox.zph(vfit1))
plot(sch_res, hr = T)
abline(h = 1, lty = 3, col = "red")
(sch_res <-  cox.zph(vfit1))
plot(sch_res, hr = T)[[1]]
abline(h = 1, lty = 3, col = "red")
(sch_res <-  cox.zph(vfit1))
plot(sch_res, hr = T)[1]
abline(h = 1, lty = 3, col = "red")
plot(sch_res, hr = T)[2]
abline(h = 1, lty = 3, col = "red")
(sch_res <-  cox.zph(vfit1))
par(mfrow = c(1,2))
plot(sch_res, hr = T)
abline(h = 1, lty = 3, col = "red")
(sch_res <-  cox.zph(vfit1))
par(mfrow = c(1,2))
plot(sch_res[1], hr = T)
abline(h = 1, lty = 3, col = "red")
plot(sch_res[2], hr = T)
abline(h = 1, lty = 3, col = "red")
install.packages("quarto")
head(vdata1, 10)
#| message: false
#| warning: false
library(survival)
library(tidyverse)
library(survminer)
library(gtsummary)
library(kableExtra)
# Load veteran data from survival package
vdata1 <-  veteran
# Make treatment variable equal to 0,1 instead of 1,2 (not necessary, but I just like to work with the former)
vdata1$trt <-  as.numeric(vdata1$trt) - 1
# Create id variable and organise columns
vdata1$id <-  seq(1:dim(vdata1)[1])
vdata1 <-  vdata1 |>
select(id, time, status, trt, age)
head(vdata1, 10) |>
kable(align = "c", digits = 2)
head(vdata1, 10)
veteran
vdata1
# Create new df with just the first 3 subjects
vdata1_first3 <-  vdata1 |>
filter(id = 1:3) |>
kable(align = "c", digits = 2)
# Create new df with just the first 3 subjects
vdata1_first3 <-  vdata1 |>
filter(id == 1:3) |>
kable(align = "c", digits = 2)
# Create new df with just the first 3 subjects
vdata1_first3 <-  vdata1 |>
slice(1:3) |>
kable(align = "c", digits = 2)
# Create new df with just the first 3 subjects
vdata1_first3 <-  vdata1 |>
slice(1:3)
vdata1_first3 |>
kable(align = "c", digits = 2)
#| message: false
#| warning: false
# Naive model using final observation time
vfit3 <- coxph(Surv(time, status) ~ trt + age + trt:time, vdata1)
tbl_regression(vfit3, exp = T)
# Split time at every event and create vector of unique event times
event_times <- sort(unique(with(vdata1_first3, time[status == 1])))
# Create new df in CP form with splits at every event time
vdata2_first3 <- survSplit(Surv(time, status) ~., vdata1_first3, cut = event_times)
vdata2_first3 |>
kable(align = "c", digits = 2)
#| message: false
#| warning: false
# Split time at every event and create vector of unique event times
event_times <- sort(unique(with(vdata1, time[status == 1])))
# Create new df in CP form with splits at every event time
vdata2 <- survSplit(Surv(time, status) ~., vdata1, cut = event_times)
vfit2 <- coxph(Surv(tstart, time, status) ~ trt + age + trt:time, vdata2)
tbl_regression(vfit2, exp = T)
vfit3 <- coxph(Surv(tstart, time, status) ~ trt + age + tt(trt), tt = function(x,t,...) x*t, vdata1)
vfit3 <- coxph(Surv(time, status) ~ trt + age + tt(trt), tt = function(x,t,...) x*t, vdata1)
summary(vfit3)
vfit2 <- coxph(Surv(tstart, time, status) ~ trt + age + trt:time, vdata2)
summary(vfit2)
vfit3 <- coxph(Surv(time, status) ~ trt + age + tt(trt), tt = function(x,t,...) x*t, vdata1)
summary(vfit3)
vfit2 <- coxph(Surv(tstart, time, status) ~ trt + age + trt:time, vdata2)
summary(vfit2)
