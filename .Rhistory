scale_y_continuous(limits = c(0, 1.2), breaks = seq(0, 1.2, by = 0.25)) +
xlab("Age") + ylab("Predicted HR") + ggtitle("Predicted HR for Age (as a function of Age)") +
theme_bw(base_size = 20)
vfit3 <- coxph(Surv(time, status) ~ trt + age + strata(trt), vdata1)
tbl_regression(vfit3, exp = T)
sch_res <-  cox.zph(vfit1)
plot(sch_res[1], hr = T) # trt
abline(h = 1, lty = 3, col = "red")
# Create new df in CP form with splits at 100 days
vdata2 <- survSplit(Surv(time, status) ~., vdata1, cut = 100, episode = "tgroup")
# Cox model with stepped time-dependent coefficients
vfit4 <- coxph(Surv(tstart, time, status) ~ age + trt:strata(tgroup), data = vdata2)
tbl_regression(vfit4, exp = T)
cox.zph(vfit4)
#| message: false
#| warning: false
# Cox model with continuous time-dependent coefficient
vfit5 <- coxph(Surv(time, status) ~ trt + age + tt(trt), tt = function(x, t, ...) x * nsk(t, df = 3), vdata1)
tbl_regression(vfit5, exp = T)
# Vector of unique event times
event_times <- sort(unique(with(vdata1, time[status == 1])))
# Create new df in CP form with splits at every event time
vdata3 <- survSplit(Surv(time, status) ~., vdata1, cut = event_times)
# Fit Cox model with splined trt:time interaction (current times)
vfit6 <- coxph(Surv(tstart, time, status) ~ trt + age + trt:nsk(time, df = 3), vdata3)
tbl_regression(vfit6, exp = T)
# cox.zph(vfit5)
print("Error in cox.zph(vfit5) : function not defined for models with tt() terms")
cox.zph(vfit6)
#| message: false
#| warning: false
# Create newdat df
tdata <- expand.grid(trt = 1, age = 0, time = seq(0, 1000, by = 5))
# Predict HR
yhat <- predict(vfit6, newdata = tdata, se.fit = TRUE, type = "risk", reference = "zero")
tdata$fit <-  yhat$fit
# Plot
ggplot(tdata, aes(x = time, y = fit)) +
geom_line(col = '#F8766D') +
scale_x_continuous(breaks = seq(0, 400, by = 50), limits = c(0, 400)) +
scale_y_continuous(trans = "log", breaks = c(0, 0.5, 1, 1.5, 2)) +
xlab("Observation Time") + ylab("HR for Treatment") + ggtitle("Cox Model - Time-varying HR for Treatment") +
theme_bw(base_size = 20)
sch_res <-  cox.zph(vfit1)
plot(sch_res[1], hr = T) # trt
abline(h = 1, lty = 3, col = "red")
# Create newdat df with times of interest to predict at
tdata2 <- expand.grid(trt = 1, age = 0, time = c(5, 40, 100, 400))
# Predict HR and plot
yhat <- predict(vfit6, newdata = tdata2, se.fit = TRUE, type = "lp", reference = "zero")
# Calculate HR's and 95% CI's
estimates <-  data.frame(Time = c(5, 40, 100, 400),
HR = exp(yhat$fit),
`Lower CI` = exp(yhat$fit - (1.96*yhat$se.fit)),
`Upper CI` = exp(yhat$fit + (1.96*yhat$se.fit)))
estimates |>
kable(align = "c", digits = 2)
#| message: false
#| warning: false
# RP model with time-varying effect on trt
library(rstpm2)
vfit7 <- stpm2(Surv(time, status) ~ trt + age, data = vdata1, df = 3, tvc = list(trt = 3))
summary(vfit7)
#| message: false
#| warning: false
# Predict HR
# Note that it doesn't matter what we set the age values to in this case as there is no interaction between trt and age (i.e. the HR for trt is the same regardless of age). But we need to specify something otherwise predict will complain.
pred_hrs <- predict(vfit7, type = "hr",
newdata = data.frame(time = seq(0, 1000, by = 5), trt = 0, age = 20), # age value = placeholder
exposed = function(data) transform(data, trt = 1, age = 20), # age value = placeholder
full = TRUE, se.fit = TRUE)
# Now plot
ggplot(pred_hrs, aes(x = time, y = Estimate)) +
geom_line(col = '#00BFC4') +
scale_x_continuous(breaks = seq(0, 400, by = 50), limits = c(0, 400)) +
scale_y_continuous(trans = "log", breaks = c(0, 0.5, 1, 1.5, 2)) +
xlab("Observation Time") + ylab("HR for Treatment") + ggtitle("RP Model - Time-varying HR for Treatment") +
theme_bw(base_size = 20)
# Calculate HR's and 95% CI's
estimates <- predict(vfit7, type = "hr",
newdata = data.frame(time = c(5, 40, 100, 400), trt = 0, age = 20), # age value = placeholder
exposed = function(data) transform(data, trt = 1, age = 20), # age value = placeholder
full = TRUE, se.fit = TRUE)
# Select relevant columns and rename
estimates <-  estimates |>
select(time, Estimate, lower, upper) |>
rename(Time = time,
HR = Estimate,
`Lower CI` = lower,
`Upper CI` = upper)
estimates |>
kable(align = "c", digits = 2)
#| message: false
#| warning: false
# Tidy RP pred output
pred_hrs <-  pred_hrs |>
select(time, Estimate) |>
slice(-1) |>
mutate(Model = "Royston-Parmar")
# Tidy Cox pred output
tdata <-  tdata |>
select(time, fit) |>
slice(-1) |>
rename(Estimate = fit) |>
mutate(Model = "Cox")
# Merge both sets of predictions
preds_rp_cox <-  rbind(pred_hrs, tdata) |>
arrange(time)
# Plot
ggplot(preds_rp_cox, aes(x = time, y = Estimate, color = Model)) +
geom_line() +
scale_x_continuous(breaks = seq(0, 400, by = 50), limits = c(0, 400)) +
scale_y_continuous(trans = "log", breaks = c(0, 0.5, 1, 1.5, 2)) +
xlab("Observation Time") + ylab("HR for Treatment") + ggtitle("Time-varying HR for Treatment") +
theme_bw(base_size = 20) +
theme(legend.position="bottom")
#| message: false
#| warning: false
library(survival)
library(tidyverse)
library(survminer)
library(gtsummary)
library(kableExtra)
# Load veteran data from survival package
vdata1 <-  veteran
# Make treatment variable equal to 0,1 instead of 1,2 (not necessary, but I just like to work with the former)
vdata1$trt <-  as.numeric(vdata1$trt) - 1
# Create id variable and organise columns
vdata1$id <-  seq(1:dim(vdata1)[1])
vdata1 <-  vdata1 |>
select(id, time, status, trt, age)
# Fit basic model with treatment and age as the only predictors
vfit1 <- coxph(Surv(time, status) ~ trt + age, vdata1)
tbl_regression(vfit1, exp = T)
# Test Schoenfeld residuals
(sch_res <-  cox.zph(vfit1))
# Refit model with spline on age
vfit2 <- coxph(Surv(time, status) ~ trt + splines::ns(age,3), vdata1)
tbl_regression(vfit2, exp = T)
# Test Schoenfeld residuals
(sch_res <-  cox.zph(vfit2))
#| message: false
#| warning: false
library(emmeans)
# Estimate hazard rate at yearly intervals
emm_df <-  emmeans(vfit2, ~ age, at = list(age = seq(30, 80, by = 1)), type = "unlink")
emm_df <-  data.frame(emm_df)
# Calculate HR at yearly intervals by dividing each successive pair of hazard rates
library(data.table)
setDT(emm_df)[, pred_HR := c(NA, response[-1] / response[-.N])]
# Plot HR for age over range of age
ggplot(emm_df, aes(x = age, y = pred_HR, group = 1)) +
geom_line() +
geom_point() +
scale_y_continuous(limits = c(0, 1.2), breaks = seq(0, 1.2, by = 0.25)) +
xlab("Age") + ylab("Predicted HR") + ggtitle("Predicted HR for Age (as a function of Age)") +
theme_bw(base_size = 20)
vfit3 <- coxph(Surv(time, status) ~ trt + age + strata(trt), vdata1)
tbl_regression(vfit3, exp = T)
sch_res <-  cox.zph(vfit1)
plot(sch_res[1], hr = T) # trt
abline(h = 1, lty = 3, col = "red")
# Create new df in CP form with splits at 100 days
vdata2 <- survSplit(Surv(time, status) ~., vdata1, cut = 100, episode = "tgroup")
# Cox model with stepped time-dependent coefficients
vfit4 <- coxph(Surv(tstart, time, status) ~ age + trt:strata(tgroup), data = vdata2)
tbl_regression(vfit4, exp = T)
cox.zph(vfit4)
#| message: false
#| warning: false
# Cox model with continuous time-dependent coefficient
vfit5 <- coxph(Surv(time, status) ~ trt + age + tt(trt), tt = function(x, t, ...) x * nsk(t, df = 3), vdata1)
tbl_regression(vfit5, exp = T)
# Vector of unique event times
event_times <- sort(unique(with(vdata1, time[status == 1])))
# Create new df in CP form with splits at every event time
vdata3 <- survSplit(Surv(time, status) ~., vdata1, cut = event_times)
# Fit Cox model with splined trt:time interaction (current times)
vfit6 <- coxph(Surv(tstart, time, status) ~ trt + age + trt:nsk(time, df = 3), vdata3)
tbl_regression(vfit6, exp = T)
# cox.zph(vfit5)
print("Error in cox.zph(vfit5) : function not defined for models with tt() terms")
cox.zph(vfit6)
#| message: false
#| warning: false
# Create newdat df
tdata <- expand.grid(trt = 1, age = 0, time = seq(0, 1000, by = 5))
# Predict HR
yhat <- predict(vfit6, newdata = tdata, se.fit = TRUE, type = "risk", reference = "zero")
tdata$fit <-  yhat$fit
# Plot
ggplot(tdata, aes(x = time, y = fit)) +
geom_line(col = '#F8766D') +
scale_x_continuous(breaks = seq(0, 400, by = 50), limits = c(0, 400)) +
scale_y_continuous(trans = "log", breaks = c(0, 0.5, 1, 1.5, 2)) +
xlab("Observation Time") + ylab("HR for Treatment") + ggtitle("Cox Model - Time-varying HR for Treatment") +
theme_bw(base_size = 20)
sch_res <-  cox.zph(vfit1)
plot(sch_res[1], hr = T) # trt
abline(h = 1, lty = 3, col = "red")
# Create newdat df with times of interest to predict at
tdata2 <- expand.grid(trt = 1, age = 0, time = c(5, 40, 100, 400))
# Predict HR and plot
yhat <- predict(vfit6, newdata = tdata2, se.fit = TRUE, type = "lp", reference = "zero")
# Calculate HR's and 95% CI's
estimates <-  data.frame(Time = c(5, 40, 100, 400),
HR = exp(yhat$fit),
`Lower CI` = exp(yhat$fit - (1.96*yhat$se.fit)),
`Upper CI` = exp(yhat$fit + (1.96*yhat$se.fit)))
estimates |>
kable(align = "c", digits = 2)
#| message: false
#| warning: false
# RP model with time-varying effect on trt
library(rstpm2)
vfit7 <- stpm2(Surv(time, status) ~ trt + age, data = vdata1, df = 3, tvc = list(trt = 3))
summary(vfit7)
#| message: false
#| warning: false
# Predict HR
# Note that it doesn't matter what we set the age values to in this case as there is no interaction between trt and age (i.e. the HR for trt is the same regardless of age). But we need to specify something otherwise predict will complain.
pred_hrs <- predict(vfit7, type = "hr",
newdata = data.frame(time = seq(0, 1000, by = 5), trt = 0, age = 20), # age value = placeholder
exposed = function(data) transform(data, trt = 1, age = 20), # age value = placeholder
full = TRUE, se.fit = TRUE)
# Now plot
ggplot(pred_hrs, aes(x = time, y = Estimate)) +
geom_line(col = '#00BFC4') +
scale_x_continuous(breaks = seq(0, 400, by = 50), limits = c(0, 400)) +
scale_y_continuous(trans = "log", breaks = c(0, 0.5, 1, 1.5, 2)) +
xlab("Observation Time") + ylab("HR for Treatment") + ggtitle("RP Model - Time-varying HR for Treatment") +
theme_bw(base_size = 20)
# Calculate HR's and 95% CI's
estimates <- predict(vfit7, type = "hr",
newdata = data.frame(time = c(5, 40, 100, 400), trt = 0, age = 20), # age value = placeholder
exposed = function(data) transform(data, trt = 1, age = 20), # age value = placeholder
full = TRUE, se.fit = TRUE)
# Select relevant columns and rename
estimates <-  estimates |>
select(time, Estimate, lower, upper) |>
rename(Time = time,
HR = Estimate,
`Lower CI` = lower,
`Upper CI` = upper)
estimates |>
kable(align = "c", digits = 2)
#| message: false
#| warning: false
# Tidy RP pred output
pred_hrs <-  pred_hrs |>
select(time, Estimate) |>
slice(-1) |>
mutate(Model = "Royston-Parmar")
# Tidy Cox pred output
tdata <-  tdata |>
select(time, fit) |>
slice(-1) |>
rename(Estimate = fit) |>
mutate(Model = "Cox")
# Merge both sets of predictions
preds_rp_cox <-  rbind(pred_hrs, tdata) |>
arrange(time)
# Plot
ggplot(preds_rp_cox, aes(x = time, y = Estimate, color = Model)) +
geom_line() +
scale_x_continuous(breaks = seq(0, 400, by = 50), limits = c(0, 400)) +
scale_y_continuous(trans = "log", breaks = c(0, 0.5, 1, 1.5, 2)) +
xlab("Observation Time") + ylab("HR for Treatment") + ggtitle("Time-varying HR for Treatment") +
theme_bw(base_size = 20) +
theme(legend.position="bottom")
ggplot(preds_rp_cox, aes(x = time, y = Estimate, color = Model)) +
geom_line() +
scale_x_continuous(breaks = seq(0, 400, by = 50), limits = c(0, 400)) +
scale_y_continuous(trans = "log", breaks = c(0, 0.5, 1, 1.5, 2)) +
xlab("Observation Time") + ylab("HR for Treatment") + ggtitle("Time-varying HR for Treatment") +
theme_bw(base_size = 20) +
theme(legend.position="bottom")
#| message: false
#| warning: false
library(tidyverse)
library(splines)
library(gtsummary)
data(birthwt, package = "MASS")
# Model
mod <-  glm(low ~ age, family = "binomial", data = subset(birthwt, age < 40))
tbl_regression(mod, intercept = T)
# Categorise maternal age into 5 quantiles (could make this more or less)
birthwt <- birthwt |>
mutate(age_5 = cut_number(age, 5))
# Proportion of women with low birthweight babies in each quantile of maternal age
grouped_dat <- birthwt |>
group_by(age_5) |>
count(low) |>
pivot_wider(names_from = low,
values_from = n) |>
mutate(obs_props = `1`/(`0` + `1`),
obs_logodds = qlogis(obs_props))
# Take the middle age of each quantile range and bind to data
vec = c(16.5, 20, 22.5, 26, 36.5)
grouped_dat <-  cbind("age_5_mid" = vec, grouped_dat)
# Categorise maternal age into 5 quantiles (could make this more or less)
birthwt <- birthwt |>
mutate(age_5 = cut_number(age, 5))
# Proportion of women with low birthweight babies in each quantile of maternal age
grouped_dat <- birthwt |>
group_by(age_5) |>
count(low) |>
pivot_wider(names_from = low,
values_from = n) |>
mutate(obs_props = `1`/(`0` + `1`),
obs_logodds = qlogis(obs_props))
# Take the middle age of each quantile range and bind to data
vec = c(16.5, 20, 22.5, 26, 36.5)
grouped_dat <-  cbind("age_5_mid" = vec, grouped_dat)
ggplot(data = grouped_dat, aes(x = age_5_mid, y = obs_logodds)) +
geom_point(size = 3) +
scale_y_continuous(limits = c(-2, 0), breaks = seq(-2, 0, by = 0.2)) +
scale_x_continuous(limits = c(15, 45), breaks = seq(15, 45, by = 5)) +
xlab("Maternal Age") + ylab("Log-odds of Low Birthweight") +
theme_bw(base_size = 20)
#| message: false
#| warning: false
library(tidyverse)
library(splines)
library(gtsummary)
data(birthwt, package = "MASS")
# Model
mod <-  glm(low ~ age, family = "binomial", data = subset(birthwt, age < 40))
tbl_regression(mod, intercept = T)
# Categorise maternal age into 5 quantiles (could make this more or less)
birthwt <- birthwt |>
mutate(age_5 = cut_number(age, 5))
# Proportion of women with low birthweight babies in each quantile of maternal age
grouped_dat <- birthwt |>
group_by(age_5) |>
count(low) |>
pivot_wider(names_from = low,
values_from = n) |>
mutate(obs_props = `1`/(`0` + `1`),
obs_logodds = qlogis(obs_props))
# Take the middle age of each quantile range and bind to data
vec = c(16.5, 20, 22.5, 26, 36.5)
grouped_dat <-  cbind("age_5_mid" = vec, grouped_dat)
newdf <-  expand.grid(age = seq(15, 45, by = 5))
newdf <-  newdf |>
mutate(pred_logodds = predict(mod, newdata = newdf))
ggplot(data = grouped_dat, aes(x = age_5_mid, y = obs_logodds)) +
geom_point(size = 3) +
geom_line(data = newdf, aes(x = age, y = pred_logodds)) +
scale_y_continuous(limits = c(-2, 0), breaks = seq(-2, 0, by = 0.2)) +
scale_x_continuous(limits = c(15, 45), breaks = seq(15, 45, by = 5)) +
xlab("Maternal Age (yrs)") + ylab("Predicted Log-odds of Low Birthweight") +
theme_bw(base_size = 20)
newdf
remove.packages("ggplot2")
newdf <-  expand.grid(age = seq(15, 45, by = 5))
newdf <-  newdf |>
mutate(pred_logodds = predict(mod, newdata = newdf))
ggplot(data = grouped_dat, aes(x = age_5_mid, y = obs_logodds)) +
geom_point(size = 3) +
geom_line(data = newdf, aes(x = age, y = pred_logodds)) +
scale_y_continuous(limits = c(-2, 0), breaks = seq(-2, 0, by = 0.2)) +
scale_x_continuous(limits = c(15, 45), breaks = seq(15, 45, by = 5)) +
xlab("Maternal Age (yrs)") + ylab("Predicted Log-odds of Low Birthweight") +
theme_bw(base_size = 20)
#| message: false
#| warning: false
library(tidyverse)
library(splines)
library(gtsummary)
data(birthwt, package = "MASS")
# Model
mod <-  glm(low ~ age, family = "binomial", data = subset(birthwt, age < 40))
tbl_regression(mod, intercept = T)
# Categorise maternal age into 5 quantiles (could make this more or less)
birthwt <- birthwt |>
mutate(age_5 = cut_number(age, 5))
# Proportion of women with low birthweight babies in each quantile of maternal age
grouped_dat <- birthwt |>
group_by(age_5) |>
count(low) |>
pivot_wider(names_from = low,
values_from = n) |>
mutate(obs_props = `1`/(`0` + `1`),
obs_logodds = qlogis(obs_props))
# Take the middle age of each quantile range and bind to data
vec = c(16.5, 20, 22.5, 26, 36.5)
grouped_dat <-  cbind("age_5_mid" = vec, grouped_dat)
ggplot(data = grouped_dat, aes(x = age_5_mid, y = obs_logodds)) +
geom_point(size = 3) +
scale_y_continuous(limits = c(-2, 0), breaks = seq(-2, 0, by = 0.2)) +
scale_x_continuous(limits = c(15, 45), breaks = seq(15, 45, by = 5)) +
xlab("Maternal Age") + ylab("Log-odds of Low Birthweight") +
theme_bw(base_size = 20)
#| message: false
#| warning: false
library(tidyverse)
library(splines)
library(gtsummary)
data(birthwt, package = "MASS")
# Model
mod <-  glm(low ~ age, family = "binomial", data = subset(birthwt, age < 40))
tbl_regression(mod, intercept = T)
ggplot(data = grouped_dat, aes(x = age_5_mid, y = obs_logodds)) +
geom_point(size = 3) +
scale_y_continuous(limits = c(-2, 0), breaks = seq(-2, 0, by = 0.2)) +
scale_x_continuous(limits = c(15, 45), breaks = seq(15, 45, by = 5)) +
xlab("Maternal Age") + ylab("Log-odds of Low Birthweight") +
theme_bw(base_size = 20)
#| message: false
#| warning: false
library(tidyverse)
library(splines)
library(gtsummary)
data(birthwt, package = "MASS")
# Model
mod <-  glm(low ~ age, family = "binomial", data = subset(birthwt, age < 40))
tbl_regression(mod, intercept = T)
# Categorise maternal age into 5 quantiles (could make this more or less)
birthwt <- birthwt |>
mutate(age_5 = cut_number(age, 5))
# Proportion of women with low birthweight babies in each quantile of maternal age
grouped_dat <- birthwt |>
group_by(age_5) |>
count(low) |>
pivot_wider(names_from = low,
values_from = n) |>
mutate(obs_props = `1`/(`0` + `1`),
obs_logodds = qlogis(obs_props))
# Take the middle age of each quantile range and bind to data
vec = c(16.5, 20, 22.5, 26, 36.5)
grouped_dat <-  cbind("age_5_mid" = vec, grouped_dat)
ggplot(data = grouped_dat, aes(x = age_5_mid, y = obs_logodds)) +
geom_point(size = 3) +
scale_y_continuous(limits = c(-2, 0), breaks = seq(-2, 0, by = 0.2)) +
scale_x_continuous(limits = c(15, 45), breaks = seq(15, 45, by = 5)) +
xlab("Maternal Age") + ylab("Log-odds of Low Birthweight") +
theme_bw(base_size = 20)
#| message: false
#| warning: false
library(tidyverse)
library(splines)
library(gtsummary)
data(birthwt, package = "MASS")
# Model
mod <-  glm(low ~ age, family = "binomial", data = subset(birthwt, age < 40))
tbl_regression(mod, intercept = T)
# Categorise maternal age into 5 quantiles (could make this more or less)
birthwt <- birthwt |>
mutate(age_5 = cut_number(age, 5))
# Proportion of women with low birthweight babies in each quantile of maternal age
grouped_dat <- birthwt |>
group_by(age_5) |>
count(low) |>
pivot_wider(names_from = low,
values_from = n) |>
mutate(obs_props = `1`/(`0` + `1`),
obs_logodds = qlogis(obs_props))
# Take the middle age of each quantile range and bind to data
vec = c(16.5, 20, 22.5, 26, 36.5)
grouped_dat <-  cbind("age_5_mid" = vec, grouped_dat)
ggplot(data = grouped_dat, aes(x = age_5_mid, y = obs_logodds)) +
geom_point(size = 3) +
scale_y_continuous(limits = c(-2, 0), breaks = seq(-2, 0, by = 0.2)) +
scale_x_continuous(limits = c(15, 45), breaks = seq(15, 45, by = 5)) +
xlab("Maternal Age") + ylab("Log-odds of Low Birthweight") +
theme_bw(base_size = 20)
ggplot(data = grouped_dat, aes(x = age_5_mid, y = obs_logodds)) +
geom_point(size = 3) +
scale_y_continuous(limits = c(-2, 0), breaks = seq(-2, 0, by = 0.2)) +
scale_x_continuous(limits = c(15, 45), breaks = seq(15, 45, by = 5)) +
xlab("Maternal Age") + ylab("Log-odds of Low Birthweight") +
theme_bw(base_size = 20)
#| message: false
#| warning: false
library(tidyverse)
library(splines)
library(gtsummary)
data(birthwt, package = "MASS")
# Model
mod <-  glm(low ~ age, family = "binomial", data = subset(birthwt, age < 40))
tbl_regression(mod, intercept = T)
# Categorise maternal age into 5 quantiles (could make this more or less)
birthwt <- birthwt |>
mutate(age_5 = cut_number(age, 5))
# Proportion of women with low birthweight babies in each quantile of maternal age
grouped_dat <- birthwt |>
group_by(age_5) |>
count(low) |>
pivot_wider(names_from = low,
values_from = n) |>
mutate(obs_props = `1`/(`0` + `1`),
obs_logodds = qlogis(obs_props))
# Take the middle age of each quantile range and bind to data
vec = c(16.5, 20, 22.5, 26, 36.5)
grouped_dat <-  cbind("age_5_mid" = vec, grouped_dat)
ggplot(data = grouped_dat, aes(x = age_5_mid, y = obs_logodds)) +
geom_point(size = 3) +
scale_y_continuous(limits = c(-2, 0), breaks = seq(-2, 0, by = 0.2)) +
scale_x_continuous(limits = c(15, 45), breaks = seq(15, 45, by = 5)) +
xlab("Maternal Age") + ylab("Log-odds of Low Birthweight") +
theme_bw(base_size = 20)
1
#| message: false
#| warning: false
library(tidyverse)
library(splines)
library(gtsummary)
data(birthwt, package = "MASS")
# Model
mod <-  glm(low ~ age, family = "binomial", data = subset(birthwt, age < 40))
tbl_regression(mod, intercept = T)
