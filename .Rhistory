set_table_properties(layout = "autofit") |>
height(height = 1, unit = "cm") |>
hrule(rule = "atleast", part = "header") |>
align(align = "center", part = "body") |>
bg(bg = "white", part = "all") |>
flextable::font(fontname = "Consolas", part = "all") |>
theme_vanilla()
#| label: setup
#| message: false
library(splines)
library(dplyr)
library(tidyr)
library(emmeans)
library(paletteer)
library(flextable)
library(ggplot2)
# Define function - use this to construct a curved relationship
n <- 100
x <- seq(0, 100, length.out = n)
fx <- cos(2 * pi * x)
# Add a bit of noise
set.seed(1)
y <- fx + rnorm(n, sd = 0.2)
dat <- data.frame(x, y)
# Plot
ggplot(dat, aes(x = x, y = y)) +
geom_point(size = 3) +
xlab("x") + ylab("y") +
theme_bw(base_size = 20)
#| label: lowess
#| message: false
# Plot lowess
ggplot(dat, aes(x = x, y = y)) +
geom_point(size = 3) +
geom_smooth(method = "loess", se = F, linewidth = 2, color = "#1F77B4FF") +
xlab("x") + ylab("y") +
theme_bw(base_size = 20)
#| label: linear
# Model
mod1 <- lm(y ~ x, data = dat)
# Predict Y from model
dat$mod1_pred <- predict(mod1, dat)
# Plot linear
ggplot(dat, aes(x = x, y = mod1_pred)) +
geom_line(linewidth = 2, color = "deeppink") +
geom_point(data = dat, aes(x = x, y = y), size = 3) +
xlab("x") + ylab("y") +
theme_bw(base_size = 20)
#| label: piecewise
# Create a new variable corresponding to change in slope (using 50 as threshold)
dat <- dat |>
mutate(x50 = (x - 50) * (x >= 50))  # will be 0 if x < 50
# Model
mod2 <- lm(y ~ x + x50, data = dat)
# Predict Y from model
dat$mod2_pred <- predict(mod2, dat)
# Plot piecewise
ggplot(dat, aes(x = x, y = mod2_pred)) +
geom_line(linewidth = 2, color = "chartreuse") +
geom_point(data = dat, aes(x = x, y = y), size = 3) +
xlab("x") + ylab("y") +
theme_bw(base_size = 20)
#| label: poly
# Model - quadratic
mod3 <- lm(y ~ x + I(x^2), data = dat)
# Predict Y from models
dat$mod3_pred <- predict(mod3, dat)
# Plot piecewise
ggplot(dat, aes(x = x, y = mod3_pred)) +
geom_line(linewidth = 2, color = "chocolate1") +
geom_point(data = dat, aes(x = x, y = y), size = 3) +
xlab("x") + ylab("y") +
theme_bw(base_size = 20)
#| label: rcs plots
# Model - rcs with 2 knots
mod4a <- lm(y ~ ns(x, df = 3), data = dat)
# Model - rcs with 3 knots
mod4b <- lm(y ~ ns(x, 4), data = dat)
# Model - rcs with 4 knots
mod4c <- lm(y ~ ns(x, 5), data = dat)
# Model - rcs with 20 knots
mod4d <- lm(y ~ ns(x, 21), data = dat)
# Predict Y from models
dat$mod4a_pred <- predict(mod4a, dat)
dat$mod4b_pred <- predict(mod4b, dat)
dat$mod4c_pred <- predict(mod4c, dat)
dat$mod4d_pred <- predict(mod4d, dat)
# Convert to long format for easier plotting
dat_long <- dat |>
select(1:2, 7:10) |>
pivot_longer(3:6)
# Plot rcs
ggplot() +
geom_line(data = dat_long, aes(x = x, y = value, color = name), linewidth = 2) +
geom_point(data = dat, aes(x = x, y = y), size = 3) +
scale_color_paletteer_d("ggsci::category20_d3", name = "RCS - # of knots", labels = c("2", "3", "4", "20")) +
xlab("x") + ylab("y") +
theme_bw(base_size = 20)
#| label: rcs aic
# AIC for each model
mods_aic <- data.frame(AIC(mod1, mod2, mod3, mod4a, mod4b, mod4c, mod4d))
mods_aic <- tibble::rownames_to_column(mods_aic, var = "Model")
mods_aic <- mods_aic |>
select(-df) |>
mutate(Model = case_when(Model == "mod1" ~ "Linear Regression",
Model == "mod2" ~ "Segmented Regression",
Model == "mod3" ~ "Polynomial Regression",
Model == "mod4a" ~ "RCS - 2 knots",
Model == "mod4b" ~ "RCS - 3 knots",
Model == "mod4c" ~ "RCS - 4 knots",
Model == "mod4d" ~ "RCS - 20 knots"))
mods_aic
#| label: model output
#| tbl-cap: Model Output
# Model - rcs with 3 knots
mod4b <- lm(y ~ ns(x, 4), data = dat)
# Format model results in a table
mod4b |> gtsummary::tbl_regression()
#| label: emmeans
#| tbl-cap: Estimated Marginal Means
# Plot rcs
ggplot() +
geom_line(data = dat, aes(x = x, y = mod4b_pred), color = "#EE8635", linewidth = 2) +
geom_point(data = dat, aes(x = x, y = y), size = 3) +
geom_vline(xintercept = c(20,30,50,60), color = "red", linetype = "dotted", linewidth = 1) +
xlab("x") + ylab("y") +
theme_bw(base_size = 20)
# emmeans
emmeans(mod4b, ~ x, at = list(x = c(20,30,50,60))) |>
data.frame() |>
select(-df) |>
rename("X" = "x",
"Emmean (Y)" = "emmean",
"95% C.I. (lower)" = "lower.CL",
"95% C.I. (upper)" = "upper.CL") |>
flextable() |>
colformat_double(j = c(2:5), digits = 3, na_str = "N/A") |>
set_table_properties(layout = "autofit") |>
height(height = 1, unit = "cm") |>
hrule(rule = "atleast", part = "header") |>
align(align = "center", part = "body") |>
bg(bg = "white", part = "all") |>
flextable::font(fontname = "Consolas", part = "all") |>
theme_vanilla()
#| label: contrasts
#| tbl-cap: Contrasts of Estimated Marginal Means
# contrasts
emm <- emmeans(mod4b, ~ x, at = list(x = c(20,30,50,60)))
custom <- list(`Change in Y corresponding to change in X from 20 to 30` = c(-1,1,0,0),
`Change in Y corresponding to change in X from 50 to 60` = c(0,0,-1,1))
contrast(emm, custom) |>
summary(infer = T) |>
data.frame() |>
select(c(-df, -t.ratio)) |>
rename("Contrast" = "contrast",
"Estimate" = "estimate",
"95% C.I. (lower)" = "lower.CL",
"95% C.I. (upper)" = "upper.CL",
"p" = "p.value") |>
flextable() |>
colformat_double(digits = 3, na_str = "N/A") |>
set_table_properties(layout = "autofit") |>
height(height = 1, unit = "cm") |>
hrule(rule = "atleast", part = "header") |>
align(align = "center", part = "body") |>
bg(bg = "white", part = "all") |>
flextable::font(fontname = "Consolas", part = "all") |>
theme_vanilla()
#| label: rcs plots
# Model - rcs with 2 knots
mod4a <- lm(y ~ ns(x, df = 3), data = dat)
# Model - rcs with 3 knots
mod4b <- lm(y ~ ns(x, 4), data = dat)
# Model - rcs with 4 knots
mod4c <- lm(y ~ ns(x, 5), data = dat)
# Model - rcs with 20 knots
mod4d <- lm(y ~ ns(x, 21), data = dat)
# Predict Y from models
dat$mod4a_pred <- predict(mod4a, dat)
dat$mod4b_pred <- predict(mod4b, dat)
dat$mod4c_pred <- predict(mod4c, dat)
dat$mod4d_pred <- predict(mod4d, dat)
# Convert to long format for easier plotting
dat_long <- dat |>
select(1:2, 7:10) |>
pivot_longer(3:6)
# Plot rcs
ggplot() +
geom_line(data = dat_long, aes(x = x, y = value, color = name), linewidth = 2) +
geom_point(data = dat, aes(x = x, y = y), size = 3) +
scale_color_paletteer_d("ggsci::category20_d3", name = "RCS - # of knots", labels = c("2", "3", "4", "20")) +
xlab("x") + ylab("y") +
theme_bw(base_size = 20) +
theme(legend.position = c(1,1), legend.justification = c(1.1,1.1))
#| label: rcs plots
# Model - rcs with 2 knots
mod4a <- lm(y ~ ns(x, df = 3), data = dat)
# Model - rcs with 3 knots
mod4b <- lm(y ~ ns(x, 4), data = dat)
# Model - rcs with 4 knots
mod4c <- lm(y ~ ns(x, 5), data = dat)
# Model - rcs with 20 knots
mod4d <- lm(y ~ ns(x, 21), data = dat)
# Predict Y from models
dat$mod4a_pred <- predict(mod4a, dat)
dat$mod4b_pred <- predict(mod4b, dat)
dat$mod4c_pred <- predict(mod4c, dat)
dat$mod4d_pred <- predict(mod4d, dat)
# Convert to long format for easier plotting
dat_long <- dat |>
select(1:2, 7:10) |>
pivot_longer(3:6)
# Plot rcs
ggplot() +
geom_line(data = dat_long, aes(x = x, y = value, color = name), linewidth = 2) +
geom_point(data = dat, aes(x = x, y = y), size = 3) +
scale_color_paletteer_d("ggsci::category20_d3", name = "RCS - # of knots", labels = c("2", "3", "4", "20")) +
xlab("x") + ylab("y") +
theme_bw(base_size = 20) +
theme(legend.position = c(1,1), legend.justification = c(1.5,1.1))
#| label: rcs plots
# Model - rcs with 2 knots
mod4a <- lm(y ~ ns(x, df = 3), data = dat)
# Model - rcs with 3 knots
mod4b <- lm(y ~ ns(x, 4), data = dat)
# Model - rcs with 4 knots
mod4c <- lm(y ~ ns(x, 5), data = dat)
# Model - rcs with 20 knots
mod4d <- lm(y ~ ns(x, 21), data = dat)
# Predict Y from models
dat$mod4a_pred <- predict(mod4a, dat)
dat$mod4b_pred <- predict(mod4b, dat)
dat$mod4c_pred <- predict(mod4c, dat)
dat$mod4d_pred <- predict(mod4d, dat)
# Convert to long format for easier plotting
dat_long <- dat |>
select(1:2, 7:10) |>
pivot_longer(3:6)
# Plot rcs
ggplot() +
geom_line(data = dat_long, aes(x = x, y = value, color = name), linewidth = 2) +
geom_point(data = dat, aes(x = x, y = y), size = 3) +
scale_color_paletteer_d("ggsci::category20_d3", name = "RCS - # of knots", labels = c("2", "3", "4", "20")) +
xlab("x") + ylab("y") +
theme_bw(base_size = 20) +
theme(legend.position = c(1,1), legend.justification = c(2,1.1))
#| label: rcs plots
# Model - rcs with 2 knots
mod4a <- lm(y ~ ns(x, df = 3), data = dat)
# Model - rcs with 3 knots
mod4b <- lm(y ~ ns(x, 4), data = dat)
# Model - rcs with 4 knots
mod4c <- lm(y ~ ns(x, 5), data = dat)
# Model - rcs with 20 knots
mod4d <- lm(y ~ ns(x, 21), data = dat)
# Predict Y from models
dat$mod4a_pred <- predict(mod4a, dat)
dat$mod4b_pred <- predict(mod4b, dat)
dat$mod4c_pred <- predict(mod4c, dat)
dat$mod4d_pred <- predict(mod4d, dat)
# Convert to long format for easier plotting
dat_long <- dat |>
select(1:2, 7:10) |>
pivot_longer(3:6)
# Plot rcs
ggplot() +
geom_line(data = dat_long, aes(x = x, y = value, color = name), linewidth = 1.8) +
geom_point(data = dat, aes(x = x, y = y), size = 3) +
scale_color_paletteer_d("ggsci::category20_d3", name = "RCS - # of knots", labels = c("2", "3", "4", "20")) +
xlab("x") + ylab("y") +
theme_bw(base_size = 20) +
theme(legend.position = c(1,1), legend.justification = c(2,1.1))
#| label: rcs plots
# Model - rcs with 2 knots
mod4a <- lm(y ~ ns(x, df = 3), data = dat)
# Model - rcs with 3 knots
mod4b <- lm(y ~ ns(x, 4), data = dat)
# Model - rcs with 4 knots
mod4c <- lm(y ~ ns(x, 5), data = dat)
# Model - rcs with 20 knots
mod4d <- lm(y ~ ns(x, 21), data = dat)
# Predict Y from models
dat$mod4a_pred <- predict(mod4a, dat)
dat$mod4b_pred <- predict(mod4b, dat)
dat$mod4c_pred <- predict(mod4c, dat)
dat$mod4d_pred <- predict(mod4d, dat)
# Convert to long format for easier plotting
dat_long <- dat |>
select(1:2, 7:10) |>
pivot_longer(3:6)
# Plot rcs
ggplot() +
geom_line(data = dat_long, aes(x = x, y = value, color = name), linewidth = 1.6) +
geom_point(data = dat, aes(x = x, y = y), size = 3) +
scale_color_paletteer_d("ggsci::category20_d3", name = "RCS - # of knots", labels = c("2", "3", "4", "20")) +
xlab("x") + ylab("y") +
theme_bw(base_size = 20) +
theme(legend.position = c(1,1), legend.justification = c(2,1.1))
#| label: rcs plots
# Model - rcs with 2 knots
mod4a <- lm(y ~ ns(x, df = 3), data = dat)
# Model - rcs with 3 knots
mod4b <- lm(y ~ ns(x, 4), data = dat)
# Model - rcs with 4 knots
mod4c <- lm(y ~ ns(x, 5), data = dat)
# Model - rcs with 20 knots
mod4d <- lm(y ~ ns(x, 21), data = dat)
# Predict Y from models
dat$mod4a_pred <- predict(mod4a, dat)
dat$mod4b_pred <- predict(mod4b, dat)
dat$mod4c_pred <- predict(mod4c, dat)
dat$mod4d_pred <- predict(mod4d, dat)
# Convert to long format for easier plotting
dat_long <- dat |>
select(1:2, 7:10) |>
pivot_longer(3:6)
# Plot rcs
ggplot() +
geom_line(data = dat_long, aes(x = x, y = value, color = name), linewidth = 2) +
geom_point(data = dat, aes(x = x, y = y), size = 3) +
scale_color_paletteer_d("ggsci::category20_d3", name = "RCS - # of knots", labels = c("2", "3", "4", "20")) +
xlab("x") + ylab("y") +
theme_bw(base_size = 20) +
theme(legend.position = c(1,1), legend.justification = c(1.6,1.1))
#| label: rcs plots
# Model - rcs with 2 knots
mod4a <- lm(y ~ ns(x, df = 3), data = dat)
# Model - rcs with 3 knots
mod4b <- lm(y ~ ns(x, 4), data = dat)
# Model - rcs with 4 knots
mod4c <- lm(y ~ ns(x, 5), data = dat)
# Model - rcs with 20 knots
mod4d <- lm(y ~ ns(x, 21), data = dat)
# Predict Y from models
dat$mod4a_pred <- predict(mod4a, dat)
dat$mod4b_pred <- predict(mod4b, dat)
dat$mod4c_pred <- predict(mod4c, dat)
dat$mod4d_pred <- predict(mod4d, dat)
# Convert to long format for easier plotting
dat_long <- dat |>
select(1:2, 7:10) |>
pivot_longer(3:6)
# Plot rcs
ggplot() +
geom_line(data = dat_long, aes(x = x, y = value, color = name), linewidth = 2) +
geom_point(data = dat, aes(x = x, y = y), size = 3) +
scale_color_paletteer_d("ggsci::category20_d3", name = "RCS - # of knots", labels = c("2", "3", "4", "20")) +
xlab("x") + ylab("y") +
theme_bw(base_size = 20) +
theme(legend.position = c(1,1), legend.justification = c(1.8,1.1))
#| label: setup
#| message: false
library(splines)
library(dplyr)
library(tidyr)
library(emmeans)
library(paletteer)
library(flextable)
library(ggplot2)
# Define function - use this to construct a curved relationship
n <- 100
x <- seq(0, 100, length.out = n)
fx <- cos(2 * pi * x)
# Add a bit of noise
set.seed(1)
y <- fx + rnorm(n, sd = 0.2)
dat <- data.frame(x, y)
# Plot
ggplot(dat, aes(x = x, y = y)) +
geom_point(size = 3) +
xlab("x") + ylab("y") +
theme_bw(base_size = 20)
#| label: lowess
#| message: false
# Plot lowess
ggplot(dat, aes(x = x, y = y)) +
geom_point(size = 3) +
geom_smooth(method = "loess", se = F, linewidth = 2, color = "#1F77B4FF") +
xlab("x") + ylab("y") +
theme_bw(base_size = 20)
#| label: linear
# Model
mod1 <- lm(y ~ x, data = dat)
# Predict Y from model
dat$mod1_pred <- predict(mod1, dat)
# Plot linear
ggplot(dat, aes(x = x, y = mod1_pred)) +
geom_line(linewidth = 2, color = "deeppink") +
geom_point(data = dat, aes(x = x, y = y), size = 3) +
xlab("x") + ylab("y") +
theme_bw(base_size = 20)
#| label: piecewise
# Create a new variable corresponding to change in slope (using 50 as threshold)
dat <- dat |>
mutate(x50 = (x - 50) * (x >= 50))  # will be 0 if x < 50
# Model
mod2 <- lm(y ~ x + x50, data = dat)
# Predict Y from model
dat$mod2_pred <- predict(mod2, dat)
# Plot piecewise
ggplot(dat, aes(x = x, y = mod2_pred)) +
geom_line(linewidth = 2, color = "chartreuse") +
geom_point(data = dat, aes(x = x, y = y), size = 3) +
xlab("x") + ylab("y") +
theme_bw(base_size = 20)
#| label: poly
# Model - quadratic
mod3 <- lm(y ~ x + I(x^2), data = dat)
# Predict Y from models
dat$mod3_pred <- predict(mod3, dat)
# Plot piecewise
ggplot(dat, aes(x = x, y = mod3_pred)) +
geom_line(linewidth = 2, color = "chocolate1") +
geom_point(data = dat, aes(x = x, y = y), size = 3) +
xlab("x") + ylab("y") +
theme_bw(base_size = 20)
#| label: rcs plots
# Model - rcs with 2 knots
mod4a <- lm(y ~ ns(x, df = 3), data = dat)
# Model - rcs with 3 knots
mod4b <- lm(y ~ ns(x, 4), data = dat)
# Model - rcs with 4 knots
mod4c <- lm(y ~ ns(x, 5), data = dat)
# Model - rcs with 20 knots
mod4d <- lm(y ~ ns(x, 21), data = dat)
# Predict Y from models
dat$mod4a_pred <- predict(mod4a, dat)
dat$mod4b_pred <- predict(mod4b, dat)
dat$mod4c_pred <- predict(mod4c, dat)
dat$mod4d_pred <- predict(mod4d, dat)
# Convert to long format for easier plotting
dat_long <- dat |>
select(1:2, 7:10) |>
pivot_longer(3:6)
# Plot rcs
ggplot() +
geom_line(data = dat_long, aes(x = x, y = value, color = name), linewidth = 2) +
geom_point(data = dat, aes(x = x, y = y), size = 3) +
scale_color_paletteer_d("ggsci::category20_d3", name = "RCS - # of knots", labels = c("2", "3", "4", "20")) +
xlab("x") + ylab("y") +
theme_bw(base_size = 20) +
theme(legend.position = c(1,1), legend.justification = c(2.8,1.1))
#| label: rcs aic
# AIC for each model
mods_aic <- data.frame(AIC(mod1, mod2, mod3, mod4a, mod4b, mod4c, mod4d))
mods_aic <- tibble::rownames_to_column(mods_aic, var = "Model")
mods_aic <- mods_aic |>
select(-df) |>
mutate(Model = case_when(Model == "mod1" ~ "Linear Regression",
Model == "mod2" ~ "Segmented Regression",
Model == "mod3" ~ "Polynomial Regression",
Model == "mod4a" ~ "RCS - 2 knots",
Model == "mod4b" ~ "RCS - 3 knots",
Model == "mod4c" ~ "RCS - 4 knots",
Model == "mod4d" ~ "RCS - 20 knots"))
mods_aic
#| label: model output
#| tbl-cap: Model Output
# Model - rcs with 3 knots
mod4b <- lm(y ~ ns(x, 4), data = dat)
# Format model results in a table
mod4b |> gtsummary::tbl_regression()
#| label: emmeans
#| tbl-cap: Estimated Marginal Means
# Plot rcs
ggplot() +
geom_line(data = dat, aes(x = x, y = mod4b_pred), color = "#EE8635", linewidth = 2) +
geom_point(data = dat, aes(x = x, y = y), size = 3) +
geom_vline(xintercept = c(20,30,50,60), color = "red", linetype = "dotted", linewidth = 1) +
xlab("x") + ylab("y") +
theme_bw(base_size = 20)
# emmeans
emmeans(mod4b, ~ x, at = list(x = c(20,30,50,60))) |>
data.frame() |>
select(-df) |>
rename("X" = "x",
"Emmean (Y)" = "emmean",
"95% C.I. (lower)" = "lower.CL",
"95% C.I. (upper)" = "upper.CL") |>
flextable() |>
colformat_double(j = c(2:5), digits = 3, na_str = "N/A") |>
set_table_properties(layout = "autofit") |>
height(height = 1, unit = "cm") |>
hrule(rule = "atleast", part = "header") |>
align(align = "center", part = "body") |>
bg(bg = "white", part = "all") |>
flextable::font(fontname = "Consolas", part = "all") |>
theme_vanilla()
#| label: contrasts
#| tbl-cap: Contrasts of Estimated Marginal Means
# contrasts
emm <- emmeans(mod4b, ~ x, at = list(x = c(20,30,50,60)))
custom <- list(`Change in Y corresponding to change in X from 20 to 30` = c(-1,1,0,0),
`Change in Y corresponding to change in X from 50 to 60` = c(0,0,-1,1))
contrast(emm, custom) |>
summary(infer = T) |>
data.frame() |>
select(c(-df, -t.ratio)) |>
rename("Contrast" = "contrast",
"Estimate" = "estimate",
"95% C.I. (lower)" = "lower.CL",
"95% C.I. (upper)" = "upper.CL",
"p" = "p.value") |>
flextable() |>
colformat_double(digits = 3, na_str = "N/A") |>
set_table_properties(layout = "autofit") |>
height(height = 1, unit = "cm") |>
hrule(rule = "atleast", part = "header") |>
align(align = "center", part = "body") |>
bg(bg = "white", part = "all") |>
flextable::font(fontname = "Consolas", part = "all") |>
theme_vanilla()
