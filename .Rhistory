)
dat_long <- dat_long |>
pivot_wider(2:3,
names_to = "a",
values_to = "b"
)
mod2predict  <- cbind(newdat, predict(mod2, newdat, interval = T, type = "prob"))
mod2predict
dat_long <- mod2predict |>
pivot_longer(2:37,
names_to = "est",
values_to = "prob"
)
mod2predict  <- cbind(newdat, predict(mod2, newdat, interval = T, type = "prob"))
mod2predict
View(mod2predict)
mod2predict  <- cbind(newdat, predict(mod2, newdat, interval = T, type = "prob"))
mod2predict
dat_long <- mod2predict |>
pivot_longer(2:12,
names_to = "est",
values_to = "prob"
)
mod2predict  <- cbind(newdat, predict(mod2, newdat, interval = T, type = "prob"))
mod2predict
dat_long <- mod2predict |>
pivot_longer(2:13,
names_to = "est",
values_to = "prob"
)
mod2predict  <- cbind(newdat, predict(mod2, newdat, interval = T, type = "prob"))
mod2predict
dat_long <- mod2predict |>
pivot_longer(2:13,
names_to = "est",
values_to = "prob") |>
select(Sensort, est, prob, everything())
mod2predict  <- cbind(newdat, predict(mod2, newdat, interval = T, type = "prob"))
mod2predict
dat_long <- mod2predict |>
pivot_longer(2:13,
names_to = "est",
values_to = "prob") |>
select(Sensory, est, prob, everything())
dat_long <- dat_long |>
pivot_longer(4:15,
names_to = "est2",
values_to = "prob2") |>
select(Sensory, est, prob, est2, prob2, everything())
mod2predict  <- cbind(newdat, predict(mod2, newdat, interval = T, type = "prob"))
mod2predict
dat_long <- mod2predict |>
pivot_longer(2:13,
names_to = "est",
values_to = "prob") |>
select(Sensory, est, prob, everything())
mod2predict  <- cbind(newdat, predict(mod2, newdat, interval = T, type = "prob"))
mod2predict
dat_long_est <- mod2predict |>
pivot_longer(2:13,
names_to = "outcome_val",
values_to = "prob") |>
select(Sensory, outcome_val, prob)
View(dat_long_est)
#| label: predict
#| warning: false
# Create new dataframe to predict on
newdat <- data.frame(Sensory = c(0, 1)) |>
mutate(Sensory = factor(Sensory))
# Predict on the linear (log-odds) scale
mod2predict  <- cbind(newdat, predict(mod2, newdat, interval = T, type = "prob"))
mod2predict
# Put estimated probabilities into long format
dat_long_est <- mod2predict |>
pivot_longer(2:13,
names_to = "outcome_val",
values_to = "pred_prob") |>
select(Sensory, outcome_val, pred_prob)
# Put estimated lower CI into long format
dat_long_lowerci <- mod2predict |>
pivot_longer(14:25,
names_to = "outcome_val",
values_to = "pred_lowerci") |>
select(Sensory, outcome_val, pred_lowerci)
# Put estimated upper CI into long format
dat_long_upperci <- mod2predict |>
pivot_longer(26:37,
names_to = "outcome_val",
values_to = "pred_upperci") |>
select(Sensory, outcome_val, pred_upperci)
# cbind together
dat_long <- cbind(dat_long_est, dat_long_lowerci[3], dat_long_upperci[3])
View(dat_long)
# Plot
ggplot(dat_long, aes(x = outcome_val, y = pred_prob)) +
geom_point(aes(color = Sensory), position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = pred_lowerci, ymax = pred_upperci, color = Sensory), position = position_dodge(width = 0.5), width = 0.3) +
scale_color_manual(values = cbPalette[2:3]) +
theme_bw(base_size = 20)
# Plot
ggplot(dat_long, aes(x = outcome_val, y = pred_prob)) +
geom_point(aes(color = Sensory), position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = pred_lowerci, ymax = pred_upperci, color = Sensory), position = position_dodge(width = 0.5), width = 0.3) +
scale_color_manual(values = c("#E69F00", "#56B4E9")) +
theme_bw(base_size = 20)
#| label: load data
#| include: false
dat <- read.csv("/Users/paulsanfilippo/Dropbox/Alfred Neuroscience/zz_test_site/posts/011_03May_2024/Supplementary Table 1 for patient info .csv", header = T)
#| label: data
head(dat, 10)
#| label: boxplot
#| warning: false
library(ggplot2)
library(tidyr)
library(gtsummary)
library(ordinal)
library(ggeffects)
ggplot(dat, aes(x = factor(Sensory), y = EDSS)) +
geom_boxplot() +
geom_dotplot(binaxis = 'y', stackdir = 'center', position = position_dodge(1), dotsize = 0.8) +
xlab("Sensory Symptoms") +
theme_bw(base_size = 20)
#| label: lm
#| warning: false
mod1 <- lm(EDSS ~ Sensory, data = dat)
mod1 |> tbl_regression(intercept = T)
#| label: clm
#| warning: false
dat$EDSS <- factor(dat$EDSS) # format EDSS as factor
mod2 <- clm(EDSS ~ factor(Sensory), data = dat, link = "logit")
mod2 |> tbl_regression(exponentiate = T, intercept = T)
#| label: propodds
#| warning: false
library(gofcat)
brant.test(mod2)
#| label: predict
#| warning: false
# Create new dataframe to predict on
newdat <- data.frame(Sensory = c(0, 1)) |>
mutate(Sensory = factor(Sensory))
# Predict on the linear (log-odds) scale
mod2predict  <- cbind(newdat, predict(mod2, newdat, interval = T, type = "prob"))
mod2predict
# Put estimated probabilities into long format
dat_long_est <- mod2predict |>
pivot_longer(2:13,
names_to = "outcome_val",
values_to = "pred_prob") |>
select(Sensory, outcome_val, pred_prob)
# Put estimated lower CI into long format
dat_long_lowerci <- mod2predict |>
pivot_longer(14:25,
names_to = "outcome_val",
values_to = "pred_lowerci") |>
select(Sensory, outcome_val, pred_lowerci)
# Put estimated upper CI into long format
dat_long_upperci <- mod2predict |>
pivot_longer(26:37,
names_to = "outcome_val",
values_to = "pred_upperci") |>
select(Sensory, outcome_val, pred_upperci)
# cbind together
dat_long <- cbind(dat_long_est, dat_long_lowerci[3], dat_long_upperci[3])
# Plot
ggplot(dat_long, aes(x = outcome_val, y = pred_prob)) +
geom_point(aes(color = Sensory), position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = pred_lowerci, ymax = pred_upperci, color = Sensory), position = position_dodge(width = 0.5), width = 0.3) +
scale_color_manual(values = c("#E69F00", "#56B4E9")) +
theme_bw(base_size = 20)
# Plot
ggplot(dat_long, aes(x = outcome_val, y = pred_prob)) +
geom_point(aes(color = Sensory), position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = pred_lowerci, ymax = pred_upperci, color = Sensory), position = position_dodge(width = 0.5), width = 0.3) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
scale_color_manual(values = c("#E69F00", "#56B4E9")) +
theme_bw(base_size = 20)
View(dat_long)
str(dat_long)
dat_long |>
mutate(outcome_val = str_sub(outcome_val, 4, -1))
library(tidyverse)
dat_long <- dat_long |>
mutate(outcome_val = str_sub(outcome_val, 4, -1))
dat_long <- dat_long |>
mutate(outcome_val = str_sub(outcome_val, 4, -1))
newdat <- data.frame(Sensory = c(0, 1)) |>
mutate(Sensory = factor(Sensory))
# Predict on the linear (log-odds) scale
mod2predict  <- cbind(newdat, predict(mod2, newdat, interval = T, type = "prob"))
mod2predict
# Put estimated probabilities into long format
dat_long_est <- mod2predict |>
pivot_longer(2:13,
names_to = "outcome_val",
values_to = "pred_prob") |>
select(Sensory, outcome_val, pred_prob)
# Put estimated lower CI into long format
dat_long_lowerci <- mod2predict |>
pivot_longer(14:25,
names_to = "outcome_val",
values_to = "pred_lowerci") |>
select(Sensory, outcome_val, pred_lowerci)
# Put estimated upper CI into long format
dat_long_upperci <- mod2predict |>
pivot_longer(26:37,
names_to = "outcome_val",
values_to = "pred_upperci") |>
select(Sensory, outcome_val, pred_upperci)
# cbind together
dat_long <- cbind(dat_long_est, dat_long_lowerci[3], dat_long_upperci[3])
dat_long <- dat_long |>
mutate(outcome_val = str_sub(outcome_val, 4, -1))
dat_long |>
mutate(outcome_val = str_sub(outcome_val, 4, -1))
dat_long |>
mutate(outcome_val = str_sub(outcome_val, 3, -1))
dat_long |>
mutate(outcome_val = str_sub(outcome_val, 3))
dat_long |>
mutate(outcome_val = str_sub(outcome_val, 3, n()))
dat_long |>
mutate(outcome_val = str_sub(outcome_val, 3, nchar()))
mutate(EDSS = str_sub(outcome_val, 3, -1)
View(dat_long)
View(dat_long)
newdat <- data.frame(Sensory = c(0, 1)) |>
mutate(Sensory = factor(Sensory))
# Predict on the linear (log-odds) scale
mod2predict  <- cbind(newdat, predict(mod2, newdat, interval = T, type = "prob"))
mod2predict
# Put estimated probabilities into long format
dat_long_est <- mod2predict |>
pivot_longer(2:13,
names_to = "outcome_val",
values_to = "pred_prob") |>
select(Sensory, outcome_val, pred_prob)
# Put estimated lower CI into long format
dat_long_lowerci <- mod2predict |>
pivot_longer(14:25,
names_to = "outcome_val",
values_to = "pred_lowerci") |>
select(Sensory, outcome_val, pred_lowerci)
# Put estimated upper CI into long format
dat_long_upperci <- mod2predict |>
pivot_longer(26:37,
names_to = "outcome_val",
values_to = "pred_upperci") |>
select(Sensory, outcome_val, pred_upperci)
# cbind together
dat_long <- cbind(dat_long_est, dat_long_lowerci[3], dat_long_upperci[3])
dat_long <- dat_long |>
mutate(EDSS = str_sub(outcome_val, 3, -1))
View(dat_long)
newdat <- data.frame(Sensory = c(0, 1)) |>
mutate(Sensory = factor(Sensory))
# Predict on the linear (log-odds) scale
mod2predict  <- cbind(newdat, predict(mod2, newdat, interval = T, type = "prob"))
mod2predict
# Put estimated probabilities into long format
dat_long_est <- mod2predict |>
pivot_longer(2:13,
names_to = "outcome_val",
values_to = "pred_prob") |>
select(Sensory, outcome_val, pred_prob)
# Put estimated lower CI into long format
dat_long_lowerci <- mod2predict |>
pivot_longer(14:25,
names_to = "outcome_val",
values_to = "pred_lowerci") |>
select(Sensory, outcome_val, pred_lowerci)
# Put estimated upper CI into long format
dat_long_upperci <- mod2predict |>
pivot_longer(26:37,
names_to = "outcome_val",
values_to = "pred_upperci") |>
select(Sensory, outcome_val, pred_upperci)
# cbind together
dat_long <- cbind(dat_long_est, dat_long_lowerci[3], dat_long_upperci[3])
dat_long <- dat_long |>
mutate(EDSS = str_sub(outcome_val, 4, -1))
View(dat_long)
# Create new dataframe to predict on
newdat <- data.frame(Sensory = c(0, 1)) |>
mutate(Sensory = factor(Sensory))
# Predict on the linear (log-odds) scale
mod2predict  <- cbind(newdat, predict(mod2, newdat, interval = T, type = "prob"))
mod2predict
# Put estimated probabilities into long format
dat_long_est <- mod2predict |>
pivot_longer(2:13,
names_to = "outcome_val",
values_to = "pred_prob") |>
select(Sensory, outcome_val, pred_prob)
# Put estimated lower CI into long format
dat_long_lowerci <- mod2predict |>
pivot_longer(14:25,
names_to = "outcome_val",
values_to = "pred_lowerci") |>
select(Sensory, outcome_val, pred_lowerci)
# Put estimated upper CI into long format
dat_long_upperci <- mod2predict |>
pivot_longer(26:37,
names_to = "outcome_val",
values_to = "pred_upperci") |>
select(Sensory, outcome_val, pred_upperci)
# cbind together
dat_long <- cbind(dat_long_est, dat_long_lowerci[3], dat_long_upperci[3])
dat_long <- dat_long |>
mutate(EDSS = str_sub(outcome_val, 5, -1))
View(dat_long)
newdat <- data.frame(Sensory = c(0, 1)) |>
mutate(Sensory = factor(Sensory))
# Predict on the linear (log-odds) scale
mod2predict  <- cbind(newdat, predict(mod2, newdat, interval = T, type = "prob"))
mod2predict
# Put estimated probabilities into long format
dat_long_est <- mod2predict |>
pivot_longer(2:13,
names_to = "outcome_val",
values_to = "pred_prob") |>
select(Sensory, outcome_val, pred_prob)
# Put estimated lower CI into long format
dat_long_lowerci <- mod2predict |>
pivot_longer(14:25,
names_to = "outcome_val",
values_to = "pred_lowerci") |>
select(Sensory, outcome_val, pred_lowerci)
# Put estimated upper CI into long format
dat_long_upperci <- mod2predict |>
pivot_longer(26:37,
names_to = "outcome_val",
values_to = "pred_upperci") |>
select(Sensory, outcome_val, pred_upperci)
# cbind together
dat_long <- cbind(dat_long_est, dat_long_lowerci[3], dat_long_upperci[3])
dat_long <- dat_long |>
mutate(EDSS = as.numeric(str_sub(outcome_val, 5, -1)))
# Plot
ggplot(dat_long, aes(x = outcome_val, y = pred_prob)) +
geom_point(aes(color = Sensory), position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = pred_lowerci, ymax = pred_upperci, color = Sensory), position = position_dodge(width = 0.5), width = 0.3) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
scale_color_manual(values = c("#E69F00", "#56B4E9")) +
xlab("EDSS") + ylab("Predicted Probability") +
theme_bw(base_size = 20)
# Plot
ggplot(dat_long, aes(x = EDSS, y = pred_prob)) +
geom_point(aes(color = Sensory), position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = pred_lowerci, ymax = pred_upperci, color = Sensory), position = position_dodge(width = 0.5), width = 0.3) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
scale_color_manual(values = c("#E69F00", "#56B4E9")) +
xlab("EDSS") + ylab("Predicted Probability") +
theme_bw(base_size = 20)
dat$EDSS
# Plot
ggplot(dat_long, aes(x = EDSS, y = pred_prob)) +
geom_point(aes(color = Sensory), position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = pred_lowerci, ymax = pred_upperci, color = Sensory), position = position_dodge(width = 0.5), width = 0.3) +
scale_x_continuous(limits = c(0, 6), breaks = seq(0, 6, by = 0.5)) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
scale_color_manual(values = c("#E69F00", "#56B4E9")) +
xlab("EDSS") + ylab("Predicted Probability") +
theme_bw(base_size = 20)
#| label: load data
#| include: false
dat <- read.csv("/Users/paulsanfilippo/Dropbox/Alfred Neuroscience/zz_test_site/posts/011_03May_2024/Supplementary Table 1 for patient info .csv", header = T)
#| label: data
head(dat, 10)
#| label: boxplot
#| warning: false
library(ggplot2)
library(tidyverse)
library(gtsummary)
library(ordinal)
library(ggeffects)
ggplot(dat, aes(x = factor(Sensory), y = EDSS)) +
geom_boxplot() +
geom_dotplot(binaxis = 'y', stackdir = 'center', position = position_dodge(1), dotsize = 0.8) +
xlab("Sensory Symptoms") +
theme_bw(base_size = 20)
#| label: lm
#| warning: false
mod1 <- lm(EDSS ~ Sensory, data = dat)
mod1 |> tbl_regression(intercept = T)
#| label: clm
#| warning: false
dat$EDSS <- factor(dat$EDSS) # format EDSS as factor
mod2 <- clm(EDSS ~ factor(Sensory), data = dat, link = "logit")
mod2 |> tbl_regression(exponentiate = T, intercept = T)
#| label: propodds
#| warning: false
library(gofcat)
brant.test(mod2)
#| label: predict
#| warning: false
# Create new dataframe to predict on
newdat <- data.frame(Sensory = c(0, 1)) |>
mutate(Sensory = factor(Sensory))
# Predict on the linear (log-odds) scale
mod2predict  <- cbind(newdat, predict(mod2, newdat, interval = T, type = "prob"))
mod2predict
# Put estimated probabilities into long format
dat_long_est <- mod2predict |>
pivot_longer(2:13,
names_to = "outcome_val",
values_to = "pred_prob") |>
select(Sensory, outcome_val, pred_prob)
# Put estimated lower CI into long format
dat_long_lowerci <- mod2predict |>
pivot_longer(14:25,
names_to = "outcome_val",
values_to = "pred_lowerci") |>
select(Sensory, outcome_val, pred_lowerci)
# Put estimated upper CI into long format
dat_long_upperci <- mod2predict |>
pivot_longer(26:37,
names_to = "outcome_val",
values_to = "pred_upperci") |>
select(Sensory, outcome_val, pred_upperci)
# cbind together
dat_long <- cbind(dat_long_est, dat_long_lowerci[3], dat_long_upperci[3])
dat_long <- dat_long |>
mutate(EDSS = as.numeric(str_sub(outcome_val, 5, -1)))
# Plot
ggplot(dat_long, aes(x = EDSS, y = pred_prob)) +
geom_point(aes(color = Sensory), position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = pred_lowerci, ymax = pred_upperci, color = Sensory), position = position_dodge(width = 0.5), width = 0.3) +
scale_x_continuous(limits = c(0, 6), breaks = seq(0, 6, by = 0.5)) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
scale_color_manual(values = c("#E69F00", "#56B4E9")) +
xlab("EDSS") + ylab("Predicted Probability") +
theme_bw(base_size = 20)
#| label: load data
#| include: false
dat <- read.csv("/Users/paulsanfilippo/Dropbox/Alfred Neuroscience/zz_test_site/posts/011_03May_2024/Supplementary Table 1 for patient info .csv", header = T)
#| label: data
head(dat, 10)
#| label: boxplot
#| warning: false
library(ggplot2)
library(tidyverse)
library(gtsummary)
library(ordinal)
library(ggeffects)
ggplot(dat, aes(x = factor(Sensory), y = EDSS)) +
geom_boxplot() +
geom_dotplot(binaxis = 'y', stackdir = 'center', position = position_dodge(1), dotsize = 0.8) +
xlab("Sensory Symptoms") +
theme_bw(base_size = 20)
#| label: lm
#| warning: false
mod1 <- lm(EDSS ~ Sensory, data = dat)
mod1 |> tbl_regression(intercept = T)
#| label: clm
#| warning: false
dat$EDSS <- factor(dat$EDSS) # format EDSS as factor
mod2 <- clm(EDSS ~ factor(Sensory), data = dat, link = "logit")
mod2 |> tbl_regression(exponentiate = T, intercept = T)
#| label: propodds
#| warning: false
library(gofcat)
brant.test(mod2)
#| label: predict
#| warning: false
# Create new dataframe to predict on
newdat <- data.frame(Sensory = c(0, 1)) |>
mutate(Sensory = factor(Sensory))
# Predict on the linear (log-odds) scale
mod2predict  <- cbind(newdat, predict(mod2, newdat, interval = T, type = "prob"))
# Put estimated probabilities into long format
dat_long_est <- mod2predict |>
pivot_longer(2:13,
names_to = "outcome_val",
values_to = "pred_prob") |>
select(Sensory, outcome_val, pred_prob)
# Put estimated lower CI into long format
dat_long_lowerci <- mod2predict |>
pivot_longer(14:25,
names_to = "outcome_val",
values_to = "pred_lowerci") |>
select(Sensory, outcome_val, pred_lowerci)
# Put estimated upper CI into long format
dat_long_upperci <- mod2predict |>
pivot_longer(26:37,
names_to = "outcome_val",
values_to = "pred_upperci") |>
select(Sensory, outcome_val, pred_upperci)
# cbind together
dat_long <- cbind(dat_long_est, dat_long_lowerci[3], dat_long_upperci[3])
# Create EDSS variable from outcome_val
dat_long <- dat_long |>
mutate(EDSS = as.numeric(str_sub(outcome_val, 5, -1)))
# Plot
ggplot(dat_long, aes(x = EDSS, y = pred_prob)) +
geom_point(aes(color = Sensory), position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = pred_lowerci, ymax = pred_upperci, color = Sensory), position = position_dodge(width = 0.2), width = 0.5) +
scale_x_continuous(limits = c(0, 6), breaks = seq(0, 6, by = 0.5)) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
scale_color_manual(values = c("#E69F00", "#56B4E9")) +
xlab("EDSS") + ylab("Predicted Probability") +
theme_bw(base_size = 20)
# Plot
ggplot(dat_long, aes(x = EDSS, y = pred_prob)) +
geom_point(aes(color = Sensory), position = position_dodge(width = 0.2)) +
geom_errorbar(aes(ymin = pred_lowerci, ymax = pred_upperci, color = Sensory), position = position_dodge(width = 0.2), width = 0.5) +
scale_x_continuous(limits = c(0, 6), breaks = seq(0, 6, by = 0.5)) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
scale_color_manual(values = c("#E69F00", "#56B4E9")) +
xlab("EDSS") + ylab("Predicted Probability") +
theme_bw(base_size = 20)
warnings()
warnings()
