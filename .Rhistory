#font_import()
loadfonts()
# Read in the base Christmas tree data
ChristmasTree <- read.csv("https://raw.githubusercontent.com/t-redactyl/Blog-posts/master/Christmas%20tree%20base%20data.csv")
ChristmasTree$Tree.Colour[ChristmasTree$Tree.Colour == "#143306"] <- "green4"
# Generate the "lights"
Desired.Lights <- 150
Total.Lights <- sum(round(Desired.Lights * 0.35) + round(Desired.Lights * 0.20) +
round(Desired.Lights * 0.17) + round(Desired.Lights * 0.13) +
round(Desired.Lights * 0.10) + round(Desired.Lights * 0.05))
Lights <- data.frame(Lights.X = c(round(runif(round(Desired.Lights * 0.35), 4, 18), 0),
round(runif(round(Desired.Lights * 0.20), 5, 17), 0),
round(runif(round(Desired.Lights * 0.17), 6, 16), 0),
round(runif(round(Desired.Lights * 0.13), 7, 15), 0),
round(runif(round(Desired.Lights * 0.10), 8, 14), 0),
round(runif(round(Desired.Lights * 0.05), 10, 12), 0)))
Lights$Lights.Y <- c(round(runif(round(Desired.Lights * 0.35), 4, 6), 0),
round(runif(round(Desired.Lights * 0.20), 7, 8), 0),
round(runif(round(Desired.Lights * 0.17), 9, 10), 0),
round(runif(round(Desired.Lights * 0.13), 11, 12), 0),
round(runif(round(Desired.Lights * 0.10), 13, 14), 0),
round(runif(round(Desired.Lights * 0.05), 15, 17), 0))
Lights$Lights.Colour <- c(round(runif(Total.Lights, 1, 3), 0))
# Generate the "baubles"
Baubles <- data.frame(Bauble.X = c(6, 9, 15, 17, 5, 13, 16, 7, 10, 14, 7, 9, 11,
14, 8, 14, 9, 12, 11, 12, 14, 11, 17, 10))
Baubles$Bauble.Y <- c(4, 5, 4, 4, 5, 5, 5, 6, 6, 6, 8, 8, 8, 8, 10,
10, 11, 11, 12, 13, 10, 16, 7, 14)
Baubles$Bauble.Colour <- factor(c(1, 2, 2, 3, 2, 3, 1, 3, 1, 1, 1, 2, 1, 2,
3, 3, 2, 1, 3, 2, 1, 3, 3, 1))
Baubles$Bauble.Size <- c(6, 18, 6, 6, 12, 6, 12, 12, 12, 6, 6, 6, 18, 18, 18, 12, 18,
6, 6, 12, 12, 18, 18, 12)
# Generate the plot
p <- ggplot() +
geom_tile(data = ChristmasTree, aes(x = Tree.X, y = Tree.Y, fill = Tree.Colour)) +
scale_fill_identity() +
geom_point(data = Lights, aes(x = Lights.X, y = Lights.Y), color = "lightgoldenrodyellow",
shape = 8) +
geom_point(data = Baubles, aes(x = Bauble.X, y = Bauble.Y, colour = Bauble.Colour), size = Baubles$Bauble.Size,
shape = 16) +
scale_colour_manual(values = c("firebrick2", "gold", "blue3")) +
scale_size_area(max_size = 12) +
theme_bw() +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
geom_segment(aes(x = 2.5, xend = 4.5, y = 1.5, yend = 1.5), colour = "blueviolet", size = 2) +
geom_segment(aes(x = 5.5, xend = 8.5, y = 1.5, yend = 1.5), colour = "dodgerblue3", size = 2) +
geom_segment(aes(x = 13.5, xend = 16.5, y = 1.5, yend = 1.5), colour = "blueviolet", size = 2) +
geom_segment(aes(x = 17.5, xend = 19.5, y = 1.5, yend = 1.5), colour = "dodgerblue3", size = 2) +
geom_segment(aes(x = 3.5, xend = 3.5, y = 0.5, yend = 2.5), colour = "blueviolet", size = 2) +
geom_segment(aes(x = 7.0, xend = 7.0, y = 0.5, yend = 2.5), colour = "dodgerblue3", size = 2) +
geom_segment(aes(x = 15.0, xend = 15.0, y = 0.5, yend = 2.5), colour = "blueviolet", size = 2) +
geom_segment(aes(x = 18.5, xend = 18.5, y = 0.5, yend = 2.5), colour = "dodgerblue3", size = 2) +
annotate("text", x = 11, y = 20, label = "Merry Christmas!",family = "Luminari", color = "white",
size = 12) +
transition_states(states=Lights.Colour, transition_length = 0, state_length = 0.0001) +
labs(x = "", y = "") +
theme(legend.position = "none") +
theme(panel.background = element_rect(fill = 'midnightblue', colour = "yellow"))
#p
animate(p)
animate(p, nframe = 1, fps, 1)
animate(p, nframe = 1, fps = 1)
animate(p, nframe = 100, fps = 1)
animate(p, nframe = 10, fps = 10)
animate(p, nframe = 10, fps = 100)
animate(p, nframe = 10, fps = 20)
#| message: false
#| warning: false
library(survival)
library(survminer)
data(heart, package = "survival")
head(jasa)
mod <- glm(event ~ transplant, jasa1)
mod <- glm(event ~ transplant, jasa1, family = "binomial")
summary(mod)
jasa1$pred <- predict(mod, jasa1)
View(jasa1)
jasa1$pred <- predict(mod, jasa1, type = "response")
#| label: survival trajectories
# Create 'id' variable
jasa$id <- seq(1:dim(jasa)[1])
# Copy to temp df
temp <- jasa
#
temp$wait.time[is.na(temp$wait.time)] <- temp$futime[is.na(temp$wait.time)]
temp |> # Use this to sort 2 groups in plot
ggplot(aes(x = id, y = futime)) +
geom_linerange(aes(ymin = 0, ymax = wait.time), color = "#E7B800", linewidth = 1) +
geom_linerange(aes(ymin = wait.time, ymax = futime), color = "#2E9FDF", linewidth = 1) +
geom_point(aes(shape = factor(fustat)), stroke = 1, cex = 1, color = "black") +
scale_shape_manual(values = c(1, 3), labels = c("Censored", "Died"), name = "Outcome") +
annotate("text", x = 95, y = 1400, label = "Observation time = yellow - untransplanted", size = 5, color = "#E7B800") +
annotate("text", x = 92, y = 1380, label = "Observation time = blue - post-transplant", size = 5, color = "#2E9FDF") +
ggtitle("Survival Trajectories for Heart Transplant Patients") +
ylab("Time (days)") +
xlab("Patient Number") +
coord_flip() +
theme_bw(base_size = 15) +
theme(axis.text.y = element_text(size = 15))
View(temp)
#| label: correct Cox
mod_naive <- coxph(Surv(start, stop, event) ~ transplant, data = jasa1)
#| label: correct Cox
mod_correct <- coxph(Surv(start, stop, event) ~ transplant, data = jasa1)
#| label: load data
#| message: false
#| warning: false
library(survival)
library(survminer)
library(gtsummary)
data(heart, package = "survival")
head(jasa)
#| label: survival trajectories
# Create 'id' variable
jasa$id <- seq(1:dim(jasa)[1])
# Copy to temp df
temp <- jasa
# Replace wait.time with futime if didn't undergo transplant
temp$wait.time[is.na(temp$wait.time)] <- temp$futime[is.na(temp$wait.time)]
# Plot
temp |>
ggplot(aes(x = id, y = futime)) +
geom_linerange(aes(ymin = 0, ymax = wait.time), color = "#E7B800", linewidth = 1) +
geom_linerange(aes(ymin = wait.time, ymax = futime), color = "#2E9FDF", linewidth = 1) +
geom_point(aes(shape = factor(fustat)), stroke = 1, cex = 1, color = "black") +
scale_shape_manual(values = c(1, 3), labels = c("Censored", "Died"), name = "Outcome") +
annotate("text", x = 95, y = 1400, label = "Observation time = yellow - untransplanted", size = 5, color = "#E7B800") +
annotate("text", x = 92, y = 1380, label = "Observation time = blue - post-transplant", size = 5, color = "#2E9FDF") +
ggtitle("Survival Trajectories for Heart Transplant Patients") +
ylab("Time (days)") +
xlab("Patient Number") +
coord_flip() +
theme_bw(base_size = 20) +
theme(axis.text.y = element_text(size = 15))
#| label: naive KM curve
fit <- survfit(Surv(futime, fustat) ~ transplant, data = jasa)
ggsurvplot(fit,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE,
risk.table.col = "strata",
linetype = "strata",
surv.median.line = "hv",
ggtheme = theme_bw(base_size = 20),
palette = c("#E7B800", "#2E9FDF"))
#| label: naive Cox
mod_naive <- coxph(Surv(futime, fustat) ~ transplant, data = jasa)
tbl_regression(mod_naive, exp = T)
#| label: correct Cox
mod_correct <- coxph(Surv(start, stop, event) ~ transplant, data = jasa1)
tbl_regression(mod_correct, exp = T)
#| label: naive Cox
mod_naive <- coxph(Surv(futime, fustat) ~ transplant, data = jasa)
tbl_regression(mod_naive, exp = T)
survfit(Surv(start, stop, event) ~ transplant, data = jasa1)
ggsurvplot(fit_correct,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE,
risk.table.col = "strata",
linetype = "strata",
surv.median.line = "hv",
ggtheme = theme_bw(base_size = 20),
palette = c("#E7B800", "#2E9FDF"))
fit_correct <- survfit(Surv(start, stop, event) ~ transplant, data = jasa1)
ggsurvplot(fit_correct,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE,
risk.table.col = "strata",
linetype = "strata",
surv.median.line = "hv",
ggtheme = theme_bw(base_size = 20),
palette = c("#E7B800", "#2E9FDF"))
plot(fit_correct)
#| label: correct KM curve
fit_correct <- survfit(Surv(start, stop, event) ~ transplant, data = jasa1)
ggsurvplot(fit_correct,
#pval = TRUE, conf.int = TRUE,
risk.table = TRUE,
risk.table.col = "strata",
linetype = "strata",
surv.median.line = "hv",
ggtheme = theme_bw(base_size = 20),
palette = c("#E7B800", "#2E9FDF"))
#| label: load data
#| message: false
#| warning: false
library(survival)
library(survminer)
library(gtsummary)
library(dplyr)
data(heart, package = "survival")
head(jasa)
#| label: tmerge
# Create subset of data selecting relevant variables
jasa_subset <- jasa |>
select(id, wait.time, transplant, fu.time, fustat)
#| label: tmerge
# Create subset of data selecting relevant variables
jasa_subset <- jasa |>
select(id, wait.time, transplant, futime, fustat)
#| label: load data
#| message: false
#| warning: false
library(survival)
library(survminer)
library(gtsummary)
library(dplyr)
data(heart, package = "survival")
head(jasa)
#| label: survival trajectories
# Create 'id' variable
jasa$id <- seq(1:dim(jasa)[1])
# Copy to temp df
temp <- jasa
# Replace wait.time with futime if didn't undergo transplant
temp$wait.time[is.na(temp$wait.time)] <- temp$futime[is.na(temp$wait.time)]
# Plot
temp |>
ggplot(aes(x = id, y = futime)) +
geom_linerange(aes(ymin = 0, ymax = wait.time), color = "#E7B800", linewidth = 1) +
geom_linerange(aes(ymin = wait.time, ymax = futime), color = "#2E9FDF", linewidth = 1) +
geom_point(aes(shape = factor(fustat)), stroke = 1, cex = 1, color = "black") +
scale_shape_manual(values = c(1, 3), labels = c("Censored", "Died"), name = "Outcome") +
annotate("text", x = 95, y = 1400, label = "Observation time = yellow - untransplanted", size = 5, color = "#E7B800") +
annotate("text", x = 92, y = 1380, label = "Observation time = blue - post-transplant", size = 5, color = "#2E9FDF") +
ggtitle("Survival Trajectories for Heart Transplant Patients") +
ylab("Time (days)") +
xlab("Patient Number") +
coord_flip() +
theme_bw(base_size = 20) +
theme(axis.text.y = element_text(size = 15))
#| label: naive KM curve
fit_naive <- survfit(Surv(futime, fustat) ~ transplant, data = jasa)
ggsurvplot(fit_naive,
risk.table = TRUE,
risk.table.col = "strata",
linetype = "strata",
surv.median.line = "hv",
ggtheme = theme_bw(base_size = 20),
palette = c("#E7B800", "#2E9FDF"))
#| label: naive Cox
mod_naive <- coxph(Surv(futime, fustat) ~ transplant, data = jasa)
tbl_regression(mod_naive, exp = T)
#| label: tmerge
# Create subset of data selecting relevant variables
jasa_subset <- jasa |>
select(id, wait.time, transplant, fu.time, fustat)
#| label: tmerge
# Create subset of data selecting relevant variables
jasa_subset <- jasa |>
select(id, wait.time, transplant, futime, fustat)
View(jasa_subset)
#| label: tmerge
# Create subset of data selecting relevant variables
jasa_subset <- jasa |>
select(id, transplant, wait.time, futime, fustat)
View(temp)
#| label: load data
#| message: false
#| warning: false
library(survival)
library(survminer)
library(gtsummary)
library(dplyr)
data(heart, package = "survival")
head(jasa)
#| label: survival trajectories
# Create 'id' variable
jasa$id <- seq(1:dim(jasa)[1])
# Replace wait.time with futime if didn't undergo transplant
jasa$wait.time[is.na(temp$wait.time)] <- jasa$futime[is.na(temp$wait.time)]
# Plot
jasa |>
ggplot(aes(x = id, y = futime)) +
geom_linerange(aes(ymin = 0, ymax = wait.time), color = "#E7B800", linewidth = 1) +
geom_linerange(aes(ymin = wait.time, ymax = futime), color = "#2E9FDF", linewidth = 1) +
geom_point(aes(shape = factor(fustat)), stroke = 1, cex = 1, color = "black") +
scale_shape_manual(values = c(1, 3), labels = c("Censored", "Died"), name = "Outcome") +
annotate("text", x = 95, y = 1400, label = "Observation time = yellow - untransplanted", size = 5, color = "#E7B800") +
annotate("text", x = 92, y = 1380, label = "Observation time = blue - post-transplant", size = 5, color = "#2E9FDF") +
ggtitle("Survival Trajectories for Heart Transplant Patients") +
ylab("Time (days)") +
xlab("Patient Number") +
coord_flip() +
theme_bw(base_size = 20) +
theme(axis.text.y = element_text(size = 15))
#| label: naive KM curve
fit_naive <- survfit(Surv(futime, fustat) ~ transplant, data = jasa)
ggsurvplot(fit_naive,
risk.table = TRUE,
risk.table.col = "strata",
linetype = "strata",
surv.median.line = "hv",
ggtheme = theme_bw(base_size = 20),
palette = c("#E7B800", "#2E9FDF"))
#| label: naive Cox
mod_naive <- coxph(Surv(futime, fustat) ~ transplant, data = jasa)
tbl_regression(mod_naive, exp = T)
#| label: tmerge
# Create subset of data selecting relevant variables
jasa_subset <- jasa |>
select(id, transplant, wait.time, futime, fustat)
jasa_cp <- tmerge(data1 = jasa_subset |> select(id, futime, fustat),
data2 = jasa_subset |> select(id, futime, fustat, wait.time, transplant),
id = id,
death = event(futime, fustat),
transplant = tdc(transplant))
#| label: tmerge
# Create subset of data selecting relevant variables
jasa_subset <- jasa |>
select(id, transplant, wait.time, futime, fustat)
#| label: load data
#| message: false
#| warning: false
library(survival)
library(survminer)
library(gtsummary)
library(dplyr)
data(heart, package = "survival")
head(jasa)
#| label: survival trajectories
# Create 'id' variable
jasa$id <- seq(1:dim(jasa)[1])
# Replace wait.time with futime if didn't undergo transplant
jasa$wait.time[is.na(jasa$wait.time)] <- jasa$futime[is.na(jasa$wait.time)]
# Plot
jasa |>
ggplot(aes(x = id, y = futime)) +
geom_linerange(aes(ymin = 0, ymax = wait.time), color = "#E7B800", linewidth = 1) +
geom_linerange(aes(ymin = wait.time, ymax = futime), color = "#2E9FDF", linewidth = 1) +
geom_point(aes(shape = factor(fustat)), stroke = 1, cex = 1, color = "black") +
scale_shape_manual(values = c(1, 3), labels = c("Censored", "Died"), name = "Outcome") +
annotate("text", x = 95, y = 1400, label = "Observation time = yellow - untransplanted", size = 5, color = "#E7B800") +
annotate("text", x = 92, y = 1380, label = "Observation time = blue - post-transplant", size = 5, color = "#2E9FDF") +
ggtitle("Survival Trajectories for Heart Transplant Patients") +
ylab("Time (days)") +
xlab("Patient Number") +
coord_flip() +
theme_bw(base_size = 20) +
theme(axis.text.y = element_text(size = 15))
#| label: naive KM curve
fit_naive <- survfit(Surv(futime, fustat) ~ transplant, data = jasa)
ggsurvplot(fit_naive,
risk.table = TRUE,
risk.table.col = "strata",
linetype = "strata",
surv.median.line = "hv",
ggtheme = theme_bw(base_size = 20),
palette = c("#E7B800", "#2E9FDF"))
#| label: naive Cox
mod_naive <- coxph(Surv(futime, fustat) ~ transplant, data = jasa)
tbl_regression(mod_naive, exp = T)
#| label: tmerge
# Create subset of data selecting relevant variables
jasa_subset <- jasa |>
select(id, transplant, wait.time, futime, fustat)
jasa_cp <- tmerge(data1 = jasa_subset |> select(id, futime, fustat),
data2 = jasa_subset |> select(id, futime, fustat, wait.time, transplant),
id = id,
death = event(futime, fustat),
transplant = tdc(transplant))
#| label: tmerge
# Create subset of data selecting relevant variables
jasa_subset <- jasa |>
select(id, transplant, wait.time, futime, fustat)
jasa_cp <- tmerge(data1 = jasa_subset |> select(id, futime, fustat),
data2 = jasa_subset |> select(id, futime, fustat, wait.time, transplant),
id = id,
death = event(futime, fustat),
a = tdc(transplant))
View(jasa)
jasa_subset$futime[jasa_subset$futime == 0] <- 0.5
jasa_cp <- tmerge(data1 = jasa_subset |> select(id, futime, fustat),
data2 = jasa_subset |> select(id, futime, fustat, wait.time, transplant),
id = id,
death = event(futime, fustat),
transplant = tdc(transplant))
View(jasa_cp)
#| label: tmerge
# Create subset of data selecting relevant variables
jasa_subset <- jasa |>
select(id, transplant, wait.time, futime, fustat)
jasa_subset$futime[jasa_subset$futime == 0] <- 0.5
jasa_cp <- tmerge(data1 = jasa_subset |> select(id, futime, fustat),
data2 = jasa_subset |> select(id, futime, fustat, wait.time, transplant),
a = id,
death = event(futime, fustat),
b = tdc(transplant))
#| label: load data
#| message: false
#| warning: false
library(survival)
library(survminer)
library(gtsummary)
library(dplyr)
data(heart, package = "survival")
head(jasa)
#| label: survival trajectories
# Create 'id' variable
jasa$id <- seq(1:dim(jasa)[1])
# Replace wait.time with futime if didn't undergo transplant
jasa$wait.time[is.na(jasa$wait.time)] <- jasa$futime[is.na(jasa$wait.time)]
# Plot
jasa |>
ggplot(aes(x = id, y = futime)) +
geom_linerange(aes(ymin = 0, ymax = wait.time), color = "#E7B800", linewidth = 1) +
geom_linerange(aes(ymin = wait.time, ymax = futime), color = "#2E9FDF", linewidth = 1) +
geom_point(aes(shape = factor(fustat)), stroke = 1, cex = 1, color = "black") +
scale_shape_manual(values = c(1, 3), labels = c("Censored", "Died"), name = "Outcome") +
annotate("text", x = 95, y = 1400, label = "Observation time = yellow - untransplanted", size = 5, color = "#E7B800") +
annotate("text", x = 92, y = 1380, label = "Observation time = blue - post-transplant", size = 5, color = "#2E9FDF") +
ggtitle("Survival Trajectories for Heart Transplant Patients") +
ylab("Time (days)") +
xlab("Patient Number") +
coord_flip() +
theme_bw(base_size = 20) +
theme(axis.text.y = element_text(size = 15))
#| label: naive KM curve
fit_naive <- survfit(Surv(futime, fustat) ~ transplant, data = jasa)
ggsurvplot(fit_naive,
risk.table = TRUE,
risk.table.col = "strata",
linetype = "strata",
surv.median.line = "hv",
ggtheme = theme_bw(base_size = 20),
palette = c("#E7B800", "#2E9FDF"))
#| label: naive Cox
mod_naive <- coxph(Surv(futime, fustat) ~ transplant, data = jasa)
tbl_regression(mod_naive, exp = T)
#| label: tmerge
# Create subset of data selecting relevant variables
jasa_subset <- jasa |>
select(id, transplant, wait.time, futime, fustat)
jasa_subset$futime[jasa_subset$futime == 0] <- 0.5
jasa_cp <- tmerge(data1 = jasa_subset |> select(id, futime, fustat),
data2 = jasa_subset |> select(id, futime, fustat, wait.time, transplant),
a = id,
death = event(futime, fustat),
b = tdc(transplant))
#| label: tmerge
# Create subset of data selecting relevant variables
jasa_subset <- jasa |>
select(id, transplant, wait.time, futime, fustat)
jasa_subset$futime[jasa_subset$futime == 0] <- 0.5
jasa_cp <- tmerge(data1 = jasa_subset |> select(id, futime, fustat),
data2 = jasa_subset |> select(id, futime, fustat, wait.time, transplant),
id = id,
death = event(futime, fustat),
transplant = tdc(transplant))
View(jasa_cp)
View(jasa)
View(jasa_subset)
str(jasa_subset
)
#| label: tmerge
# Create subset of data selecting relevant variables
jasa_subset <- jasa |>
select(id, transplant, wait.time, futime, fustat)
jasa_subset$futime[jasa_subset$futime == 0] <- 0.5
jasa_cp <- tmerge(data1 = jasa_subset |> select(id, futime, fustat),
data2 = jasa_subset |> select(id, wait.time, transplant),
id = id,
death = event(futime, fustat),
transplant = tdc(transplant))
#| label: tmerge
# Create subset of data selecting relevant variables
jasa_subset <- jasa |>
select(id, transplant, wait.time, futime, fustat)
jasa_subset$futime[jasa_subset$futime == 0] <- 0.5
jasa_cp <- tmerge(data1 = jasa_subset |> select(id, futime, fustat),
data2 = jasa_subset |> select(id, futime, wait.time, transplant),
id = id,
death = event(futime, fustat),
transplant = tdc(transplant))
#| label: tmerge
# Create subset of data selecting relevant variables
jasa_subset <- jasa |>
select(id, transplant, wait.time, futime, fustat)
jasa_subset$futime[jasa_subset$futime == 0] <- 0.5
jasa_cp <- tmerge(data1 = jasa_subset |> select(id, futime, fustat),
data2 = jasa_subset |> select(id, futime, fustat, wait.time, transplant),
id = id,
death = event(futime, fustat),
transplant = tdc(transplant))
View(jasa1)
#| label: tmerge
# Create subset of data selecting relevant variables
jasa_subset <- jasa |>
select(id, transplant, wait.time, futime, fustat)
jasa_subset$futime[jasa_subset$futime == 0] <- 0.5
jasa_cp <- tmerge(data1 = jasa_subset |> select(id, futime, fustat),
data2 = jasa_subset |> select(id, futime, fustat, wait.time, transplant),
id = id,
death = event(futime, fustat),
transplant = tdc(wait.time))
#| label: tmerge
# Create subset of data selecting relevant variables
jasa_subset <- jasa |>
select(id, transplant, wait.time, futime, fustat)
jasa_subset$futime[jasa_subset$futime == 0] <- 0.5
jasa_cp <- tmerge(data1 = jasa_subset |> select(id, futime, fustat),
data2 = jasa_subset |> select(id, futime, fustat, wait.time, transplant),
id = id,
death = event(futime, fustat),
transplant = tdc(wait.time)) |>
select(-c(futime, fustat))
View(jasa1)
#| label: correct Cox
mod_correct <- coxph(Surv(start, stop, event) ~ transplant, data = jasa1)
tbl_regression(mod_correct, exp = T)
mod_correct2 <- coxph(Surv(tstart, tstop, death) ~ transplant, data = jasa_cp)
tbl_regression(mod_correct2, exp = T)
