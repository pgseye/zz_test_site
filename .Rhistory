}
} else {
print("There aren't that many groups in your dataset")
}
}
# Use function
print_groups(sleepstudy, Subject, 1, 3)
rm(list = ls())
library(lme4)
library(dplyr)
# Load data
data("sleepstudy")
print_groups <- function(df, id, index1, index2) {
ids_all <-  unique(eval(substitute(id), df))
ids_range <- ids_all[index1:index2]
if (index1 <= length(ids_all) & index2 <= length(ids_all)) {
for (id2 in ids_range) {
temp <- df[substitute(id) %in% id2,]
#print(by(temp, temp$id, identity)[id])
cat("----------------------------\n\n")
}
} else {
print("There aren't that many groups in your dataset")
}
}
# Use function
print_groups(sleepstudy, Subject, 1, 3)
rm(list = ls())
library(lme4)
library(dplyr)
# Load data
data("sleepstudy")
print_groups <- function(df, id, index1, index2) {
ids_all <-  unique(eval(substitute(id), df))
ids_range <- ids_all[index1:index2]
if (index1 <= length(ids_all) & index2 <= length(ids_all)) {
for (id2 in ids_range) {
temp <- df[eval(substitute(id), df) %in% id2,]
#print(by(temp, temp$id, identity)[id])
cat("----------------------------\n\n")
}
} else {
print("There aren't that many groups in your dataset")
}
}
# Use function
print_groups(sleepstudy, Subject, 1, 3)
rm(list = ls())
library(lme4)
library(dplyr)
# Load data
data("sleepstudy")
print_groups <- function(df, id, index1, index2) {
ids_all <-  unique(eval(substitute(id), df))
ids_range <- ids_all[index1:index2]
if (index1 <= length(ids_all) & index2 <= length(ids_all)) {
for (id2 in ids_range) {
temp <- df[eval(substitute(id), df) %in% id2,]
print(by(temp, temp$id, identity)[id2])
cat("----------------------------\n\n")
}
} else {
print("There aren't that many groups in your dataset")
}
}
# Use function
print_groups(sleepstudy, Subject, 1, 3)
rm(list = ls())
library(lme4)
library(dplyr)
# Load data
data("sleepstudy")
print_groups <- function(df, id, index1, index2) {
ids_all <-  unique(eval(substitute(id), df))
ids_range <- ids_all[index1:index2]
if (index1 <= length(ids_all) & index2 <= length(ids_all)) {
for (id2 in ids_range) {
temp <- df[eval(substitute(id), df) %in% id2,]
print(temp)
#print(by(temp, temp$id, identity)[id2])
cat("----------------------------\n\n")
}
} else {
print("There aren't that many groups in your dataset")
}
}
# Use function
print_groups(sleepstudy, Subject, 1, 3)
rm(list = ls())
library(lme4)
library(dplyr)
# Load data
data("sleepstudy")
print_groups <- function(df, id, index1, index2) {
ids_all <-  unique(eval(substitute(id), df))
ids_range <- ids_all[index1:index2]
if (index1 <= length(ids_all) & index2 <= length(ids_all)) {
for (id in ids_range) {
temp <- df[eval(substitute(id), df) %in% id,]
print(temp)
#print(by(temp, temp$id, identity)[id2])
cat("----------------------------\n\n")
}
} else {
print("There aren't that many groups in your dataset")
}
}
# Use function
print_groups(sleepstudy, Subject, 1, 3)
rm(list = ls())
library(lme4)
library(dplyr)
# Load data
data("sleepstudy")
print_groups <- function(df, id, index1, index2) {
ids_all <-  unique(eval(substitute(id), df))
ids_range <- ids_all[index1:index2]
if (index1 <= length(ids_all) & index2 <= length(ids_all)) {
for (id2 in ids_range) {
temp <- df[eval(substitute(id), df) %in% id2,]
print(temp)
#print(by(temp, temp$id, identity)[id2])
cat("----------------------------\n\n")
}
} else {
print("There aren't that many groups in your dataset")
}
}
# Use function
print_groups(sleepstudy, Subject, 1, 3)
rm(list = ls())
library(lme4)
library(dplyr)
# Load data
data("sleepstudy")
print_groups <- function(df, id, index1, index2) {
ids_all <-  unique(eval(substitute(id), df))
ids_range <- ids_all[index1:index2]
if (index1 <= length(ids_all) & index2 <= length(ids_all)) {
for (id2 in ids_range) {
temp <- df[eval(substitute(id), df) %in% id2,]
print(temp)
print(by(temp, temp$id, identity)[id2])
cat("----------------------------\n\n")
}
} else {
print("There aren't that many groups in your dataset")
}
}
# Use function
print_groups(sleepstudy, Subject, 1, 3)
rm(list = ls())
library(lme4)
library(dplyr)
# Load data
data("sleepstudy")
print_groups <- function(df, id, index1, index2) {
ids_all <-  unique(eval(substitute(id), df))
ids_range <- ids_all[index1:index2]
if (index1 <= length(ids_all) & index2 <= length(ids_all)) {
for (id2 in ids_range) {
print(df[eval(substitute(id), df) %in% id2,])
cat("----------------------------\n\n")
}
} else {
print("There aren't that many groups in your dataset")
}
}
# Use function
print_groups(sleepstudy, Subject, 1, 3)
rm(list = ls())
library(lme4)
library(dplyr)
# Load data
data("sleepstudy")
print_groups <- function(df, id, index1, index2) {
ids_all <-  unique(eval(substitute(id), df))
ids_range <- ids_all[index1:index2]
if (index1 <= length(ids_all) & index2 <= length(ids_all)) {
for (id2 in ids_range) {
print(df[eval(substitute(id), df) %in% id2,])
cat("----------------------------\n\n")
}
} else {
print("There aren't that many groups in your dataset")
}
}
# Use function
print_groups(sleepstudy, Subject, 5, 8)
ids_range
rm(list = ls())
library(lme4)
library(dplyr)
# Load data
data("sleepstudy")
print_groups <- function(df, id, index1, index2) {
ids_all <-  unique(eval(substitute(id), df))
ids_range <- ids_all[index1:index2]
if (index1 <= length(ids_all) & index2 <= length(ids_all)) {
for (id2 in ids_range) {
print(df[eval(substitute(id), df) %in% id2,])
cat("----------------------------\n\n")
}
} else {
print("There aren't that many groups in your dataset")
}
}
# Use function
print_groups(sleepstudy, Subject, 5, 8)
unique(sleepstudy$Subject)[5:8]
# Use function
print_groups(sleepstudy, Subject, 5, 18)
# Use function
print_groups(sleepstudy, Subject, 5, 19)
# Use function
print_groups(sleepstudy, Subject, 18, 18)
View(sleepstudy)
rm(list = ls())
library(lme4)
library(dplyr)
# Load data
data("sleepstudy")
print_groups <- function(df, id, index1, index2) {
ids_all <-  unique(eval(substitute(id), df))
ids_range <- ids_all[index1:index2]
if (index1 <= length(ids_all) & index2 <= length(ids_all)) {
for (id2 in ids_range) {
print(paste0("id =", id2))
print(df[eval(substitute(id), df) %in% id2,])
cat("----------------------------\n\n")
}
} else {
print("There aren't that many groups in your dataset")
}
}
# Use function
print_groups(sleepstudy, Subject, 18, 18)
# Use function
print_groups(sleepstudy, Subject, 12, 18)
rm(list = ls())
library(lme4)
library(dplyr)
# Load data
data("sleepstudy")
print_groups <- function(df, id, index1, index2) {
ids_all <-  unique(eval(substitute(id), df))
ids_range <- ids_all[index1:index2]
if (index1 <= length(ids_all) & index2 <= length(ids_all)) {
for (id2 in ids_range) {
print(paste0("id = ", id2))
print(df[eval(substitute(id), df) %in% id2,])
cat("----------------------------\n\n")
}
} else {
print("There aren't that many groups in your dataset")
}
}
# Use function
print_groups(sleepstudy, Subject, 12, 18)
rm(list = ls())
library(lme4)
library(dplyr)
# Load data
data("sleepstudy")
print_groups <- function(df, id, index1, index2) {
ids_all <-  unique(eval(substitute(id), df))
ids_range <- ids_all[index1:index2]
if (index1 <= length(ids_all) & index2 <= length(ids_all)) {
for (id2 in ids_range) {
cat(paste0("id = ", id2))
print(df[eval(substitute(id), df) %in% id2,])
cat("----------------------------\n\n")
}
} else {
print("There aren't that many groups in your dataset")
}
}
# Use function
print_groups(sleepstudy, Subject, 12, 18)
rm(list = ls())
library(lme4)
library(dplyr)
# Load data
data("sleepstudy")
print_groups <- function(df, id, index1, index2) {
ids_all <-  unique(eval(substitute(id), df))
ids_range <- ids_all[index1:index2]
if (index1 <= length(ids_all) & index2 <= length(ids_all)) {
for (id2 in ids_range) {
cat(paste0("id = ", id2)"\n")
rm(list = ls())
library(lme4)
library(dplyr)
# Load data
data("sleepstudy")
print_groups <- function(df, id, index1, index2) {
ids_all <-  unique(eval(substitute(id), df))
ids_range <- ids_all[index1:index2]
if (index1 <= length(ids_all) & index2 <= length(ids_all)) {
for (id2 in ids_range) {
cat(paste0("id = ", id2, "\n"))
print(df[eval(substitute(id), df) %in% id2,])
cat("----------------------------\n\n")
}
} else {
print("There aren't that many groups in your dataset")
}
}
# Use function
print_groups(sleepstudy, Subject, 12, 18)
rm(list = ls())
library(lme4)
library(dplyr)
# Load data
data("sleepstudy")
print_groups <- function(df, id, index1, index2) {
ids_all <-  unique(eval(substitute(id), df))
ids_range <- ids_all[index1:index2]
if (index1 <= length(ids_all) & index2 <= length(ids_all)) {
for (id2 in ids_range) {
cat(paste0("id = ", id2, "\n"))
print(df[eval(substitute(id), df) %in% id2,])
cat("----------------------------\n\n")
}
} else {
print("There aren't that many groups in your dataset")
}
}
# Use function
print_groups(sleepstudy, Subject, 1, 3)
library(lme4)
library(dplyr)
# Load data
data("sleepstudy")
print_groups <- function(df, id, index1, index2) {
ids_all <-  unique(eval(substitute(id), df))
ids_range <- ids_all[index1:index2]
if (index1 <= length(ids_all) & index2 <= length(ids_all)) {
for (id2 in ids_range) {
cat(paste0("id = ", id2, "\n"))
print(df[eval(substitute(id), df) %in% id2,])
cat("----------------------------\n\n")
}
} else {
print("There aren't that many groups in your dataset")
}
}
# Use function
print_groups(sleepstudy, Subject, 1, 3)
print_groups <- function(df, id, index1, index2) {
ids_all <-  unique(eval(substitute(id), df))
ids_range <- ids_all[index1:index2]
if (index1 <= length(ids_all) & index2 <= length(ids_all)) {
for (id2 in ids_range) {
cat(paste0("id = ", id2, "\n"))
print(df[eval(substitute(id), df) %in% id2,], n = Inf)
cat("----------------------------\n\n")
}
} else {
print("There aren't that many groups in your dataset")
}
}
# Use function
print_groups(sleepstudy, Subject, 1, 3)
print_groups <- function(df, id, index1, index2) {
ids_all <-  unique(eval(substitute(id), df))
ids_range <- ids_all[index1:index2]
if (index1 <= length(ids_all) & index2 <= length(ids_all)) {
for (id2 in ids_range) {
cat(paste0("id = ", id2, "\n"))
print(df[eval(substitute(id), df) %in% id2,])
cat("----------------------------\n\n")
}
} else {
print("There aren't that many groups in your dataset")
}
}
# Use function
print_groups(sleepstudy, Subject, 1, 3)
print_groups <- function(df, id, index1, index2) {
ids_all <-  unique(eval(substitute(id), df))
ids_range <- ids_all[index1:index2]
if (index1 <= length(ids_all) & index2 <= length(ids_all)) {
for (id2 in ids_range) {
cat(paste0("id = ", id2, "\n"))
print(df[eval(substitute(id), df) %in% id2,], n = 30)
cat("----------------------------\n\n")
}
} else {
print("There aren't that many groups in your dataset")
}
}
# Use function
print_groups(sleepstudy, Subject, 1, 3)
print_groups <- function(df, id, index1, index2) {
ids_all <-  unique(eval(substitute(id), df))
ids_range <- ids_all[index1:index2]
if (index1 <= length(ids_all) & index2 <= length(ids_all)) {
for (id2 in ids_range) {
cat(paste0("id = ", id2, "\n"))
print(df[eval(substitute(id), df) %in% id2,]) |> print(n = Inf)
cat("----------------------------\n\n")
}
} else {
print("There aren't that many groups in your dataset")
}
}
# Use function
print_groups(sleepstudy, Subject, 1, 3)
print_groups <- function(df, id, index1, index2) {
ids_all <-  unique(eval(substitute(id), df))
ids_range <- ids_all[index1:index2]
if (index1 <= length(ids_all) & index2 <= length(ids_all)) {
for (id2 in ids_range) {
cat(paste0("id = ", id2, "\n"))
print(df[eval(substitute(id), df) %in% id2,], max = 100)
cat("----------------------------\n\n")
}
} else {
print("There aren't that many groups in your dataset")
}
}
# Use function
print_groups(sleepstudy, Subject, 1, 3)
print_groups <- function(df, id, index1, index2) {
ids_all <-  unique(eval(substitute(id), df))
ids_range <- ids_all[index1:index2]
if (index1 <= length(ids_all) & index2 <= length(ids_all)) {
for (id2 in ids_range) {
cat(paste0("id = ", id2, "\n"))
print(df[eval(substitute(id), df) %in% id2,], max = 1000)
cat("----------------------------\n\n")
}
} else {
print("There aren't that many groups in your dataset")
}
}
# Use function
print_groups(sleepstudy, Subject, 1, 3)
print_groups <- function(df, id, index1, index2) {
ids_all <-  unique(eval(substitute(id), df))
ids_range <- ids_all[index1:index2]
if (index1 <= length(ids_all) & index2 <= length(ids_all)) {
for (id2 in ids_range) {
cat(paste0("id = ", id2, "\n"))
print(df[eval(substitute(id), df) %in% id2,], max = Inf)
cat("----------------------------\n\n")
}
} else {
print("There aren't that many groups in your dataset")
}
}
# Use function
print_groups(sleepstudy, Subject, 1, 3)
#| label: load data
#| message: false
#| warning: false
library(survival)
library(survminer)
library(gtsummary)
library(dplyr)
data(heart, package = "survival")
head(jasa)
#| label: survival trajectories
# Create 'id' variable
jasa$id <- seq(1:dim(jasa)[1])
# Replace wait.time with futime if didn't undergo transplant
jasa$wait.time[is.na(jasa$wait.time)] <- jasa$futime[is.na(jasa$wait.time)]
# Plot
jasa |>
ggplot(aes(x = id, y = futime)) +
geom_linerange(aes(ymin = 0, ymax = wait.time), color = "#E7B800", linewidth = 1) +
geom_linerange(aes(ymin = wait.time, ymax = futime), color = "#2E9FDF", linewidth = 1) +
geom_point(aes(shape = factor(fustat)), stroke = 1, cex = 1, color = "black") +
scale_shape_manual(values = c(1, 3), labels = c("Censored", "Died"), name = "Outcome") +
annotate("text", x = 95, y = 1400, label = "Observation time = yellow - untransplanted", size = 5, color = "#E7B800") +
annotate("text", x = 92, y = 1380, label = "Observation time = blue - post-transplant", size = 5, color = "#2E9FDF") +
ggtitle("Survival Trajectories for Heart Transplant Patients") +
ylab("Time (days)") +
xlab("Patient Number") +
coord_flip() +
theme_bw(base_size = 20) +
theme(axis.text.y = element_text(size = 15))
#| label: naive KM curve
fit_naive <- survfit(Surv(futime, fustat) ~ transplant, data = jasa)
ggsurvplot(fit_naive,
risk.table = TRUE,
risk.table.col = "strata",
linetype = "strata",
surv.median.line = "hv",
ggtheme = theme_bw(base_size = 20),
palette = c("#E7B800", "#2E9FDF"))
#| label: naive Cox
mod_naive <- coxph(Surv(futime, fustat) ~ transplant, data = jasa)
tbl_regression(mod_naive, exp = T)
#| label: tmerge
# Create subset of data selecting relevant variables
jasa_subset <- jasa |>
select(id, wait.time, futime, fustat, transplant)
# Can't have an end time of 0 (one obs) - change this to 0.5
jasa_subset$futime[jasa_subset$futime == 0] <- 0.5
# Create dataframe in counting process format
jasa_cp <- tmerge(data1 = jasa_subset |> select(id, futime, fustat),
data2 = jasa_subset |> select(id, futime, fustat, wait.time, transplant),
id = id,
death = event(futime, fustat),
transplant = tdc(wait.time)) |>
select(-c(futime, fustat))
#| label: view original
head(jasa_subset, 7)
#| label: view cp
head(jasa_cp, 9)
