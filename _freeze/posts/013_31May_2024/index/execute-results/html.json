{
  "hash": "f6f0eee382b84ce008c6b04d9c848442",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Logistic regression under the hood\"\ndate: 2024-05-31\ncategories: [code, analysis, modelling, visualisation, probability]\n#image: \"R_small.jpeg\"\ndescription: \"See how log-odds, odds and probability are all simply versions of each other - and fundamental to logistic regression.\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n# Recreate data from Ophthalmic statistics note 11: logistic regression.\n# Original source: A comparison of several methods of macular hole measurement using optical coherence tomography, and their value in predicting anatomical and visual outcomes.\n\nlibrary(tidyverse)\nlibrary(ggpubr)\nlibrary(ggmagnify)\nlibrary(emmeans)\n\n# Simulate data ----\nn <- 1000                    # don't change this unless necessary (plots might be fragile)\nset.seed(1234)\nx  <-  rnorm(n, 486, 142)    # generate macular hole inner opening data with mean 486 and sd = 152\nz  <-  10.89 - 0.016 * x     # generate variable that is linear combination of intercept = 10.89 and coefficient for macular hole -0.016 (logit scale)\npr  <-  1/(1 + exp(-z))      # generate probabilities from this\ny  <-  rbinom(n, 1, pr)      # generate outcome variable as a function of those probabilities\n\n# Create dataframe from these:\ndf <-  data.frame(y = y, x = x, z = z, pr = pr)\ndf <- df |> \n  filter(x > 100) # only include those with thickness > 100\n\n# Logistic regression model ----\n# Rescale x to 1 unit = 100 microns instead of 1 micron\nsummary(mod_logistic <- glm(y ~ I(x/100), data = df, family = \"binomial\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nglm(formula = y ~ I(x/100), family = \"binomial\", data = df)\n\nCoefficients:\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept)  10.3501     0.7456   13.88   <2e-16 ***\nI(x/100)     -1.5045     0.1212  -12.42   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 773.74  on 989  degrees of freedom\nResidual deviance: 494.67  on 988  degrees of freedom\nAIC: 498.67\n\nNumber of Fisher Scoring iterations: 6\n```\n\n\n:::\n\n```{.r .cell-code}\n# Emmeans of logodds at 600 and 700 microns\nemmeans_df <- data.frame(emmeans(mod_logistic, ~ x, at = list(x = c(600, 700))))\n# Create df of emmeans and corresponding odds and probs, for plotting\nemmeans_df <- emmeans_df |> \n  select(x, emmean) |> \n  rename(logodds = emmean) |> \n  mutate(odds = round(exp(logodds), 3),\n         probs = round(plogis(logodds), 2),\n         logodds = round(logodds, 3))\n\n# Predictions ----\n# Create new df to predict on new values of x\nnew_dat <- data.frame(x = seq(from = 0, to = 1200, length.out = 100))\n# Predict new fitted values and SE's on logodds scale\npred_logodds <- predict(mod_logistic, newdata = new_dat, type = \"link\", se = TRUE)\nnew_dat <- cbind(new_dat, pred_logodds)\n# Create new df of predictions\npredictions <- new_dat |> \n  rename(pred_logodds_est = fit) |> \n  mutate(pred_logodds_LL = pred_logodds_est - (1.96 * se.fit),\n         pred_logodds_UL = pred_logodds_est + (1.96 * se.fit)) |> \n  select(-c(se.fit, residual.scale))\n# Predict new fitted values and SE's on odds scale\npredictions <- predictions |> \n  mutate(pred_odds_est = exp(pred_logodds_est),\n         pred_odds_LL = exp(pred_logodds_LL),\n         pred_odds_UL = exp(pred_logodds_UL))\n# Predict new fitted values and SE's on probability scale\npred_probs <- predict(mod_logistic, newdata = new_dat, type = \"response\", se = TRUE)\nnew_dat <- cbind(new_dat[1], pred_probs)\nnew_dat <- new_dat |> \n  mutate(pred_probs_LL = fit - (1.96 * se.fit),\n         pred_probs_UL = fit + (1.96 * se.fit))\n# Add predicted probs and CIs to predictions df\npredictions <- cbind(predictions, \n                     pred_probs_est = new_dat$fit, \n                     pred_probs_LL = new_dat$pred_probs_LL,\n                     pred_probs_UL = new_dat$pred_probs_UL)\n\n# Reformat plots slightly for ggarrange ----\np3a <- ggplot(predictions, aes(x = x, y = pred_logodds_est)) + \n  geom_ribbon(aes(ymin = pred_logodds_LL, ymax = pred_logodds_UL), alpha = 0.2) + \n  geom_line(color = \"cornflowerblue\", linewidth = 1) +\n  geom_point(data = df, aes(x = x, y = y), size = 2, alpha = 0.1) +\n  annotate(\"text\", x = 1150, y = 6, label = \"log-odds\", size = 10) +\n  scale_x_continuous(limits = c(0, 1200), breaks = seq(0, 1200, by = 100)) +\n  scale_y_continuous(limits = c(-100, 100), breaks = seq(-100, 100, by = 2)) +\n  coord_cartesian(xlim = c(0, 1200), ylim = c(-8, 8)) +\n  geom_vline(xintercept = 600, color = \"red\", linetype = \"dotted\", linewidth = 0.6) +\n  geom_vline(xintercept = 700, color = \"red\", linetype = \"dotted\", linewidth = 0.6) +\n  ggrepel::geom_label_repel(data = emmeans_df, aes(x, logodds),\n                            label = emmeans_df$logodds, \n                            nudge_x = c(-50, 50), nudge_y = c(4, -4),\n                            color = \"red\", segment.size = 0.2, size = 5) +\n  theme_bw(base_size = 25) +\n  ylab(\"\") +\n  theme(axis.title.x = element_blank(), axis.text.x = element_blank())\n\np4a <- ggplot(predictions, aes(x = x, y = pred_odds_est)) + \n  geom_ribbon(aes(ymin = pred_odds_LL, ymax = pred_odds_UL), alpha = 0.2) + \n  geom_line(color = \"cornflowerblue\", linewidth = 1) +\n  geom_point(data = df, aes(x = x, y = y), size = 2, alpha = 0.1) +\n  annotate(\"text\", x = 1150, y = 6000, label = \"odds\", size = 10) +\n  scale_x_continuous(limits = c(0, 1200), breaks = seq(0, 1200, by = 100)) +\n  scale_y_continuous(limits = c(-20, 1000000), breaks = c(seq(0, 1000000, by = 1000))) +\n  coord_cartesian(xlim = c(0, 1200), ylim = c(0, 7000)) +\n  geom_vline(xintercept = 600, color = \"red\", linetype = \"dotted\", linewidth = 0.6) +\n  geom_vline(xintercept = 700, color = \"red\", linetype = \"dotted\", linewidth = 0.6) +\n  ylab(\"\") +\n  theme_bw(base_size = 25) +\n  theme(axis.title.x = element_blank(), axis.text.x = element_blank())\np4a_inset <- p4a +\n  scale_y_continuous(limits = c(-20, 1000000), breaks = c(1,2,3,4,5, seq(0, 1000000, by = 1000))) +\n  geom_vline(xintercept = 600, color = \"red\", linetype = \"dotted\", linewidth = 0.6) +\n  geom_vline(xintercept = 700, color = \"red\", linetype = \"dotted\", linewidth = 0.6) +\n  ggrepel::geom_label_repel(data = emmeans_df, aes(x, odds),\n                            label = emmeans_df$odds, \n                            nudge_x = c(-50, 50), nudge_y = c(-1, 2),\n                            color = \"red\", segment.size = 0.2, size = 5)\np4a <- p4a + geom_magnify(from = c(xmin = 500, xmax = 1000, ymin = 0, ymax = 5), \n                          to = c(xmin = 465, xmax = 1010, ymin = 1000, ymax = 5000), \n                          shadow = T, axes = \"y\", plot = p4a_inset)\n\np5a <- ggplot(predictions, aes(x = x, y = pred_probs_est)) + \n  geom_ribbon(aes(ymin = pred_probs_LL, ymax = pred_probs_UL), alpha = 0.2) + \n  geom_line(color = \"cornflowerblue\", linewidth = 1) +\n  geom_point(data = df, aes(x = x, y = y), size = 2, alpha = 0.1) +\n  annotate(\"text\", x = 1150, y = 0.8, label = \"probability\", size = 10) +\n  scale_x_continuous(limits = c(0, 1200), breaks = seq(0, 1200, by = 100)) +\n  scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.2)) +\n  geom_vline(xintercept = 600, color = \"red\", linetype = \"dotted\", linewidth = 0.6) +\n  geom_vline(xintercept = 700, color = \"red\", linetype = \"dotted\", linewidth = 0.6) +\n  ggrepel::geom_label_repel(data = emmeans_df, aes(x, probs),\n                            label = emmeans_df$probs, \n                            nudge_x = c(-50, 50), nudge_y = c(-0.1, 0.1),\n                            color = \"red\", segment.size = 0.2, size = 5) +\n  ylab(\"\") + xlab(\"Macular hole thickness\") +\n  theme_bw(base_size = 25)\nggarrange(p3a, p4a, p5a, align = \"v\", ncol = 1, heights = c(1,1,1.2))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/setup-1.png){width=1536}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}