{
  "hash": "afdf7da1ea433a4835990ae5a5e3e522",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Reshaping Data - Think Before you Pivot\"\ndate: 2024-05-31\ncategories: [concept, code]\ndescription: \"Some common-use scenarios for reshaping your data from wide to long format\"\n---\n\n\nIn your day-to-day data analysis work you will probably find yourself at some point needing to *reshape* data, and this is usually to suit an analytical need. Reshaping is changing the rectangular structure of the columns and rows in your dataset without altering the content. Data comes in two basic shapes: **wide** and **long**.\n\n# Wide Data\n\nI would argue that most data is collected and recorded in this format. A defining feature of the **wide** data format is that all measurements collected for a single 'unit of observation' occur on the same row.\n\n::: callout-note\nThink of the unit of observation as hierarchical in nature. Typically, the unit of observation is a patient or subject, but it may also be at a higher level - e.g. measurements on eyes of patients; or at a lower level - e.g. measurements on hospitals.\n:::\n\nA good example of this is repeated measures for some variable that occur over time. The first column might be an subject ID variable and then additional columns, the value of the measurement over each time point. Let's simulate some data to show this idea.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(kableExtra)\nid <- seq(1:5)\nfor(i in 0:3){\n  var_name <- paste0(\"month_\",i)\n  assign(var_name, rnorm(5, 130, 20))\n}\ndf_wide <- data.frame(cbind(id, month_0, month_1, month_2, month_3))\n```\n:::\n\n\nIn this simulated dataframe I have created values of some variable - for the sake of the example let's say it's systolic blood pressure (mean `130` mmHg, SD `20` mmHg) for `5` subjects, measured at `4` time points - baseline and then every month for `3` months. The data look like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_wide |> \n  kable(align = \"c\", digits = 2)\n```\n\n::: {.cell-output-display}\n\n\n| id | month_0 | month_1 | month_2 | month_3 |\n|:--:|:-------:|:-------:|:-------:|:-------:|\n| 1  |  88.29  | 145.65  | 100.05  | 132.61  |\n| 2  | 134.50  | 140.99  | 115.06  | 157.35  |\n| 3  | 126.61  | 137.63  | 143.52  | 121.25  |\n| 4  |  87.50  | 127.68  |  97.90  | 126.37  |\n| 5  | 127.83  | 127.26  | 119.94  | 120.56  |\n\n\n:::\n:::\n\n\nThis in an intuitive format for collecting and recording data like this, but it doesn't easily lend itself to the various analyses you might want to conduct. Sure, if you were interested in testing for differences in BP at different time points, you could do that with t-tests across relevant columns, but it may mean multiple tests. Indeed, there are more statistically efficient approaches to do this, but first you need to reshape your data into **long** format.\n\n# Long Data\n\nData is in long format when the measurements collected for a single unit of observation occur on multiple rows. In effect, they are transformed from going across columns within a single row to down rows within a single column (I will illustrate this below). This is the data format required for many modelling approaches in most statistical software and is the default format for longitudinal or repeated measures data. This is what the same data in long format look like:\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_long |>  \n  kable(align = \"c\", digits = 2)\n```\n\n::: {.cell-output-display}\n\n\n| id | month |   bp   |\n|:--:|:-----:|:------:|\n| 1  |   0   | 88.29  |\n| 1  |   1   | 145.65 |\n| 1  |   2   | 100.05 |\n| 1  |   3   | 132.61 |\n| 2  |   0   | 134.50 |\n| 2  |   1   | 140.99 |\n| 2  |   2   | 115.06 |\n| 2  |   3   | 157.35 |\n| 3  |   0   | 126.61 |\n| 3  |   1   | 137.63 |\n| 3  |   2   | 143.52 |\n| 3  |   3   | 121.25 |\n| 4  |   0   | 87.50  |\n| 4  |   1   | 127.68 |\n| 4  |   2   | 97.90  |\n| 4  |   3   | 126.37 |\n| 5  |   0   | 127.83 |\n| 5  |   1   | 127.26 |\n| 5  |   2   | 119.94 |\n| 5  |   3   | 120.56 |\n\n\n:::\n:::\n\n\nSo, what have we done here?\n\nEnter `pivot_longer()` from the `tidyr` package.\n\nThe figure below shows how `pivot_longer()` has transformed each component of the data from its original format to the new long format. In other words we have **pivoted** the data from wide to long. You will see that where the data for a specific ID originally spanned across multiple columns but within one row, in long format the data for each ID now spans across multiple rows but within one column.\n\n![pivot_longer() in Action](images/pivot_graphic.png){fig-align=\"center\"}\n\nThe basic syntax of `pivot_longer()` is as follows:\n\n`pivot_longer(data, cols, names_to, values_to)`\n\nwhere:\n\n-   `data`: The data frame or tibble to be reshaped.\n\n-   `cols`: The columns to be transformed from wide to long.\n\n-   `names_to`: The name of the new (long) column that will hold the (currently wide) variable names.\n\n-   `values_to`: The name of the new (long) column that will hold the corresponding (currently wide) values.\n\nThat's basically it. While knowledge of how to write the code is clearly important, It may still seem confusing as to how to actually operationalise it. So let's go through a few of some of the more common use-case scenarios that might require you to reshape data from wide to long format. As these examples will illustrate, not all wide data is equal and there are certainly some nuances to the coding depending on how the data are recorded and how you want the data to look after pivoting.\n\n## Case 1: One Name Column, One Value Column\n\nThis is the most common and most straight-forward application of reshaping to long that you might be required to perform. In this case we have multiple value columns in wide format that we want to reshape to one name column and one value column. The good news is that we have already done this in the example above. The code is also shown but just to revisit that briefly for clarity:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ndf_long <- df_wide |> \n  pivot_longer(cols = month_0:month_3,\n               names_to = \"month\",\n               names_prefix = \"month_\",\n               values_to = \"bp\")\n```\n:::\n\n\nSo we take the `df_wide` dataframe and 'pipe' it to the `pivot_longer()` function where we specify that we want to take the columns from (and including) `month_0` to `month_3`, assigning those column names as category labels in the new `month` name variable, while also placing each corresponding BP measurement into the new `bp` value variable. The `names_prefix` argument is optional but was used here to strip out the somewhat redundant `month_` text from each column name prior to labelling. You could certainly leave this in if you wanted and the result would then be:\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n| id |  month  |   bp   |\n|:--:|:-------:|:------:|\n| 1  | month_0 | 88.29  |\n| 1  | month_1 | 145.65 |\n| 1  | month_2 | 100.05 |\n| 1  | month_3 | 132.61 |\n| 2  | month_0 | 134.50 |\n| 2  | month_1 | 140.99 |\n| 2  | month_2 | 115.06 |\n| 2  | month_3 | 157.35 |\n\n\n:::\n:::\n\n\nBut I'm sure you'd agree that the results looks cleaner without all that unnecessary repetition.\n\n## Case 2: Multiple Name Columns, One Value Column\n\nLet's now extend this idea a little. Imagine that in addition to BP measurements, subjects also had their weight measured at the same time points (simulated with a mean of `70` kg and SD `15` kg). Now we have data that could potentially look like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nid <- seq(1:5)\nfor(i in 0:3){\n  var_name_bp <- paste0(\"month_\",i,\"_bp\")\n  assign(var_name_bp, rnorm(5, 130, 20))\n  var_name_wt <- paste0(\"month_\",i,\"_wt\")\n  assign(var_name_wt, rnorm(5, 70, 15))\n}\ndf_wide <- data.frame(cbind(id, month_0_bp, month_0_wt, month_1_bp, month_1_wt, month_2_bp, month_2_wt, month_3_bp, month_3_wt))\ndf_wide |>  \n  kable(align = \"c\", digits = 2)\n```\n\n::: {.cell-output-display}\n\n\n| id | month_0_bp | month_0_wt | month_1_bp | month_1_wt | month_2_bp | month_2_wt | month_3_bp | month_3_wt |\n|:--:|:----------:|:----------:|:----------:|:----------:|:----------:|:----------:|:----------:|:----------:|\n| 1  |   168.71   |   70.94    |   110.54   |   62.65    |   141.74   |   64.22    |   117.43   |   42.37    |\n| 2  |   99.66    |   86.30    |   103.43   |   69.65    |   148.09   |   69.11    |   139.75   |   60.50    |\n| 3  |   122.44   |   72.88    |   120.12   |   68.22    |   105.90   |   83.36    |   146.80   |   70.25    |\n| 4  |   116.68   |   52.53    |   136.44   |   70.32    |   123.79   |   71.43    |   88.53    |   51.79    |\n| 5  |   122.52   |   59.85    |   145.43   |   80.02    |   157.58   |   60.87    |   137.32   |   91.14    |\n\n\n:::\n:::\n\n\nWhat to do here?\n\nActually, some thought is required at this point as there are two potential paths you could go down and it all depends on what you want to achieve. **Let's assume that you want to put all measurement values in one column**. Once you have decided on this final form, the code is not challenging. We will necessarily end up with **two** names columns instead of just one, one for time (month) and one for the all the clinical measures (BP and weight). The main changes to the code are to now supply two new variable names to the `names_to` argument as well as tell the function how to source the new category labels with the `names_sep` argument. This will split the currently wide variable names at the second `_` (after stripping out the redundant `month_` text) and use the number as the month label and the type of measurement as the clinical measure label.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ndf_long <- df_wide |> \n  pivot_longer(cols = month_0_bp:month_3_wt,\n               names_to = c(\"month\", \"clinical_measure\"),\n               names_prefix = \"month_\",\n               names_sep = \"_\",\n               values_to = \"value\")\n```\n:::\n\n\nand the data looks like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_long |>  \n  kable(align = \"c\", digits = 2)\n```\n\n::: {.cell-output-display}\n\n\n| id | month | clinical_measure | value  |\n|:--:|:-----:|:----------------:|:------:|\n| 1  |   0   |        bp        | 168.71 |\n| 1  |   0   |        wt        | 70.94  |\n| 1  |   1   |        bp        | 110.54 |\n| 1  |   1   |        wt        | 62.65  |\n| 1  |   2   |        bp        | 141.74 |\n| 1  |   2   |        wt        | 64.22  |\n| 1  |   3   |        bp        | 117.43 |\n| 1  |   3   |        wt        | 42.37  |\n| 2  |   0   |        bp        | 99.66  |\n| 2  |   0   |        wt        | 86.30  |\n| 2  |   1   |        bp        | 103.43 |\n| 2  |   1   |        wt        | 69.65  |\n| 2  |   2   |        bp        | 148.09 |\n| 2  |   2   |        wt        | 69.11  |\n| 2  |   3   |        bp        | 139.75 |\n| 2  |   3   |        wt        | 60.50  |\n| 3  |   0   |        bp        | 122.44 |\n| 3  |   0   |        wt        | 72.88  |\n| 3  |   1   |        bp        | 120.12 |\n| 3  |   1   |        wt        | 68.22  |\n| 3  |   2   |        bp        | 105.90 |\n| 3  |   2   |        wt        | 83.36  |\n| 3  |   3   |        bp        | 146.80 |\n| 3  |   3   |        wt        | 70.25  |\n| 4  |   0   |        bp        | 116.68 |\n| 4  |   0   |        wt        | 52.53  |\n| 4  |   1   |        bp        | 136.44 |\n| 4  |   1   |        wt        | 70.32  |\n| 4  |   2   |        bp        | 123.79 |\n| 4  |   2   |        wt        | 71.43  |\n| 4  |   3   |        bp        | 88.53  |\n| 4  |   3   |        wt        | 51.79  |\n| 5  |   0   |        bp        | 122.52 |\n| 5  |   0   |        wt        | 59.85  |\n| 5  |   1   |        bp        | 145.43 |\n| 5  |   1   |        wt        | 80.02  |\n| 5  |   2   |        bp        | 157.58 |\n| 5  |   2   |        wt        | 60.87  |\n| 5  |   3   |        bp        | 137.32 |\n| 5  |   3   |        wt        | 91.14  |\n\n\n:::\n:::\n\n\nI tend to think of this as a **complete reshaping** to long format.\n\n## Case 3: One Name Column, Multiple Value Columns\n\nBut what if didn’t want to do this and instead wanted the values of BP and weight to appear in their own columns - a **partial reshaping** to long format if you like. To my mind this is probably a more useful long format than what we considered in the last example, although there may be some niche use-case scenarios that require data to be in that format for analysis (they just elude me right now).\n\n**So let's now assume that you want separate columns of values for each type of measurement**. Now we will end up with **one** name column and **two** value columns - one for BP and one for weight. The general form of the code doesn't change a lot in this case - the main thing being that we replace \"clinical_measure\" in the `names_to` argument with a special term `.value` which indicates that the pivoted (new) columns will be split by the text after the second `_` in the currently wide column names - i.e. taking on the value of `bp` or `wt` (so it's not necessary to specify a `values_to` term this time around). In those two new columns the corresponding measurement values will be placed. The code looks like:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ndf_long <- df_wide |> \n  pivot_longer(cols = month_0_bp:month_3_wt,\n               names_to = c(\"month\", \".value\"),\n               names_prefix = \"month_\",\n               names_sep = \"_\")\n```\n:::\n\n\nand the data now looks like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_long |>  \n  kable(align = \"c\", digits = 2)\n```\n\n::: {.cell-output-display}\n\n\n| id | month |   bp   |  wt   |\n|:--:|:-----:|:------:|:-----:|\n| 1  |   0   | 168.71 | 70.94 |\n| 1  |   1   | 110.54 | 62.65 |\n| 1  |   2   | 141.74 | 64.22 |\n| 1  |   3   | 117.43 | 42.37 |\n| 2  |   0   | 99.66  | 86.30 |\n| 2  |   1   | 103.43 | 69.65 |\n| 2  |   2   | 148.09 | 69.11 |\n| 2  |   3   | 139.75 | 60.50 |\n| 3  |   0   | 122.44 | 72.88 |\n| 3  |   1   | 120.12 | 68.22 |\n| 3  |   2   | 105.90 | 83.36 |\n| 3  |   3   | 146.80 | 70.25 |\n| 4  |   0   | 116.68 | 52.53 |\n| 4  |   1   | 136.44 | 70.32 |\n| 4  |   2   | 123.79 | 71.43 |\n| 4  |   3   | 88.53  | 51.79 |\n| 5  |   0   | 122.52 | 59.85 |\n| 5  |   1   | 145.43 | 80.02 |\n| 5  |   2   | 157.58 | 60.87 |\n| 5  |   3   | 137.32 | 91.14 |\n\n\n:::\n:::\n\n\n# Summary\n\nThese are a few of what I consider the more common reshaping tasks you might be faced with. From time to time you may across a problem that might even require you to reshape in two steps to achieve the result that you want, so there are many different ways that data can present itself to you. What I have shown you here really only scratches the surface with what `pivot_longer()` is capable of. There are several other arguments to the function that you can read about that provide even more advanced pivoting features.\n\n<https://tidyr.tidyverse.org/reference/pivot_longer.html>\n\nAn important point I want to mention if you haven't already realised this in looking through the examples, is that **the column names in the wide dataframe you are converting from are integral** to you successfully reshaping data to long format with `pivot_longer()`. If your column names are of poor quality you WILL have problems and you may in fact have to give some time and thought to renaming columns in your dataframe so they will be more amenable to transforming. Aim for consistency in naming patterns across variables and beware of using separators that are the same. For example, the only reason I didn't have more issues with a name like `bp_month_0` was that I stripped out the `month_` using the `names_prefix` argument, otherwise `pivot_longer()` wouldn't know which `_` to split at for the new clinical measure variable names. Had I wanted to retain the full `month_0`, `month_1`, etc as labels in the newly created `month` variable I would have had to rename the variables to something different - e.g. `month0_bp` or `month.0_bp`. So think carefully about the variables you are presented with - they may require some renaming before you do anything else.\n\nIn case you're wondering about the reshaping elephant in the room, no we haven't talked today about reshaping in the opposite direction - long to wide. I'll leave that one for another time. In many ways, `pivot_wider()` is complementary to it sister function and if you understand one you'll quickly grasp the other. The primary difficulty in all of this is not so much the functions themselves, but the mental visualisation of the transformation. Once you have a handle on that, how to go about the coding starts to make more sense.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}