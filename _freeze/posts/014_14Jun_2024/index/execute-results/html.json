{
  "hash": "7920a2d51714b42260191a7455d34ea9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Reshaping Data - Think Before you Pivot\"\ndate: 2024-06-14\ncategories: [concept, code]\ndescription: \"Some common-use scenarios for reshaping your data from wide to long format\"\n---\n\n\nIn your day-to-day data analysis work you will probably find yourself at some point needing to *reshape* data, and this is usually to suit an analytical need. Reshaping is changing the rectangular structure of the columns and rows in your dataset without altering the content. Data comes in two basic shapes: **wide** and **long**.\n\n# Wide Data\n\nI would argue that most data is collected in this format. A defining feature of the **wide** data format is that all measurements collected for a single 'unit of observation' occur on the same row.\n\n::: callout-note\nThink of the unit of observation as hierarchical in nature. Typically, the unit of observation is a patient or subject, but it may also be at a higher level - e.g. measurements on eyes of patients; or at a lower level - e.g. measurements on hospitals.\n:::\n\nA good example of this is repeated measures for some variable that occur over time. The first column might be an subject ID variable and then additional columns, the value of the measurement over each time point. Let's simulate some data to show this idea.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(kableExtra)\nid <- seq(1:5)\nfor(i in 0:3){\n  var_name <- paste0(\"month_\",i)\n  assign(var_name, rnorm(5, 130, 20))\n}\ndf_wide <- data.frame(cbind(id, month_0, month_1, month_2, month_3))\n```\n:::\n\n\nIn this simulated dataframe I have created values of some variable - for the sake of the example let's say it's systolic blood pressure (mean `130` mmHg, SD `20` mmHg) for `5` subjects, measured at `4` time points - baseline and then every month for `3` months. The data look like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_wide |> \n  kable(align = \"c\", digits = 2)\n```\n\n::: {.cell-output-display}\n\n\n| id | month_0 | month_1 | month_2 | month_3 |\n|:--:|:-------:|:-------:|:-------:|:-------:|\n| 1  | 143.65  | 154.95  | 155.10  | 109.45  |\n| 2  | 123.28  |  85.00  | 120.92  | 164.22  |\n| 3  | 140.29  | 128.70  | 132.46  | 117.05  |\n| 4  | 104.11  | 107.97  | 144.08  | 122.67  |\n| 5  | 101.72  |  92.88  | 113.41  |  97.71  |\n\n\n:::\n:::\n\n\nThis in an intuitive format for collecting and recording data like this, but it doesn't easily lend itself to the various analyses you might want to conduct. Sure, if you were interested in testing for differences in BP at different time points, you could do that with t-tests across relevant columns, but it may mean multiple tests. Indeed, there are more statistically efficient approaches to do this, but first you need to reshape your data into **long** format.\n\n# Long Data\n\nData is in long format when the measurements collected for a single unit of observation occur on multiple rows. In effect, they are transposed from going across columns within a single row to down rows within a single column (I will illustrate this below). This is the data format required for many modelling approaches in most statistical software and is the default format for longitudinal or repeated measures data. This is what the same data in long format look like:\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_long |>  \n  kable(align = \"c\", digits = 2)\n```\n\n::: {.cell-output-display}\n\n\n| id | month |   bp   |\n|:--:|:-----:|:------:|\n| 1  |   0   | 143.65 |\n| 1  |   1   | 154.95 |\n| 1  |   2   | 155.10 |\n| 1  |   3   | 109.45 |\n| 2  |   0   | 123.28 |\n| 2  |   1   | 85.00  |\n| 2  |   2   | 120.92 |\n| 2  |   3   | 164.22 |\n| 3  |   0   | 140.29 |\n| 3  |   1   | 128.70 |\n| 3  |   2   | 132.46 |\n| 3  |   3   | 117.05 |\n| 4  |   0   | 104.11 |\n| 4  |   1   | 107.97 |\n| 4  |   2   | 144.08 |\n| 4  |   3   | 122.67 |\n| 5  |   0   | 101.72 |\n| 5  |   1   | 92.88  |\n| 5  |   2   | 113.41 |\n| 5  |   3   | 97.71  |\n\n\n:::\n:::\n\n\nSo, what have we done here?\n\n![Pivot_Longer in Action](images/pivot_graphic.png){fig-align=\"center\"}\n\nEnter `pivot_longer()` from the `tidyr` package.\n\n## Case 1: One Name Column, One Value Column\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}