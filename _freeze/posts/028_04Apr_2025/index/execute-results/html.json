{
  "hash": "44348c418e47612d4311c3d741d2efaf",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Model Prediction/Visualisation <br> 2. How Many Dimensions?\"\ndate: 2025-04-04\ncategories: [code, concept, modelling, visualisation]\nimage: \"images/plot.png\"\ndescription: \"There is a practical limit to the number of predictors you can visualise.\"\n---\n\n\nLast time I introduced you to the idea of model prediction and visualisation and hopefully equipped you with the both the know-how and tools to attempt this on your own. Before we move on to more advanced concepts in this space though, it's important that we clear up a pragmatic issue that will strike you at some point in your model visualisation travels. And that issue is about how many predictors one can visualise in a sensible way.\n\nOK you say, but I don't really understand what you mean.\n\nWell think about it what we are attempting to do in model visualisation in terms of 'dimensions'. While we physically inhabit a three-dimensional where we can appreciate height, length and width (depth), our data-analysis world is largely confined to just the first two of those dimensions. Putting aside advances in virtual reality technology, when we work with our data it is typically on a standard computer screen which is an inherently two-dimensional surface (yes, I accept our computer will allow simulated three-dimensional viewing - more on that in a moment). The point is that we fast run out of dimension-viewing capacity. Let's consider what we can effectively view as the number of predictors increases. Keep in mind that the dependent variable in our model is already using up one dimension (height - assigned to the **y-axis**), so if our model includes:\n\n1.  One predictor. The regression solution is a **line** of best fit.\n\n    Consequently, this is simple to visualise. Our independent variable is assigned to the **x-axis** (length). But note - we have now already used up our two dimensions!\n\n2.  Two predictors. The regression solution is a **plane** of best fit.\n\n    Well, this is immediately more challenging. But it is doable. Here we can leverage our computer's graphical capabilities to reproduce depth and plot our predictions in a simulated three-dimensional environment residing on a two-dimensional surface. We keep our first independent variable as is and assign our second independent variable to the **z-axis**. There are [packages](https://cran.r-project.org/web/packages/plot3D/index.html) in `R` that provide this kind of flexibility.\n\n3.  Three predictors (or more). The regression solution is a [**hyperplane**](https://en.wikipedia.org/wiki/Hyperplane#:~:text=In%20geometry%2C%20a%20hyperplane%20is,that%20of%20the%20ambient%20space.) of best fit.\n\n    A What?! It doesn't matter - you can't practically visualise it.\n\nIt's not all doom and gloom, however. There are alternative ways around this apparent roadblock - at least to be able to visualise three, four and even five predictors (beyond that I have no idea). An effective approach that I alluded to in the last post, and that will be the focus of the remainder of this one is to think in terms of 'collapsing' each of multiple dimensions into two-dimensional surfaces. In this way we can still view a multi-dimensional space on our height/length limited computer screen. Let's look at some examples now - we'll use the same `birthwt` dataset as in the last post to illustrate these.\n\n# Two Predictors\n\nWe have essentially already made this plot in the last post. In our model we are regressing newborn birthweight on maternal age and smoking status, and if you recall we managed the visualisation of our second predictor (smoking status) by assigning it to the **colour** aesthetic in `ggplot()`.\n\nA couple of notes: In this and all subsequent models I will specify interaction terms between all predictors just to make the output a little more interesting (otherwise you will only see parallel regression lines). Don't get hung up on this - maintain focus on the plotting devices that I will discuss. I have also converted categorical variables to factors in advance, rather than on the fly (as in the last post). This just makes some aspects of the plotting (especially labelling) easier.\n\nSo, our model is:\n\n`mod2 <-  lm(bwt ~ age * smoke, data = birthwt)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ndata(birthwt, package = \"MASS\")\n# Relabel smoking\nbirthwt$smoke <-  factor(birthwt$smoke, levels = c(0,1), labels = c(\"No\", \"Yes\"))\n# Model\nmod2 <-  lm(bwt ~ age * smoke, data = birthwt)\n# Create new data\nnewdf <-  expand.grid(age = seq(15, 45, by = 5),\n                      smoke = levels(birthwt$smoke))\n# Predict\nnewdf <-  newdf |> \n  mutate(pred = predict(mod2, newdata = newdf))\n# Visualise\nggplot(data = newdf, aes(x = age, y = pred, color = smoke)) +\n  geom_line(linewidth = 1) +\n  xlab(\"Maternal Age\") + ylab(\"Predicted Birthweight\") + labs(color = \"Smoking Status\") +\n  scale_y_continuous(limits = c(0, 5000), breaks = seq(0, 5000, by = 1000)) +\n  theme_bw(base_size = 20) +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=1152}\n:::\n:::\n\n\n# Three Predictors\n\nLet's now include mother's `race` as a third predictor in the model:\n\n`mod3 <-  lm(bwt ~ age * smoke * race, data = birthwt)`\n\nTo get over this hurdle, we can take advantage of `ggplot()`'s facetting functionality to create separate side-by-side plots for each mother's race. And that could look something like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Relabel race\nbirthwt$race <-  factor(birthwt$race, levels = c(1,2,3), labels = c(\"White\", \"Black\", \"Other\"))\n# Model\nmod3 <-  lm(bwt ~ age * smoke * race, data = birthwt)\n# Create new data\nnewdf <-  expand.grid(age = seq(15, 45, by = 5),\n                      smoke = levels(birthwt$smoke),\n                      race = levels(birthwt$race))\n# Predict\nnewdf <-  newdf |> \n  mutate(pred = predict(mod3, newdata = newdf))\n# Create labels for plotting race\nlabel_race <- c(\"Race: White\", \"Race: Black\", \"Race: Other\")\nnames(label_race) <- c(\"White\", \"Black\", \"Other\")\n# Visualise\nggplot(data = newdf, aes(x = age, y = pred, color = smoke)) +\n  geom_line(linewidth = 1) +\n  xlab(\"Maternal Age\") + ylab(\"Predicted Birthweight\") + labs(color = \"Smoking Status\") +\n  scale_y_continuous(limits = c(0, 5000), breaks = seq(0, 5000, by = 1000)) +\n  facet_grid(~ race, labeller = labeller(race = label_race)) +\n  theme_bw(base_size = 20) +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=1152}\n:::\n:::\n\n\n# Four Predictors\n\nOk, let's add in presence of uterine irritability as a fourth predictor.\n\n`mod4 <-  lm(bwt ~ age * smoke * race * ui, data = birthwt)`\n\nNow we just facet vertically in addition to horizontally:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Relabel uterine irritability\nbirthwt$ui <-  factor(birthwt$ui, levels = c(0, 1), labels = c(\"No\", \"Yes\"))\n# Model\nmod4 <-  lm(bwt ~ age * smoke * race * ui, data = birthwt)\n# Create new data\nnewdf <-  expand.grid(age = seq(15, 45, by = 5),\n                      smoke = levels(birthwt$smoke),\n                      race = levels(birthwt$race),\n                      ui = levels(birthwt$ui))\n# Predict\nnewdf <-  newdf |> \n  mutate(pred = predict(mod4, newdata = newdf))\n# Create labels for plotting ui\nlabel_ui <- c(\"Uterine Irritability: No\", \"Uterine Irritability: Yes\")\nnames(label_ui) <- c(\"No\", \"Yes\")\n# Visualise\nggplot(data = newdf, aes(x = age, y = pred, color = smoke)) +\n  geom_line(linewidth = 1) +\n  xlab(\"Maternal Age\") + ylab(\"Predicted Birthweight\") + labs(color = \"Smoking Status\") +\n  scale_y_continuous(limits = c(0, 5000), breaks = seq(0, 5000, by = 1000)) +\n  facet_grid(ui ~ race, labeller = labeller(race = label_race, ui = label_ui)) +\n  theme_bw(base_size = 20) +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=1152}\n:::\n:::\n\n\n# Five Predictors\n\nNow we're getting to the limits of what I think is possible. And honestly, I think even this is potentially too much in terms information overload - there is a fine line between visualisations that are pleasantly informative and those that are just confusing. But, for the sake of the exercise, this is one way that I'm aware of that you could incorporate the plotting of predictions from a model with five predictors. In this case, we specify a 'graphical interaction' between two variables (here I have selected smoking status and history of hypertension), allowing those predictions to be distinguishable by not only color, but by specifying a second plotting aesthetic - **linetype**. Adjusted predictions for birthweight conditional on no history of hypertension are assigned a solid line and adjusted predictions for birthweight conditional on a history of hypertension are assigned a dashed line.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Relabel history of hypertension\nbirthwt$ht <-  factor(birthwt$ht, levels = c(0, 1), labels = c(\"No\", \"Yes\"))\n# Model\nmod5 <-  lm(bwt ~ age * smoke * race * ui * ht, data = birthwt)\n# Create new data\nnewdf <-  expand.grid(age = seq(15, 45, by = 5),\n                      smoke = levels(birthwt$smoke),\n                      race = levels(birthwt$race),\n                      ui = levels(birthwt$ui),\n                      ht = levels(birthwt$ht))\n# Predict\nnewdf <-  newdf |> \n  mutate(pred = predict(mod5, newdata = newdf))\n# Visualise\nggplot(data = newdf, aes(x = age, y = pred, group = interaction(smoke, ht), color = smoke, linetype = ht)) +\n  geom_line(linewidth = 1) +\n  xlab(\"Maternal Age\") + ylab(\"Predicted Birthweight\") + labs(color = \"Smoking Status\", linetype = \"History of Hypertension\") +\n  scale_y_continuous(limits = c(0, 5000), breaks = seq(0, 5000, by = 1000)) +\n  facet_grid(ui ~ race, labeller = labeller(race = label_race, ui = label_ui)) +\n  theme_bw(base_size = 20) +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=1152}\n:::\n:::\n\n\n(Note that some regression lines appear to be missing because we have just run out of data for that particular combination of covariate values).\n\n# ggeffects\n\nRemember how I mentioned the `ggeffects` package in the last post? Well now may be a good time to visit that packages [website](https://strengejacke.github.io/ggeffects/articles/ggeffects.html#aims-of-the-ggeffects-package). While everything I have shown you in this post is the result of combined `base R` and `ggplot2` functionality, there are prediction and visualisation options in `ggeffects` that you may find more intuitive and/or easier to use. Especially for the five-predictor case, `ggeffects` essentially allows nested facetting, which is an interesting proposition and arguably more pleasing to the brain than what I have shown you above.\n\nUntil next time...\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}