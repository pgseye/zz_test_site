{
  "hash": "5df674a2347ee2ce5723c6c04aa12777",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Model Prediction/Visualisation <br> 5. Linear Mixed Models (LMMs)\"\ndate: 2025-05-30\ncategories: [code, concept, modelling, visualisation]\n# image: \"images/plot.png\"\ndescription: \"Visualising fixed vs random effects.\"\n---\n\n\nThis week we are continuing our series on predicting and visualising models in `R` by focussing on linear mixed models (LMM's). Like GLM's, the fundamentals of the process remain the same bar a few tweaks specific to LMM's that you need to be aware of. Here we are back to dealing with a continuous covariate and outcome - the new development to note is the distinction between [fixed and random effects](https://www.theanalysisfactor.com/specifying-fixed-and-random-factors-in-mixed-models/) and how to handle each appropriately in the `predict()` function.\n\n# Predicting\n\nTo illustrate these ideas we'll revisit the `sleepstudy` dataset which is available in the `lme4` package (I have used this for a similar purpose in one of my [previous posts](https://msni-stats-tips.netlify.app/posts/004_02feb_2024/)). The `sleepstudy` data looks at reaction times over time in sleep-deprived individuals. For the sake of the exercise we will fit a mixed model with reaction time (ms) as the outcome, time (days) as a fixed-effect and time (days) and individual as random-effects. So this is a random slopes model allowing the 'effect' of sleep-deprivation on reaction time to vary over time for each individual. We fit the model and view a few lines of the dataframe which now contains the fixed (`mod_pred_fix`) and random (`mod_pred_ran`) predictions. Obtaining the predictions is very easy - we create the two new variables by simply calling:\n\n`predict(mod)` for the random-effects, and:\n\n`predict(mod, re.form = NA)` for the fixed-effects.\n\nNote the `re.form = NA` sets all random-effects to `0`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lme4)\nlibrary(ggplot2)\nlibrary(gtsummary)\nlibrary(kableExtra)\n# Load data\ndata(\"sleepstudy\")\n# Model\nmod <- lmer(Reaction ~ Days + (Days | Subject), data = sleepstudy)\n# Predict\nsleepstudy$mod_pred_fix <- predict(mod, re.form = NA) # predict fixed effects\nsleepstudy$mod_pred_ran <- predict(mod) # predict random effects\n# View data\nhead(sleepstudy, 10) |> \n  kable(align = \"c\", digits = 2)\n```\n\n::: {.cell-output-display}\n\n\n| Reaction | Days | Subject | mod_pred_fix | mod_pred_ran |\n|:--------:|:----:|:-------:|:------------:|:------------:|\n|  249.56  |  0   |   308   |    251.41    |    253.66    |\n|  258.70  |  1   |   308   |    261.87    |    273.33    |\n|  250.80  |  2   |   308   |    272.34    |    293.00    |\n|  321.44  |  3   |   308   |    282.81    |    312.66    |\n|  356.85  |  4   |   308   |    293.27    |    332.33    |\n|  414.69  |  5   |   308   |    303.74    |    351.99    |\n|  382.20  |  6   |   308   |    314.21    |    371.66    |\n|  290.15  |  7   |   308   |    324.68    |    391.33    |\n|  430.59  |  8   |   308   |    335.14    |    410.99    |\n|  466.35  |  9   |   308   |    345.61    |    430.66    |\n\n\n:::\n:::\n\n\n<br>\n\nSo, `mod_pred_fix` represents the **group-averaged** prediction of `reaction time` (outcome) as a function of time (covariate) and similarly `mod_pred_ran` represents the **individual** predictions of the same.\n\n# One-Plot Visualisation\n\nPlotting the results is then quite straightforward with `ggplot2`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot all data\nsleepstudy |>\n    ggplot(aes(x = Days, y = Reaction, color = factor(Subject))) +\n    geom_line(aes(x = Days, y = mod_pred_ran)) +\n    geom_line(aes(x = Days, y = mod_pred_fix), linewidth = 2, color = \"blue\") +\n    scale_y_continuous(limits = c(200, 500), breaks = seq(200, 500, by = 50)) +\n    scale_x_continuous(limits = c(0, 9), breaks = seq(0, 9, by = 1)) +\n    geom_point(alpha = 0.5) +\n    labs(title = \"Reaction Time ~ Days of Sleep Deprivation\") + xlab(\"Time (days)\") + ylab(\"Average Reaction Time (ms)\") +\n    theme_bw(base_size = 15)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=1152}\n:::\n:::\n\n\n# Multi-Plot Visualisation\n\nThe above plot is good for showing all the data at once, but can get a little bit confusing if you are interested in looking more closely at any specific individual trajectories. If that is in fact the case, an alternative plot representation is to facet on individuals, like so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot - facet on individual\nsleepstudy |>\n  ggplot(aes(x = Days, y = Reaction)) +\n  geom_line(aes(x = Days, y = mod_pred_ran), linewidth = 1, color = \"green\") +\n  geom_line(aes(x = Days, y = mod_pred_fix), linewidth = 1, color = \"blue\") +\n  scale_y_continuous(limits = c(200, 500), breaks = seq(200, 500, by = 100)) +\n  scale_x_continuous(limits = c(0, 9), breaks = seq(0, 9, by = 2)) +\n  geom_point(alpha = 0.5) +\n  facet_wrap(~Subject) +\n  labs(x = \"Time (Days)\",\n       y = \"Average Reaction Time (ms)\",\n       title = \"Reaction Time ~ Days of Sleep Deprivation\",\n       subtitle = \"Blue = Fixed Effects Prediction | Green = Random Effects Prediction\") +\n  theme_bw(base_size = 15)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=1152}\n:::\n:::\n\n\nIt's now much easier to see the individual trajectories and how they compare to that of the group average.\n\n# Some Background Stuff\n\nWhile not essential to producing a visualisation of the model predictions, taking a little detour to understand in more detail how we actually arrived at the fixed- and random-effect predictions is a worthwhile exercise and one which can aid in building your mixed-modelling intuition.\n\nLet's first inspect an unprettified summary of the model output:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLinear mixed model fit by REML ['lmerMod']\nFormula: Reaction ~ Days + (Days | Subject)\n   Data: sleepstudy\n\nREML criterion at convergence: 1743.6\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-3.9536 -0.4634  0.0231  0.4634  5.1793 \n\nRandom effects:\n Groups   Name        Variance Std.Dev. Corr\n Subject  (Intercept) 612.10   24.741       \n          Days         35.07    5.922   0.07\n Residual             654.94   25.592       \nNumber of obs: 180, groups:  Subject, 18\n\nFixed effects:\n            Estimate Std. Error t value\n(Intercept)  251.405      6.825  36.838\nDays          10.467      1.546   6.771\n\nCorrelation of Fixed Effects:\n     (Intr)\nDays -0.138\n```\n\n\n:::\n:::\n\n\nWe obtain the fixed-effects as an `Intercept` and a coefficient for time (`Days`) and we can interpret that as an average reaction time of `251.4 ms` at baseline and an average increase of `10.5 ms` in reaction time for the passing of each day. Note that the random-effects are not as easily interpretable in their reported form which is an estimate of the variance of the distribution of individual reaction times, not average differences as for fixed-effects.\n\nA shortcut to obtain the fixed-effects of an `lmer` class model in `R` is:\n\n`fixef(mod)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfixef(mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(Intercept)        Days \n  251.40510    10.46729 \n```\n\n\n:::\n:::\n\n\nand similarly for the random-effects:\n\n`ranef(mod)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nranef(mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$Subject\n    (Intercept)        Days\n308   2.2585509   9.1989758\n309 -40.3987381  -8.6196806\n310 -38.9604090  -5.4488565\n330  23.6906196  -4.8143503\n331  22.2603126  -3.0699116\n332   9.0395679  -0.2721770\n333  16.8405086  -0.2236361\n334  -7.2326151   1.0745816\n335  -0.3336684 -10.7521652\n337  34.8904868   8.6282652\n349 -25.2102286   1.1734322\n350 -13.0700342   6.6142178\n351   4.5778642  -3.0152621\n352  20.8636782   3.5360011\n369   3.2754656   0.8722149\n370 -25.6129993   4.8224850\n371   0.8070461  -0.9881562\n372  12.3145921   1.2840221\n\nwith conditional variances for \"Subject\" \n```\n\n\n:::\n:::\n\n\nSo what do the random-effects actually tell us? In a nutshell, these represent the individual differences from the fixed-effects values.\n\nLet's consider `Subject 308` as an example to illustrate this. If we are interested in the predicted baseline reaction time for this individual, all we need to do is add the fixed- and random-effects intercepts values - `251.405 + 2.259 = 253.664` ms (we can ignore the time 'effect' which is `0` by definition at baseline). By comparison, we can also easily obtain that predicted value with the following code:\n\n`predict(mod, newdata = data.frame(days = 0, Subject = 308), re.form = ~(Days|Subject))`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict(mod, newdata = data.frame(Days = 0, Subject = 308), re.form = ~(Days|Subject))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       1 \n253.6637 \n```\n\n\n:::\n:::\n\n\nIt's a little bit more complex to manually calculate the predicted value at any other time point because the 'effect' of time is no longer ignorable and we just need to remember the basics of our regression equation. Say, we want to calculate the reaction time for `Subject 308` at `5` days. A simple way to do this is to first work out the fixed-effect prediction at `5` days and then add the random-effect prediction to it.\n\nThe fixed-effect prediction is just the intercept value plus the coefficient for time multiplied by the number of days (either from the model summary or from `fixef()`). In numbers: `251.405 + (10.467 * 5) = 303.74`. This gives the predicted group-average reaction time at `5` days.\n\nThe random-effect prediction is the same but from `ranef()` and specific to the individual. In numbers: `2.259 + (9.198 * 5) = 48.249`. This gives the **additional** (to the group-average) reaction time specific to the individual.\n\nWe can then add those two values to obtain the predicted reaction time for `Subject 308` at `5` days - i.e. `303.74 + 48.249 = 351.989`. If you don't want to manually calculate this, then you can use:\n\n`predict(mod, newdata = data.frame(days = 5, Subject = 308), re.form = ~(Days|Subject))`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict(mod, newdata = data.frame(Days = 5, Subject = 308), re.form = ~(Days|Subject))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      1 \n351.995 \n```\n\n\n:::\n:::\n\n\nWhich is essentially the same, bar rounding error.\n\nAnd that brings us to the end of this post. Hopefully that gives you some idea as to how random effects and their predictions are calculated. In the next post, we will finish our series on model prediction and visualisation be taking a look at the Cox model. Until then...\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}