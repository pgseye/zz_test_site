{
  "hash": "f18e08764d64720246562435f9b65801",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Model Prediction/Visualisation <br> 5. Linear Mixed Models (LMMs)\"\ndate: 2025-05-30\ncategories: [code, concept, modelling, visualisation]\n# image: \"images/plot.png\"\ndescription: \"Visualising Fixed vs Random Effects.\"\n---\n\n\n\n\n\nIn this example of the latter use-case, we are going to use data from a built-in dataset in the `lme4` package. The `sleepstudy` data looks at reaction times over time in sleep-deprived individuals. For the sake of the exercise we will fit a mixed model with reaction time (ms) as the outcome, time (days) as a fixed-effect and time (days) and individual as random-effects. So this is a random slopes model allowing the 'effect' of sleep-deprivation on reaction time to vary over time for each individual. We fit the model and view a few lines of the dataframe which now contains the fixed (`mod_pred_fix`) and random (`mod_pred_ran`) predictions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lme4)\nlibrary(ggplot2)\nlibrary(gtsummary)\n# Load data\ndata(\"sleepstudy\")\n# Model\nmod <- lmer(Reaction ~ Days + (Days | Subject), data = sleepstudy)\n# Predict\nsleepstudy$mod_pred_fix <- predict(mod, re.form = NA) # predict fixed effects\nsleepstudy$mod_pred_ran <- predict(mod) # predict random effects\n# View data\nhead(sleepstudy, 10)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| Reaction| Days|Subject | mod_pred_fix| mod_pred_ran|\n|--------:|----:|:-------|------------:|------------:|\n| 249.5600|    0|308     |     251.4051|     253.6637|\n| 258.7047|    1|308     |     261.8724|     273.3299|\n| 250.8006|    2|308     |     272.3397|     292.9962|\n| 321.4398|    3|308     |     282.8070|     312.6624|\n| 356.8519|    4|308     |     293.2742|     332.3287|\n| 414.6901|    5|308     |     303.7415|     351.9950|\n| 382.2038|    6|308     |     314.2088|     371.6612|\n| 290.1486|    7|308     |     324.6761|     391.3275|\n| 430.5853|    8|308     |     335.1434|     410.9937|\n| 466.3535|    9|308     |     345.6107|     430.6600|\n\n</div>\n:::\n:::\n\n\nWe can then plot the data interactively by simply 'wrapping' the ggplot object in a `plotly` call. If you hover over a data point you can easily identify which individual it belongs to as well as the observed reaction time. Similarly, by hovering over one of the random slopes you will see the predicted reaction time and the individual that corresponds to.\n\nYou won't want to do this for every plot you make but it does provide a simple way to make some of your more complex visualisations using ggplot that bit more useful (and fun!) in helping to understand your data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot\np <- sleepstudy |>\n    ggplot(aes(x = Days, y = Reaction, color = factor(Subject))) +\n    geom_line(aes(x = Days, y = mod_pred_ran)) +\n    geom_line(aes(x = Days, y = mod_pred_fix), linewidth = 2, color = \"blue\") +\n    geom_point(alpha = 0.5) +\n    xlab(\"Time (days)\") + ylab(\"Reaction Time (ms)\") +\n    guides(color = \"none\") +\n    theme_bw(base_size = 15)\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}