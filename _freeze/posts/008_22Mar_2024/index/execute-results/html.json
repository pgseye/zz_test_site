{
  "hash": "649646c073d5bfcef23af8820707ee00",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Easily view your data by a grouping variable\"\ndate: 2024-03-22\ncategories: [code]\nimage: \"R_small.jpeg\"\ndescription: \"Use `by()` to view your data by a grouping variable.\"\n---\n\n\nIt is easy enough to view a dataframe in `RStudio` by opening the dataframe in the viewer or printing the dataframe (or part of it) to the console. However, this can be messy if you want to quickly identify data by a grouping variable (usually the patient id). The `by()` function can help you to do this. Let's illustrate its utility with the `sleepstudy` dataset from the `lme4` package. To start with I'll print the data for the first 3 subjects as one might.\n\n`sleepstudy |> as_tibble() |> print(n = 30)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lme4)\nlibrary(dplyr)\n# Load data\ndata(\"sleepstudy\")\nsleepstudy |> as_tibble() |> print(n = 30)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 180 × 3\n   Reaction  Days Subject\n      <dbl> <dbl> <fct>  \n 1     250.     0 308    \n 2     259.     1 308    \n 3     251.     2 308    \n 4     321.     3 308    \n 5     357.     4 308    \n 6     415.     5 308    \n 7     382.     6 308    \n 8     290.     7 308    \n 9     431.     8 308    \n10     466.     9 308    \n11     223.     0 309    \n12     205.     1 309    \n13     203.     2 309    \n14     205.     3 309    \n15     208.     4 309    \n16     216.     5 309    \n17     214.     6 309    \n18     218.     7 309    \n19     224.     8 309    \n20     237.     9 309    \n21     199.     0 310    \n22     194.     1 310    \n23     234.     2 310    \n24     233.     3 310    \n25     229.     4 310    \n26     220.     5 310    \n27     235.     6 310    \n28     256.     7 310    \n29     261.     8 310    \n30     248.     9 310    \n# ℹ 150 more rows\n```\n\n\n:::\n:::\n\n\nBut we can do this better with:\n\n`by(sleepstudy, sleepstudy$PATIENT_ID, identity)[1:3]`\n\nNote that the `[1:3]` indicates the range of group indices that you want to view.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nby(sleepstudy, sleepstudy$Subject, identity)[1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$`308`\n   Reaction Days Subject\n1  249.5600    0     308\n2  258.7047    1     308\n3  250.8006    2     308\n4  321.4398    3     308\n5  356.8519    4     308\n6  414.6901    5     308\n7  382.2038    6     308\n8  290.1486    7     308\n9  430.5853    8     308\n10 466.3535    9     308\n\n$`309`\n   Reaction Days Subject\n11 222.7339    0     309\n12 205.2658    1     309\n13 202.9778    2     309\n14 204.7070    3     309\n15 207.7161    4     309\n16 215.9618    5     309\n17 213.6303    6     309\n18 217.7272    7     309\n19 224.2957    8     309\n20 237.3142    9     309\n\n$`310`\n   Reaction Days Subject\n21 199.0539    0     310\n22 194.3322    1     310\n23 234.3200    2     310\n24 232.8416    3     310\n25 229.3074    4     310\n26 220.4579    5     310\n27 235.4208    6     310\n28 255.7511    7     310\n29 261.0125    8     310\n30 247.5153    9     310\n```\n\n\n:::\n:::\n\n\nIf you want to take this a step further, you can generalise this with a function that will allow you to quickly view the data in any range that you want, without having to continually copy and paste that line of code. Just call the function with your dataframe and group id names and the range of group indices that you want to view (interestingly while writing this function I worked out you don't even need the `by()` function to achieve the same result).\n\n`print_groups(sleepstudy, Subject, 1, 3)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create function\nprint_groups <- function(df, id, index1, index2) {\n  df <- data.frame(df)\n  ids_all <-  unique(eval(substitute(id), df))\n  ids_range <- ids_all[index1:index2]\n  if (index1 <= length(ids_all) & index2 <= length(ids_all)) {\n    for (id2 in ids_range) {\n      cat(paste0(\"id = \", id2, \"\\n\"))\n      print(df[eval(substitute(id), df) %in% id2,])\n      cat(\"----------------------------\\n\\n\")\n    }\n  } else {\n    print(\"There aren't that many groups in your dataset\")\n  }\n}\n\n# Use function\nprint_groups(sleepstudy, Subject, 1, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nid = 308\n   Reaction Days Subject\n1  249.5600    0     308\n2  258.7047    1     308\n3  250.8006    2     308\n4  321.4398    3     308\n5  356.8519    4     308\n6  414.6901    5     308\n7  382.2038    6     308\n8  290.1486    7     308\n9  430.5853    8     308\n10 466.3535    9     308\n----------------------------\n\nid = 309\n   Reaction Days Subject\n11 222.7339    0     309\n12 205.2658    1     309\n13 202.9778    2     309\n14 204.7070    3     309\n15 207.7161    4     309\n16 215.9618    5     309\n17 213.6303    6     309\n18 217.7272    7     309\n19 224.2957    8     309\n20 237.3142    9     309\n----------------------------\n\nid = 310\n   Reaction Days Subject\n21 199.0539    0     310\n22 194.3322    1     310\n23 234.3200    2     310\n24 232.8416    3     310\n25 229.3074    4     310\n26 220.4579    5     310\n27 235.4208    6     310\n28 255.7511    7     310\n29 261.0125    8     310\n30 247.5153    9     310\n----------------------------\n```\n\n\n:::\n:::\n\n\nAnd there you have it!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}